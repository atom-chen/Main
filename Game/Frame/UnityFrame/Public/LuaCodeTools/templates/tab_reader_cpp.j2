//!!Generate Code,do not edit!!

#include "Routine/Routine.h"
#include "Routine/RoutineScript.h"
#include "Public.h"
//include file
{% for tab in tabs %}
#include "Table/Table_{{tab.name}}.h"
{%- endfor %}

{% for tab in tabs %}
int32_t C_Get{{tab.name}}(lua_State *L)
{
    __LUA
    SOL_ASSERT(L,"");
    ASSERT_LUA_NUMBER_PARAM(L,1);
    int32_t id = static_cast<int32_t>(lua_tonumber(L,1));

    const Table_{{tab.name}} *pTab = TABLE_GET_BY_ID(Table_{{tab.name}})(id);

    if (pTab == nullptr)
    {
        lua_pushnil(L);
        return 1;
    }

    lua_newtable(L);
    {% for col in tab.colums -%}
    {% if col.is_list -%}
    {
        lua_pushstring(L,"{{col.name}}");
        lua_newtable(L);
        for (int32_t i=0; i < pTab->get{{col.name}}Count(); i++)
        {
            {%if col.type == 'int'%}
            int32_t val = pTab->Get{{col.name}}byIndex(i);
            lua_pushinteger(L,val);
            {%else%}
            float val = pTab->Get{{col.name}}byIndex(i);
            lua_pushnumber(L,val);
            {%endif%}
            lua_rawseti(L,-2,i + 1);
        }
        lua_settable(L,-3);
    }
    {% else -%}
    {
        lua_pushstring(L,"{{col.name}}");
        {%if col.type == 'int'%}
        int32_t val = pTab->Get{{col.name}}();
        lua_pushinteger(L,val);
        {%else%}
        float val = pTab->Get{{col.name}}();
        lua_pushnumber(L,val);
        {%endif%}
        lua_settable(L,-3);
    }
    {% endif -%}
    {% endfor %}
    return 1;
    LUA__
    lua_pushnil(L);
    return 1;
}
{%- endfor %}

void LuaRegisterTabReader(lua_State *L)
{
    {% for tab in tabs %}
    lua_register(L,"C_Get{{tab.name}}",C_Get{{tab.name}});
    {%- endfor %}
}