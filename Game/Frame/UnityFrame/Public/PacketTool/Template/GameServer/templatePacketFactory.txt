#include "Public.h"
$beginrepeat$
#include"$name$_PAK.h"
$endrepeat$

PacketFactoryManager gPacketFactoryManager;
PacketFactoryManager::PacketFactoryManager( )
{
	__SOL_TRACE
	m_Factories = nullptr ;
	m_Size = Packets::PACKET_MAX ;
	SOL_ASSERT( m_Size>0, "" ) ;
	m_Factories = new PacketFactory*[ m_Size ];
	SOL_ASSERT( m_Factories, "" ) ;
	m_pPacketAllocCount = new uint32_t[m_Size] ;
	SOL_ASSERT( m_pPacketAllocCount, "" ) ;	
	for(int32_t i=0; i<m_Size; i++)
	{
		m_Factories[i] = nullptr ;
		m_pPacketAllocCount[i] = 0 ;
	}	
	SOL_TRACE__
}

PacketFactoryManager::~PacketFactoryManager( )
{
	__SOL_TRACE
	SOL_ASSERT( m_Factories!=nullptr,"" ) ;
	for( int32_t i=0; i<m_Size; i++ )
	{
		SAFE_DELETE(m_Factories[i]) ;
	}	
	SAFE_DELETE_ARRAY(m_Factories) ;
	SAFE_DELETE_ARRAY(m_pPacketAllocCount) ;		
	SOL_TRACE__
}

void PacketFactoryManager::AddFactory(PacketFactory* pFactory)
{
	__SOL_TRACE
	if( m_Factories[pFactory->GetPacketID()]!=nullptr )
	{
		 SOL_ASSERT( false, "") ;
		return ;
	}
	
	m_Factories[pFactory->GetPacketID()] = pFactory ;
			
	SOL_TRACE__
}

Packet* PacketFactoryManager::CreatePacket(PacketID_t packetID) 
{
	__SOL_TRACE
	if(packetID>=m_Size || m_Factories[packetID]==nullptr) 
	{
		SOL_ASSERT(false, "") ;
		return nullptr ;
	}

	Packet* pPacket = nullptr ;
	Lock() ;
	try
	{
		pPacket = m_Factories[packetID]->CreatePacket();
		m_pPacketAllocCount[packetID]++ ;
	}
	 catch(...)
	{
		pPacket = nullptr ;
	}
	Unlock() ;

	return pPacket ;
			
	SOL_TRACE__

	return nullptr ;
}
void PacketFactoryManager::RemovePacket(Packet* pPacket)
{
	__SOL_TRACE

	if( pPacket==nullptr )
	{
		SOL_ASSERT(false, "") ;
		return ;
	}

	PacketID_t packetID = pPacket->GetPacketID() ;
	if( packetID>=m_Size ) 
	{
		SOL_ASSERT(false, "") ;
		return ;
	}

	Lock() ;
	try
	{
		SAFE_DELETE( pPacket ) ;
		m_pPacketAllocCount[packetID] -- ;
	}
	 catch(...)
	{
	}
	Unlock() ;
	return ;

	SOL_TRACE__

	return ;
}

  
bool PacketFactoryManager::Init()
{
	__SOL_TRACE
$beginrepeat$
	AddFactory(new Packets::$name$_PAKFactory());
$endrepeat$
	
	return true ;
	SOL_TRACE__

	return false ;
}
