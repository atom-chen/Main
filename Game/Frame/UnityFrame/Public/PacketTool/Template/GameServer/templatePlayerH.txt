////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//Auto created by script, Don't try to Modify!
////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Public.h"
#include "PlayerBase.h"

namespace ProtobufPacket
{
@forwardDecl
}


class Player
{
    public:
        Player(const char* TypeName,
            uint32_t InitInputBufLen,
            uint32_t MaxInputBufLen,
            uint32_t InitOutputBufLen,
            uint32_t MaxOutputBufLen,
            int32_t MaxProcessCommandPerTick);
            
        virtual ~Player();
    
    public:
        Player(const Player& r) = delete;
        Player& operator=(const Player& r) = delete;
        
    public:
        int32_t GetID() const {return m_nID;}
        const solar::string<64> & GetTypeName()const {return m_TypeName;}

    private:
        int32_t             m_nID;
        solar::string<64>   m_TypeName;
        bool                m_bKick;
        SocketInputStream   m_SocketInputStream;
        SocketOutputStream  m_SocketOutputStream;
        

        
    protected:
		int32_t             m_nMaxProcessCommandPerTick;
		Socket              m_Socket;
		PacketStat          m_PacketStat;
	    int32_t             m_nHeartbeat;
        int32_t             m_nStatus;
        
    public:
        void LogPacketStat() const;
        
        virtual bool ProcessInput();
        virtual bool ProcessOutput();
        virtual bool ProcessCommand();
        
        virtual void OnInputError(uint32_t op_ret){}
        virtual void OnOutputError(uint32_t op_ret){}
        virtual void OnKick(int32_t nReason){}
        
        bool    Tick(const sol_routine_time &rt);
        
        virtual void    SendPacket(const Packet &rPacket);
        virtual void    SendPacketBuf(const PacketBuf &rPacketBuf);
        
        void    SetStatus(int32_t nStatus){m_nStatus = nStatus;}
        int32_t GetStatus()const {return m_nStatus;}
        
        void    Kick(int32_t nReason);
        
        Socket& GetSocket(){return m_Socket;}
        bool    IsValid()const {return m_Socket.isValid();}
        void    Disconnect();
        
        uint32_t GetSocketInputStreamLength()const {return m_SocketInputStream.Length();}
        uint32_t GetSocketOutputStreamLength()const {return m_SocketOutputStream.Length();}
        
        bool    ProcessHeartbeat(time_t nAnsiTime);
        
        virtual uint32_t   HandlePacket(const ProtobufPacket::XX_REQUEST_HEARTBEAT &rPacket);
        virtual uint32_t   HandlePacket(const ProtobufPacket::XX_RESPONSE_HEARTBEAT &rPacket);
        
    public:
@handleDecl
        
};

using PlayerPtr     = boost::shared_ptr<Player>;
using PlayerPtrList = std::list<PlayerPtr>;

















