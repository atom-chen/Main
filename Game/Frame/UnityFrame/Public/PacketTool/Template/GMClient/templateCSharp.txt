using UnityEngine;
using System.Collections;
using ProtobufPacket;
using Network;

enum MessageID :short
    {
$beginrepeat$
        PACKETID_$name$ = $id$,
$endrepeat$
    }

    public class PacketDispatcher
    {
        public static void ReceivePacket(int messageID, System.IO.Stream packetData)
        {
            switch(messageID)
            {
$beginrepeatmc$
                case $id$: $name$_Handler.ReceivePacket($name$.Deserialize(packetData)); break;
$endrepeat$
$beginrepeatxx$
                case $id$: $name$_Handler.ReceivePacket($name$.Deserialize(packetData)); break;
$endrepeat$
            }
        }
    }

    public abstract class ProtoPacket
    {
        public abstract short GetMessageID();
        public abstract byte[] GetPacketArray();
        public void SendPacket()
        {
            NetworkLogic.SendPacket(this);
        }
    }
$beginrepeatcm$
    public class $name$_PAK : ProtoPacket
    {
        private $name$ m_packet = new $name$();
        public $name$ data { get {return m_packet;} }

        public override short GetMessageID()
        {
            return (short)MessageID.PACKETID_$name$;
        }

        public override byte[] GetPacketArray()
        {
            return $name$.SerializeToBytes(m_packet);
        }

    }
$endrepeat$

$beginrepeatxx$
    public class $name$_PAK : ProtoPacket
    {
        private $name$ m_packet = new $name$();
        public $name$ data { get {return m_packet;} }

        public override short GetMessageID()
        {
            return (short)MessageID.PACKETID_$name$;
        }

        public override byte[] GetPacketArray()
        {
            return $name$.SerializeToBytes(m_packet);
        }

    }
$endrepeat$