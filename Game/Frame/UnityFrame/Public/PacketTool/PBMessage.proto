package ProtobufPacket;


//服务器返回客户端的错误代码
//可以用错误代码从字典直接获取到提示信息
//可以分段使用，需要避免重复冲突
enum RESULT
{
	SUCCESS                 = 0;
	//登录
	FAIL_VALIDATEPROCESS    = 1;
	FAIL_ALREADYLOGIN       = 2;
	FAIL_QUEUEFULL          = 3;
	FAIL_NEEDFORCEENTER     = 4;
	FAIL_PACKETNOTMATCH     = 5;
	FAIL_VERSIONNOTMATCH    = 6;
	FAIL_ONLYALLOWGM        = 7;        
	FAIL_IPWHITELISTLIMIT   = 8;
	FAIL_PLATFORMRESTRICT	= 9;
	FAIL_PCNOTALLOWLOGIN	= 10;
	FAIL_NOPLAY				= 11;
	
	//创建角色
	CREATE_USER_FAIL					= 101;		//服务器内部错误
	CREATE_USER_FAIL_NAMEEXIST			= 102;		//名字已经存在
	CREATE_USER_FAIL_NAMESCREENING	    = 103;		//名字含有屏蔽字
	CREATE_USER_FAIL_LONGNAME		    = 104;		//名字太长
	CREATE_USER_FAIL_GUIDEXIST	        = 105;		//GUID重复
	CREATE_USER_FAIL_OVERNUM		    = 106;		//角色数量超出限制
	CREATE_USER_FAIL_ACTIVATION	        = 107;		//激活码错误	
	CREATE_USER_FAIL_LOADCHAR	        = 108;		//加载角色信息失败	
	
	//体力
	STAMINA_NOTIFY_BUY		= 200;			//体力不足，提示玩家购买
	
	//好友
	FRIEND_NOPLAYER 			= 301;		//没有找到符合条件的玩家
	FRIEND_TOOQUICK 			= 302;		//操作太频繁
	FRIEND_FULL					= 303;		//好友已满
	FRIEND_OUT_OF_DATE			= 304;		//好友请求已经过时
	FRIEND_CHAT_CONTENT_LIMIT	= 305;		//聊天内容过长
	FRIEND_CHAT_GUID_INVALD		= 306;		//非法聊天目标GUID
	FRIEND_FIND_PLAYER_NUM_LIMIT= 307;		//匹配结果过多，请修改关键词进行精确匹配！
	FRIEND_ADD_FRIEND_MSG_LENGHT_LIMIT	= 308;		//附加信息过长
	FRIEND_ADD_IS_FRIEND	= 309;		//已经是你的好友
	FRIEND_CHAT_TARGET_IS_SELF	= 310;		//聊天对象不能是自己
	FRIEND_CHAT_CLOSE	= 311;		//聊天功能已经关闭
	FRIEND_CLOSE	= 312;		//好友功能已经关闭
	FRIEND_BACK_LIST_CLOSE	= 313;		//黑名单功能已经关闭
	FRIEND_BACK_LIST_CHAT	= 314;		//对方在你的黑名单里
	FRIEND_BACK_LIST_CHAT_SELF	= 315;		//你在对方黑名单，无法发送消息！
	CHAT_CD_LIMIT				= 316;   //聊天cd限时，需要本地恢复输入信息
	
	
	
	
	//群组聊天
	GROUP_CHAT_NAME_LEGHT_LIMIT1 = 400;//群组名过短
	GROUP_CHAT_NAME_LEGHT_LIMIT2 = 401;//群组名过长
	GROUP_CHAT_NAME_CHAR_LIMIT = 402;//含有非法字符
	GROUP_CHAT_JOIN_UPPER_LIMIT = 403;//加入群聊组达到上限
	GROUP_CHAT_HAVE_JOINED = 404; //已经加入该群组
	GROUP_CHAT_MEMBER_UPPER_LIMIT = 405;//该群人数已达到上限
	GROUP_CHAT_ILLEGAL_GUID = 406;//非法群组GUID
	GROUP_CHAT_NAME_ALREADY_HAVE = 407;//已存在重名的群聊组
	GROUP_CHAT_NUM_LIMIT = 408;//服务器已经达到群组上限
	GROUP_CHAT_MEMBER_NUM_LIMIT = 409;//群组成员人数达到上限
	GROUP_CHAT_INVITER_GUID_NOT_MEMBER = 410;//邀请人非本组成员
	GROUP_CHAT_SELF_GUID_NOT_MEMBER = 411;//无法离开群组，非本组成员
	GROUP_CHAT_IS_ALREADY_MEMBER = 412;//邀请的人里存在已经是本组成员玩家
	GROUP_CHAT_REMOVE_NOT_FOUND = 413;//移除聊天组时未发现该组
	GROUP_CHAT_CLOSE	= 414;//群聊功能已经关闭
	GROUP_CHAT_ILLEGAL_NAME = 415;//非法群组名
	GROUP_CHAT_PERSONAL_NUM_LIMIT = 416;//您的群组数量达到上限
	GROUP_CHAT_NOT_GROUP_MEMBER = 417; //您不是该群组成员
		
	
	//道具
	
	
	//战斗
	BATTLE_TIME_OUT = 600;			//战斗超时，战斗没销毁，计算时超时
	BATTLE_TIME_OUT_1 = 601;		//战斗超时，Cantainer保存的战斗已销毁
	BATTLE_TIME_OUT_2 = 602;		//战斗超时，战斗断线超时
	BATTLE_TIME_OUT_3 = 603;		//战斗超时，副本销毁
	NOT_IN_BATTLE = 604;			//不在战斗中
	BATTLE_VERIFY_FAILED_1 = 605; 	//战斗验证失败，基础规则验证不通过
	BATTLE_VERIFY_FAILED_2 = 606;	//战斗验证失败，战斗模拟不通过
	BATTLE_LOCKED = 607;			//战斗关停
	BATTLE_AUTO_QUARTZAUTOSELL = 608;			//战斗需要展示自动焚星提示
	BATTLE_WAITING_NEXT_BATTLE = 609;			//战斗等待

	//idip
	IDIP_BAN_ACCOUNT = 800; //帐号被封

	//创建角色限制
	CREATE_ROLE_LIMIT = 901; 			//登陆后创建角色，达到上限，直接不弹创建角色
	CREATE_ROLE_LIMIT_1 = 902; 			//登陆成功，进入了创建角色界面，点击创建后，达到上限
	CREATE_ROLE_LIMIT_NOT_OPEN = 903; 	//未到激活时间
}



message GC_SESSION
{
optional int32  session = 1;
}



//#client ask login
//@CG
message CG_LOGIN
{
    enum LOGINTYPE
    {
        TEST    = 0;
        ONE     = 1;
		MSDK    = 2;
    }
    enum BIOSTYPE
    {
        IOSJB      = 1;
        ANDROID    = 2;
        IOS        = 3;
    }
    required int32      logintype               = 1;
    required int32      gameversion             = 2;
    required int32      programversion          = 3;
    required bool       forceenter              = 4;
    required int32      maxpacketid             = 5;
    required string     accountname             = 6;
    required string     token                   = 7;
    required int32      bios                    = 8;
    required string     bimac                   = 9;
    optional int32      rapidvalidatecode       = 10;
    optional uint64     autoselectroleguid      = 11;
    optional string     onepushid               = 12;
    optional string     accountactivation       = 13;
    optional int32      mediaid                 = 14;
	optional string	    phonemodel				= 15; 
	optional _MSDK      msdk                    =16;
}

message _MSDK
{ 
	optional string     channelid               =1;
	optional string     gameappid               =2;
	optional int32      platid                  =3[default=-1];
	optional string     openid                 	=4;
	optional string     telecomoper             =5; 
  optional string     network                	=6;
	optional int32      loginchannel           	=7[default=-1];
	optional string     clientip             		=8;
	optional int32      regchannel            	=9[default=-1];
  optional int32      systemplatid          	=10[default=-1];//0 ios 1 android 2其他
  optional bool				IsLoginFromPlat					=11[default = false];
  
	enum PLATFORM
	{
    ePlatform_None=0; //未登录
    ePlatform_Weixin=1;//微信平台
    ePlatform_QQ=2; //手Q平台
    ePlatform_WTLogin=3; //WTLogin登录
    ePlatform_QQHall=4; //手Q游戏大厅
    ePlatform_Guest=5; //游客登录
    ePlatform_Auto=6 ;//自动登录，使用上一次平台
  }
}


message _User
{
    optional uint64     guid                     = 1;
    optional string     name                     = 2;
    optional int32      level                    = 3[default=1];
    optional int32      sex                      = 4;
    optional int64      create_time	             = 5;
	optional int32		scene					 = 6[default = -1];
	optional float		posX					 = 7;
	optional float		posZ					 = 8;
	optional int32		modelid					 = 9;
	optional int32		env						 = 10[default = -1];
	optional int32		headframe				 = 11;
}

//item
//=================数据库存储 修改需要考虑兼容=================
message _ITEM
{
	optional int32 dataid 			= 1;    //dataId
	optional uint64 guid 				= 2;    //guid
	optional int32 stackcount 	= 3[default = 1];    //堆叠数量
	optional int64 createtime 	= 4;    //创建时间
}


//#client login result
//@GC
message GC_LOGIN_RET
{
    required RESULT     result                             = 1;
    required int32      validateprocessfailcode             = 2;
    required int32      validatefailcode                    = 3;
    required string     validatefailmsg                     = 4;
    required int32      rapidvalidatecode                   = 5;
    optional string     platformrestrictnotice              = 6;
    optional _User       user                                = 7;
    optional string		noplaymsg							= 8;
    optional int64		openNumeralTime						= 9; //开服时间
}

//#request heartbeat
//@XX
message XX_REQUEST_HEARTBEAT
{
    required int32 ansi_time = 1;
}

//#response heartbeat
//@XX
message XX_RESPONSE_HEARTBEAT
{

}

//#Gm command str
//@CG
message CG_GMCMDSTR
{
	required string cmdstr			= 1;		//命令
	optional uint64 OrbmentCardGuid		= 2;
}

//#notice from server
//@GC
message GC_NOTICE
{
	required string notice = 1; //notice的内容
	optional int32 filterRepeat = 2;	//是否过滤重复文字 1:是 0:否
}

//#rolling notice from server
//@GC
message GC_ROLLING_NOTICE
{
	required string notice = 1; 			//notice的内容
	required float minExtTime = 2;		//最短保留时间
	required float maxExtTime = 3;		//最长保留时间
}


//#Sync CommonData to Client
//@GC
message GC_SYNC_COMMONDATA
{
    repeated int32 nIndex     = 1;
    repeated int32 nValue     = 2;
}


//#Sync CommonData64 to Client
//@GC
message GC_SYNC_COMMONDATA64
{
    repeated int32 nIndex     = 1;
    repeated int64 nValue     = 2;
}


//#Sync CommonFlag to Client
//@GC
message GC_SYNC_COMMONFLAG
{
    repeated int32 nIndex       = 1;
    repeated bool bFlag         = 2;
}

//#Client ask to set Commonflag
//@CG
message CG_ASK_SETCOMMONFLAG
{
    required int32 nBits        = 1;
    required bool bFlag         = 2;
}

//#Sync CommonFlag to Client
//@GC
message GC_ASK_COMMONFLAG_RET
{
    required int32 nBits        = 1;
    required bool bFlag         = 2;
}



//#quit game
//@CG
message CG_QUIT_GAME
{
    enum QUITTYPE
    {
        ENTIRELY        = 0;
        INPUT_ACCOUNT   = 1;
    }
    required int32 quittype = 1;
}

//#quit game ret
//@GC
message GC_QUIT_GAME_RET
{
    enum QUITTYPE
    {
        ENTIRELY                         = 0;
        INPUT_ACCOUNT                    = 1;
    }
    required int32 quit_type            = 1;
}



message CG_REQ_RANDOMNAMES
{    
}

message GC_RET_RANDOMNAMES
{
    repeated string male_names   = 1;        //返回的名字
    repeated string female_names = 2;    //返回的名字
}


//#login queue status
//@GC
message GC_LOGIN_QUEUE_STATUS
{
	enum STATUS
	{
		BEGIN		= 0;
		UPDATE	    = 1;
		END			= 2;
	}
	required int32 	status = 1;
	required int32 	index = 2;
}

//#Server Syn Attr
//@GC
message GC_SYN_ATTR
{
	optional int64 CurGoldCoin				= 1;	//金币
	optional int64 CurYuanBao					= 2;	//元宝
	optional int32 Stamina						= 3;	//体力
	optional int32 Vigour						= 4;    //活力
	optional int64 BindYuanBao					= 5;    //绑定元宝
	optional int64 LoanGold					= 6;    //帮贡
}


//#create user
//@CG
message CG_CREATE_USER
{
	required string name 				= 1;
	required int32  sex					= 2;
	repeated int32  dyeColorItem		= 3;
	required int32  skin				= 4;
}

//#create user ret
//@GC
message GC_CREATE_USER_RET
{

	required RESULT  result	        	= 1;
    optional _User  user               = 2;
}

//#require enter story
//@CG
message CG_ENTER_STORY
{
	required int32  id					= 1;		//剧情ID
	required int32 	line				= 2;		//故事线ID
	required bool	restart				= 3;		//是否重新开始
	required uint64 cardGuid			= 4;		//检测剧情条件的符灵id
	required bool	reconnecting		= 5;		//是否断线重连
}

//#return enter story
//@GC
message GC_ENTER_STORY
{
	required int32  id					= 1;		//剧情ID
	required int32	line				= 2;		//故事线ID
	required int32  ret					= 3;		//剧情返回结果
}

//#require finish story step
//@CG
message CG_FINISH_STORY
{
	required int32  id					= 1;		//剧情ID
	required int32	line				= 2;		//故事线ID
}

//#require leave story
//@CG
message CG_LEAVE_STORY
{
}

//#return enter story
//@GC
message GC_LEAVE_STORY
{
	required int32  id					= 1;		//剧情ID
	required int32  ret					= 2;		//剧情返回结果
	required int32 sceneId			= 3;		//返回的场景
	required float dstPosX			= 4;		//返回的坐标X
	required float dstPosZ			= 5;		//返回的坐标Z
}

//#return story fin
//@GC
message GC_FIN_STORY
{
	required int32 line					= 1;		//故事线索引
	required int32 FinTimes			= 2;		//完成的次数
}

//#return story data
//@GC
message GC_SYNC_STORY_DATA
{
	required bool bFull					= 1;		//是否是全部剧情数据
	repeated int32 idx					= 2;		//索引
	repeated int32 id					= 3; 		//id
	repeated int32 fin					= 4;		//完成次数
	repeated int32 lineflag			= 5;		//故事线状态
	repeated int32 flag					= 6;		//flag的索引
	repeated bool state					= 7;		//flag的状态
	repeated bool award					= 8;		//是否已领奖, 与上面的idx数量对应
}

//#require process dialog
//@CG
message CG_DIALOG
{
	required int32  dialogId		= 1;		//对话NPC的ID
	required int32	optionId		= 2;		//对话NPC的选项索引
}

//server send item to client
message GC_ITEM_UPDATE
{
	required int32 packtype 		= 1;		//背包类型
	required int32 packindex		= 2; 		//背包索引
	//物品
	required _ITEM item					= 3;		//物品结构
	required bool packdirty			= 4; 		//背包是否还有脏标记
}

//client send use item
message CG_ITEM_USE
{
	required int32 packtype						= 1;		//pack type
	required uint64 itemguid 				  = 2;    //guid
	required int32 itemNum 				  	= 3;    //num
}





//#Client Req Add Friend
//@CG
message CG_ADD_FRIEND
{
	enum AddFrienType
	{
		RETTYPE_TRYADD  = 0;		//主动发起好友添加
		RETTYPE_AGREETOADD = 1;		//同意添加
		RETTYPE_REFUSETOADD = 2;	//拒绝添加
	}
	required uint64 guid			    = 1;			//玩家GUID
	required int32 realAddFrienType		= 2;			//发起好友添加 或同意 或拒绝添加
	optional int32 checkSignCode		= 3;			//防作弊验证码
	optional string addfriendmsg		= 4;			//加好友一句话
}




//#Server Ret Add Friend  同步加好友请求列表到客户端
//@GC
message GC_ADD_FRIEND
{
	enum AddFrienOptType
	{
		FRIEND_LIST  = 0;		//好友列表
		REQ_LIST = 1;		//请求列表
	}
	optional RESULT result     					= 1[default=SUCCESS];
	repeated string addfriendmsg				= 6;			//加好友一句话	
	optional AddFrienOptType optType			= 8[default= FRIEND_LIST];			//类型
	repeated _DBRelation  infos = 12;
}

//#Client Req Del Friend
//@CG
message CG_DEL_FRIEND
{
	required uint64 guid			= 1;			//玩家GUID
	required int32	delType			= 2;			//删除类型
}

//#Server Ret Del Friend
//@GC
message GC_DEL_FRIEND
{
	required uint64 guid			= 1;			//玩家GUID
}


enum FINDPLAYERTYPE
{
FINDPLAYER_BY_NAME = 1;//名字查找
FINDPLAYER_BY_RECOMMEND = 2;//推荐
FINDPLAYER_BY_RECOMMEND_USER = 3;//推荐
FINDPLAYER_BY_NEARY = 4;//附近的人
}

//#Client Req Find Player
//@CG
message CG_FIND_PLAYER
{
	optional uint64 Guid			= 1;			//被查找人的GUID
	optional string Name			= 2;			//被查找人的名字
	optional FINDPLAYERTYPE  findType =3[default= FINDPLAYER_BY_NAME];  
}

enum FINDPLAYERRECOMMEND
{
FINDPLAYERRECOMMEND_BY_LV = 1;//等级推荐
FINDPLAYERRECOMMEND_BY_NEARY = 2;//附近的人
}


//#Server Ret Find Player Result
//@GC
message GC_FIND_PLAYER
{
	optional RESULT result     					= 1[default=SUCCESS];
	repeated uint64 guid			= 2;			//玩家GUID
	repeated string Name			= 3;			//名字
	repeated int32  Level			= 4;			//等级
	repeated uint64  Icon			= 5;			//头像
	repeated int32 HeadFrame		= 6;			//头像框
	repeated int32  distance		= 7;			//距离/ 推荐方式
	optional FINDPLAYERTYPE  findType = 8[default= FINDPLAYER_BY_NAME];
}


//#Server Notice Client be added by Other Player  废弃
//@GC
message GC_NOTICE_ADDED_FRIEND
{
	optional uint64 guid			= 1;			//添加玩家为好友的其他玩家GUID
	optional string Name			= 2;			//添加玩家为好友的其他玩家的名字
	optional uint64 Icon			= 3;			//头像	
	optional int32 HeadFrame		= 4;			//头像框
	optional int64 AddTime			= 5;			//时间	
}

//#Server Syc One Friend State
//@GC
message GC_SYC_FRIEND_STATE
{
	repeated uint64 guid			= 1;			//玩家GUID
	repeated bool State			= 2;			//状态
	optional bool isBattleState = 3 [default = false]; //是否是战斗状态
}




//#Server Syc One Friend Info
//@GC
message GC_SYC_FRIEND_INFO
{
	optional bool  State	   = 6;			//状态
	optional _DBRelation info = 9;
}


//#Server Syc Full Friends List
//@GC
message GC_SYC_FULL_FRIEND_LIST
{
    repeated bool  State	   = 6;			//状态
	repeated _DBRelation infos = 9;
}




//Client Send Personal Chat
message CG_CHAT_PERSONAL
{
	optional string Content				= 1;
	optional uint64 ReciverGuid			= 2;
	optional _LinkObjs linkObjs			= 3; //超链接
	optional bytes   Voice              =4;
	optional string  GVoiceId           =5;
	optional int32 HeadFrame			=6;
	optional uint64 CustomPic			=7;
}

//Server Send Personal Chat
message GC_CHAT_PERSONAL
{
	optional RESULT result     				= 1[default=SUCCESS];
	optional string Content					= 2;
	optional uint64 SenderGuid				= 3;
	optional string SenderName				= 4;
	optional uint64 ReciverGuid				= 5;
	optional int64  SendTime				= 6;
	optional uint64  SenderIcon				= 7;				
	optional int32  SenderLevel				= 8;
	optional _LinkObjs linkObjs				= 9; //超链接
	optional bytes Voice                    =10;
	optional bool   fromServer 				= 11[default = false];
	optional string  GVoiceId               =12;
	optional int32 HeadFrame				=13;
	optional uint64 CustomPic				=14;
}



message GC_CHAT_PERSONAL_HISTORY
{

	repeated string Content					= 1;
	repeated uint64 SenderGuid				= 2;
	repeated string SenderName				= 3;
	repeated int64  SendTime				= 4;
	repeated uint64  SenderIcon				= 5;	
	repeated int32  SenderLevel				= 6;
	repeated int32 SenderHeadFrame			= 7;
	repeated bool   fromServer 				= 8;
}


//=================数据库存储 修改需要考虑兼容=================
message _GROUP_CHAT_MEMBER
{
	optional int32  MemberLevel		= 1;		//等级
	optional uint64  MemberIcon		= 2;		//头像		
	optional int32  MemberState		= 3;		//状态
	optional uint64 MemberGuid		= 4;	
	optional string MemberName		= 5;
	optional int64  AddTime			= 6;		//时间	
	optional int64  loginTime		= 7;		//最近一次登录时间
	optional int32 MemberHeadFrame  = 8;		//头像框
}

//=================数据库存储 修改需要考虑兼容=================
message _GROUP_CHAT
{
	optional uint64 GroupGuid		= 1;	
	optional string GroupName		= 2;	
	optional uint64  GroupIcon		= 3[default = 1];
	optional int64  CreateTime		= 4;	
	repeated _GROUP_CHAT_MEMBER  Members		= 5;
	repeated _GROUP_CHAT_CHAT    chats  =6;	

}


//=================数据库存储 修改需要考虑兼容=================
message GC_SYC_FULL_GROUP_CHAT_LIST
{
	repeated _GROUP_CHAT Groups		= 1;
	optional bool	flag = 2;
}


//Client Send group create
message CG_GROUP_CREATE
{
	optional string GroupName		= 1;	
	optional uint64  GroupIcon		= 2;	
	repeated uint64 MemberGuids		= 3;	
	optional _GROUP_CHAT_MEMBER z_creater	= 4;//server
}


//server Send group create
message GC_GROUP_CREATE
{
	optional RESULT result     		= 1[default=SUCCESS];
	optional _GROUP_CHAT Group		= 2;	
}

//要请玩家进入
message CG_GROUP_JOIN
{
	optional uint64 GroupGuid		= 1;	
	repeated uint64 MemberGuids		= 2;	
	optional uint64 z_inviterguid	= 3;//server
}


message GC_GROUP_JOIN
{
	optional RESULT result     		= 1[default=SUCCESS];
	optional _GROUP_CHAT Group		= 2;	
}

message CG_GROUP_LEAVE
{
	optional uint64 GroupGuid		= 1;	
	optional uint64 z_memberguid	= 2;//server	
}


message GC_GROUP_LEAVE
{
	optional RESULT result     		= 1[default=SUCCESS];
	optional uint64 GroupGuid		= 2;			
	optional uint64 memberGuid		= 3;	
}

message _GROUP_CHAT_CHAT
{
	optional string Content			= 1;
	optional uint64 GroupGuid		= 2;
	optional uint64 senderguid		= 3; //server to client
	optional uint64 chatguid		= 4; //server to client
	optional string sendername		= 5; //server to client
	optional int64 time		= 6; //server to client
	optional uint64 sendericon		= 7; //server to client
	optional int32 senderlevel		= 8; //server to client
	optional _LinkObjs linkObjs		= 9; //超链接
	optional bytes Voice            =10;
	optional string  GVoiceId           =11;
	optional int32 HeadFrame				=12;
	optional uint64 CustomPic				=13;
}


//Client Send group Chat
message CG_GROUP_CHAT_CHAT
{
	optional _GROUP_CHAT_CHAT chat		= 1;
}



//Server Send group Chat
message GC_GROUP_CHAT_CHAT
{
	optional RESULT result     			= 1[default=SUCCESS];
	optional _GROUP_CHAT_CHAT chat		= 2;
	optional bool   fromServer = 3[default = false];	
}


message CG_GROUP_CHAT_CHANGE_NAME
{
	optional uint64 groupguid   = 1;
	optional string name		 = 2;			
}

message GC_GROUP_CHAT_CHANGE_NAME
{
	optional RESULT result     			= 1[default=SUCCESS];
	optional uint64 groupguid   = 2;
	optional string name		= 3;			
}


//#Client Req Add BlackList
//@CG
message CG_ADDBLACKLIST
{
	optional _DBRelation  info  = 6; 
}

//#Server Ret Add BlackList
//@GC
message GC_ADDBLACKLIST
{
	optional RESULT result     					= 1[default=SUCCESS];
	optional _DBRelation  info  = 8; 
}

//#Server Syc Full Black List
//@GC
message GC_SYC_FULL_BLACK_LIST
{
	repeated _DBRelation  infos  = 8; 
}

//#Client Req Del BlackList
//@CG
message CG_DELBLACKLIST
{
	required uint64 guid			= 1;			//玩家GUID
}

//#Server Ret Del BlackList
//@GC
message GC_DELBLACKLIST
{
	required uint64 guid			= 1;			//玩家GUID
}


//#Server Sync Stamina Info to Client
//@GC
message GC_STAMINA
{
	optional int32 stamina		= 1;				//当前体力
	optional int64 nextrecovertime = 2;		//下次恢复时间
	optional int32 staminabuytimes = 3;		//体力购买次数
}

//#Client Req Buy Stamina
//@CG
message CG_STAMINA_BUY
{
}



enum DROPITEMTYPE
{
	DROP_ITEM_INVALID = -1;
	DROP_ITEM_ITEM = 0;//物品     
	DROP_ITEM_CARD = 1;//1-符灵
	DROP_ITEM_CARD_PIECE = 2;//2-符灵碎片
	DROP_ITEM_DROPITEM = 3;//3-DropItem表子ID
	DROP_ITEM_TALISMAN_MATERIAL = 4;//--法宝材料
	DROP_ITEM_QUARTZ = 5;//5-星魂ID
	DROP_ITEM_DRAWCARD_MATERIAL = 6;	//抽卡材料
	DROP_ITEM_HERO_SKILLPOINT = 7;		//主角技能点
	DROP_ITEM_HERO_PIECE = 8;//主角碎片
	DROP_ITEM_REPUTATION = 9;	//声望
	DROP_ITEM_NUM = 10;
}

message _DROP_ITEM
{
	optional int32 droptype = 1;				    //掉落类型	
	optional int32 dropid = 2;							//掉落物品id：卡牌，符灵，符灵碎片，法宝，星魂的id
	optional int32 dropcount = 3;						//掉落物品数量
	optional int32 dropnotifyid = 4;				//掉落物品通告id
	optional int32 dropparam = 5;						//掉落参数
	optional bool  dropdoubled = 6;					//是否翻倍
	optional float dropMulti = 7;				    //翻倍倍数
	repeated _DROP_ADDITION dropAddition = 8; // 各种加成项
}

message _DROP_ADDITION
{
	enum ADDITION_TYPE
	{
		QQLogin = 1; // 手q登陆加成
		QQVip = 2; // qqvip
		Augur = 3; // 玄学运势
		CardLove = 4; // 情缘
		AwardExtra = 5; // 集字活动
	}

	optional ADDITION_TYPE addType = 1; // 加成类型
	optional int32 addCount = 2; // 加成数量
	optional bool augurOverFlow = 3; // 签加成是否超出上限
}

//DropList Struct
message _DROP_LIST
{
	optional int32 yuanbao = 1;						//元宝
	optional int32 bindyuanbao = 2;				//绑定元宝
	optional int32 gold = 3;							//金币
	optional int32 exp = 4;								//角色经验
	optional int32 cardexp = 5;						//符灵经验
	optional int32 stamina = 6;						//体力
	repeated _DROP_ITEM  drops = 7;
	optional int32 yun1 = 8; //精运
	optional int32 yun2 = 9; //神运
	optional int32 yun3 = 10; //气运
	optional int32 luck = 11; //运势
	optional float  bindyuanbaoMulti =12;		//翻倍倍率 客户端显示
	optional float  goldMulti =13;				//翻倍倍率
	optional float  staminaMulti =14;				//翻倍倍率
	optional float  expMulti =15;					//翻倍倍率
	repeated _DROP_ADDITION bindyuanbaoAddition = 16; // 绑定元宝加成
	repeated _DROP_ADDITION goldAddition = 17; // 金币加成
	repeated _DROP_ADDITION expAddition = 18; //  经验加成
	repeated _DROP_ADDITION cardexpAddition = 19; // 卡牌经验加成
	repeated _DROP_ADDITION staminaAddition = 20; // 体力加成
	optional int32 awardExtraRuleId = 21; // 集字活动规则id
}

//Server Send Common DropList
//@GC
message GC_DROP_LIST
{
	optional _DROP_LIST drop			= 1;			//掉落列表
	required int32 dropchannel 		= 2;			//掉落途径，服务器根据功能填充
	required int32 dropsubchannel = 3;			//掉落途径子ID，主要用来区分某类掉落的具体标识
}


//涉及存储  枚举不能修改
enum CHANNELTYPE
{
	CHANNEL_NONE = -1;
	CHANNEL_PERSONAL = 0;//个人聊天
	CHANNEL_GUILD = 1;//帮会聊天
	CHANNEL_GROUP = 2;	//群组聊天
	CHANNEL_WORLD = 3;//世界聊天
	CHANNEL_SYSTEM = 4;//系统
	CHANNEL_BATTLE = 5;//战斗聊天
	CHANNEL_CARD = 6 ;//抽卡聊天
	CHANNEL_BATTLE_BUBBLE = 7; //战斗喊话符灵
}

//根据该类型决定_LinkObj 里面的内容
enum LINKTYPE
{
	LINK_NONE = 0;
	LINK_ITEM = 1;
	LINK_TEAM = 2;
	LINK_AUGUR_YUNPRESENT = 3;
	LINK_AUGUR_LUCKBAG = 4;
	LINK_DRAWCARD = 5;
	LINK_PLAYER = 6;
	LINK_CARD = 7;
	LINK_GUILD = 8;
	LINK_TALISMAN = 9;
	LINK_REQ_ADD_FRIEND = 10;
	LINK_ADVENTURE=11;
	LINK_ONCE_MORE=12;
	LINK_TREASUREHUNT=13;
	LINK_SOLO = 14;
	LINK_WILDTREASURE = 15;
	LINK_CARD_DETAIL = 16;
	LINK_GUILD_INVITE = 17;
	
}

message _LinkObj
{
	optional LINKTYPE linkType = 1[default = LINK_NONE];//链接类型
	optional int32 downloadIndex = 2[default = -1];//下载index
	repeated uint64 paramsUint64 = 3;//通用参数int32
	repeated int32  paramsInt32 = 4;//通用参数int32
	repeated string paramsStr = 5;
	repeated _CARD paramsCard = 6;
}

message _LinkObjs
{
	repeated _LinkObj objs					= 2;
}


//系统消息类型，需要跟策划定义一下所发系统消息属于哪种类型
enum SYSTEM_MSG_TYPE
{
	SYSTEM_TYPE_NONE = 0;//其他
	SYSTEM_TYPE_GUIL = 1;//帮会
	SYSTEM_TYPE_GAIN = 2; //收获
	SYSTEM_TYPE_DRAWCARD = 3; //祭祀
}


message _Chat
{
	optional string Content					= 1;
	optional uint64 Channel					= 2[default = 0];
	optional uint64 SenderGuid				= 3;
	optional string SenderName				= 4;
	optional uint64  SenderIcon				= 5;
	optional int32  SenderLevel				= 6;
	optional int64  SendTime 				= 7;
	optional SYSTEM_MSG_TYPE  systemType	= 8[default = SYSTEM_TYPE_NONE ];
	optional _LinkObjs linkObjs				= 9;
	optional bytes   Voice                  =10;
	optional string  GVoiceId               =11;
	optional int32 HeadFrame				=12;
	optional uint64 CustomPic				=13;
}

//Client Send Chat
message CG_CHAT
{
	optional _Chat  chat = 1;
}

//Server Send Chat
message GC_CHAT
{
	optional _Chat  chat = 1;	
	optional bool   fromServer = 2[default = false];
}


//请求切线
message CG_REQ_CHANGEINST
{
	required int32 channelID = 1;
}

//获取分线信息
message CG_GETINST
{	
}


message GC_GETINST
{	
	required int32 containerinstcount = 1;	
}


//#Enter Scene
//@GC
message GC_ENTER_CONTAINER
{	
	required int32 containerinstcount = 1;	
	required int32 curcontainerinst = 2;	
	required int32 containerplayercount = 3;	
	optional bool isInBattle = 4;
	optional int32 containerType = 5;
	optional int32 sceneid = 6[default = -1];
	optional bool isInYard = 7[default = false];
}

//=================数据库存储 修改需要考虑兼容=================
enum MailConditionType   
{
	Invalid = 0;
	ContainGuid = 1; //指定guid玩家可以领取
	Level = 2; //达到指定等级后的玩家可以领取
}

//邮件可领取条件 
//=================数据库存储 修改需要考虑兼容=================
message _MailConditions
{
	optional MailConditionType condType = 1; //条件类型
	repeated uint64 guids = 2 ; //可接收玩家guid
	optional int32 level = 3; //需求等级
}

//=================数据库存储 修改需要考虑兼容=================
message _DynamicAttribute
{

}

//=================数据库存储 修改需要考虑兼容=================
message _MailAttachment  
{
	optional int32  tableId = 1;
	optional int32  num = 2;
	optional _DynamicAttribute  attr = 3;
	optional int32 itemType = 4;
}

//=================数据库存储 修改需要考虑兼容=================
enum MailImportance
{
	MAIL_MAIN = 0;
	MAIL_SECONDARY = 1;
}
	

//邮件标志类型，目前转使用字典方式  数据库使用 
// =================数据库存储 修改需要考虑兼容=================
enum MailFlagType
{
	MAIL_FLAGT_NONE = 0;
	MAIL_FLAGT_PARAMETER = 1;//客户需要填充一个参数，参数在content 中
}

// =================数据库存储 修改需要考虑兼容=================
message _MailPublicData
{
	optional uint64 guid = 1;
	optional MailImportance importance = 2; 
	optional string title = 3;
	optional string content = 4;
	optional int32  tableId = 5 [default = -1];
	optional int64  createTime = 6;
	optional int32  overdueTime = 7[default = 0];
	optional _MailConditions  conditions = 9;
	optional MailFlagType   flagType = 10[default=MAIL_FLAGT_NONE];
	optional int32  autoMailId = 11 [default = -1];
	optional int32  recvCount = 12 [default = 0];
	optional int32 opType = 13 [default = 0];
	repeated _MailAttachment  attachment = 14;
}


// =================数据库存储 修改需要考虑兼容=================
message _MailPrivateData
{
	optional uint64 guid = 1;
	optional int64  createTime = 2[default = 0];//读取时间
	optional int64  readTime = 3[default = 0];//读取时间
	optional int64  receivedTime = 4[default = 0];//收取附件时间
	//optional MailImportance importance = 5; 
	
}



message _Mail
{
	optional _MailPublicData publicData = 1;
	optional _MailPrivateData privateData = 2; 
}


message GC_HAVE_MAIL
{
	
}

message GC_MAIL
{
	optional bool isNew = 1[default = false];
	repeated _Mail  mails = 2;
}


message CG_MAIL_OPERATION
{
	enum OPTYPE
	{
		OP_GETITEM    = 1;				//提取
		OP_SETREAD    = 2;				//标记已读
		OP_GETALLITEM = 3;				//提取全部附件	
		OP_DELALL = 4;				   //一键删除
	}
	optional OPTYPE OperationType	 = 1[default = OP_SETREAD];		//操作类型
	optional uint64 MailGuid 	 = 2;		//邮件GUID
}


message GC_MAIL_OPERATION
{
	enum OPTYPE
	{
		OP_GETITEM = 1;				//提取
		OP_SETREAD = 2;				//标记已读
		OP_DEL = 3;				//删除
	}
	optional OPTYPE OperationType	 = 1[default = OP_SETREAD];		//操作类型
	repeated uint64 MailGuids 	 = 3;		//邮件GUIDS
}


message CG_CARD_EVALUATE
{
	optional int32  cardId = 1;
	optional uint64 playerGuid = 2; 
}

message GC_CARD_EVALUATE
{
optional uint64 guid = 1;
optional int32   cardId = 2; 
repeated uint64  evaluatesTop = 3;
repeated uint64  evaluates = 4;
repeated _DBEvaluate allEvaluates = 5;
optional uint32   total = 6; 
}


message CG_CARD_EVALUATE_ZAN
{
	optional int32  cardId = 1;
	optional uint64 evaluateGuid = 2;
	optional uint64 playerGuid = 3; 
}

message GC_CARD_EVALUATE_ZAN
{
	repeated uint64 evaluateZanGuids = 2;
	optional bool   isSyn = 4 [default = false];
}

message CG_CARD_EVALUATE_ADD
{
	optional int32  cardId = 1;
	optional _DBEvaluate  evaluate = 2;
}



message CG_GET_RELATIONS
{
	repeated uint64  guids = 1;
}

message GC_GET_RELATIONS
{	
	repeated bool  State			= 5;			//状态
	repeated uint64 offlineGuids	= 7;			//离线玩家GUID
	repeated _DBRelation infos		= 9;			
}

//Client Req Collection Data
message CG_REQ_COLLECTION
{
	optional bool reqCard = 1;										//是否申请卡牌收集数据
	optional bool reqTalisman = 2;								//是否申请法宝收集数据
	optional bool reqQuartz = 3;									//是否申请星魂收集数据
	optional bool reqIntimacy = 4;                               //亲密度满级大礼包   
}

//Server Return Collection Data
message GC_RET_COLLECTION
{
	optional _DBPlayerCollection card = 1;				//收藏的符灵数据
	optional _DBPlayerCollection talisman = 2;		//收藏的法宝数据
	optional _DBPlayerCollection quartz = 3;			//收藏的星魂数据
	optional _DBPlayerCollection intimacy = 4;    //亲密度满级大礼包
}

message GC_SYN_COMMONSHOP_INOF
{
	optional  _DBCommonShop  shop = 1;
	optional  bool  isCommonShop = 2[default =true];
}

message GC_SYN_SECRETSHOP_INOF
{
	optional  _DBSecretShop  shop = 1;
	optional bool  isRefresh = 2 [default = false];
}

message CG_REFRESH_SHOP
{

}


enum SHOP_TYPE
{
	SHOP_TYPE_COMMON = 0;
	SHOP_TYPE_SECRET = 1;
	SHOP_TYPE_RECHARGE = 2;
	SHOP_TYPE_TREASURES = 3;
}

enum PRICE_TYPE
{
	PRICE_TYPE_GOLDCOIN = 28;//金币itemId
	PRICE_TYPE_YUANBAO = 29;//元宝itemId
	PRICE_TYPE_STAMINA = 30;//体力itemId
	PRICE_TYPE_LUCK = 144;//运势值itemId
	PRICE_TYPE_ARENABADGE = 610;//斗妖场代币itemId
	PRICE_TYPE_ASYNC_PVP = 609;//八卦幻身代币itemId
	PRICE_TYPE_BIND_YUANBAO = 644;//绑定元宝itemId
}

enum SHOP_REFRESH_TYPE
{
	SHOP_REFRESH_TYPE_NONE = 0;
	SHOP_REFRESH_TYPE_DAY = 1;
	SHOP_REFRESH_TYPE_WEEK = 2;
}

enum SECRET_SHOP_REFRESH_TYPE
{
	SHOP_REFRESH_TYPE_FREE = 0;
	SHOP_REFRESH_TYPE_YUANBAO = 1;
}

message CG_SHOP_BUY
{
	optional SHOP_TYPE  shopType = 1;
	optional int32 		commodityId	= 2;		//商品Id
	optional int32 		buyCount	= 3;		//购买数量
	optional int32		CostType	= 4;		//开元通宝（金币）购买时，若不足，选择代替货币
}

// =================数据库存储 修改需要考虑兼容=================
message _CopySceneProgress
{
	optional int32 Id = 1;
	optional int32 maxLevel = 2 [default=0];
}

message GC_UPDATE_SOULSTAR_COPY_SCENE
{
	repeated _CopySceneProgress progress = 1;
	optional int64    forceExitBattleTimeCd = 2;//星魂副本惩罚戒指时间戳
}

//请求开始星魂材料副本
message CG_REQ_SOULSTAR_COPY_SCENE_FIGHT
{
	required int32 copySceneBaseId = 1;
	required int32 level = 2;	//第几层
}

// =================数据库存储 修改需要考虑兼容=================
message _DBSoulStarOfflineteam
{
	repeated uint64  guid = 1;
}

message GC_SOULSTAR_COPY_OFFLLINE_TEAM_SAVE
{
	repeated _DBSoulStarOfflineteam   team = 1;
}

message CG_SOULSTAR_COPY_OFFLLINE_TEAM_SAVE
{
	repeated int32  DelIndex = 1;//删除用
	optional _DBSoulStarOfflineteam   team = 2;//添加用
}


// =================数据库存储 修改需要考虑兼容=================
message _DBSoulstarSceneCopyOfflineDefenceData
{
	optional int32   level = 1;	
	optional int64   time = 2;	
	optional _DBSoulStarOfflineteam  guids = 4;
	repeated  bool results = 5;
}

message CG_SOULSTAR_COPY_OFFLLINE_BEGIN
{
	optional _DBSoulstarSceneCopyOfflineDefenceData   data = 1;
}

message GC_SOULSTAR_COPY_OFFLLINE_BEGIN
{
	optional RESULT  ret = 1 [default=SUCCESS] ;
	repeated _DBSoulstarSceneCopyOfflineDefenceData   data = 2;
}


message CG_SOULSTAR_COPY_OFFLLINE_AWARD
{
	optional int32 level = 1;
}
// =================数据库存储 修改需要考虑兼容=================
message _DBSoulstarSceneCopyOfflineDefenceResult
{
	optional int64  time = 1;
	optional int32  level  = 2;
	optional bool   isWin = 3;
	optional int32 dropItem  =4;
}

// =================数据库存储 修改需要考虑兼容=================
message _DBSoulstarSceneCopyOfflineDefenceResults
{
	repeated _DBSoulstarSceneCopyOfflineDefenceResult  results = 1;
}

message GC_SOULSTAR_COPY_OFFLLINE_AWARD
{
	optional _DBSoulstarSceneCopyOfflineDefenceResults history = 1;
}

//团队开始进入PVE战斗
message CG_ENTER_PVE_WITH_TEAM
{
	optional int32 copySceneId = 1;
	repeated int32 paramsInt32 = 3;	//参数，星魂副本：层数
}

///////////////////////////////////////////////////
//GD、DG packet  define
///////////////////////////////////////////////////


//GameServer Send Validate Request To DBAgent
message GD_VALIDATE
{
	required int32 WorldId = 1;						//世界号
	required int32 GameVersion = 2;				//主版本号
	required int32 ProgramVersion = 3;		//程序版本号
	required int32 InternalVersion = 4;		//内部版本号
	required int32 DBVersion = 5;					//DB版本号
}

//DBAgent Send Validate Result To GameServer
message DG_VALIDATE_RET
{
	required bool ValidateRet = 1;				//验证结果
}



//GameServer Load StartUp Data
message GD_LOAD_STARTUPDATA
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
}

//GameServer Load StartUp Data Result
message DG_LOAD_STARTUPDATA_RESULT
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32  loadresult = 2;             //加载结果
	repeated uint32 guidtype = 3;							 //guid类型
	repeated uint32 guidcarry = 4;						 //guid进位
	repeated uint32 guidserial = 5;			       //guid序列
	repeated string worlddatakey = 6;
	repeated int64  worlddataval = 7;
	required int32  pagesize = 8;		//分页数量
	repeated string accounts = 10;	//account
	required int32  pageindex = 9;	    //当前页
	repeated int64  guids =11;	//guid
    
}


message _LoadUserBaseInfos
{
	optional bool  isFinish = 1[default = false];	    //是否结束
	repeated _LoadUserBaseInfo  infos = 2;
}

message _LoadUserBaseInfo
{
	optional uint64 guid = 1;	//guid
	optional string name = 2; 
	optional int32 level = 3;	 
	optional uint64 icon = 4;	
	optional string account = 5;	
	optional int32 QQSVipEndTime = 6;
	optional int32 headframe = 7;
}

// =================数据库存储 修改需要考虑兼容=================
message _DBNewRoleLimit
{
repeated int32 id = 1;	 
repeated int32 count = 2;	 
}


message DG_RET_RANDOMNAMES
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	repeated string names = 2;	//随机名字
	repeated int32 sexs =3;	//随机名字对应的性别
}




//Check Data of Packet Between GameServer and DBAgent
message _GDGPacketCheckData
{
	required int32 WorldId = 1;			//世界号
	required int32 GameVersion = 2;			//主版本号
	required int32 ProgramVersion = 3;		//程序版本号
	required int32 InternalVersion = 4;		//内部版本号
	required int32 DBVersion = 5;			//DB版本号
}

//Create Player
message GD_CREATE_PLAYER
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 playerid = 2;			//net player id
	required bytes playerbasedata = 3;		//玩家基础数据
	required int32 playerbasedatasize = 4;          //玩家基础数据大小
	required bool  shouldcheckactivationcode = 5;
	required string activationcode = 6;
	required int32  gameserverroutineid = 7;
	required uint64 u64param1 = 8;
}

//Create Player Reslt
message DG_CREATE_PLAYER_RESULT
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据	
	required int32 playerid = 2;			//net player id	
	required int32 createresult = 3;		//创建结果
	optional bytes playerbasedata = 4;		//玩家基础数据
	optional int32 playerbasedatasize = 5;		//玩家基础数据大小
	required string playername = 6;
	required int32  gameserverroutineid = 7;
	required uint64 u64param1 = 8;
	required uint64 existplayerguid = 9;
}

//Save Player
message GD_SAVE_PLAYER
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required bytes playerfulldata = 2;		//全部玩家数据
	required int32 playerfulldatasize = 3;          //全部玩家数据大小
	required int32 serialnumber = 4; //序列号
	required int32  gameserverroutineid = 5;
	required uint64 u64param1 = 6;
}



//Load Player
message GD_LOAD_PLAYER
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
    required int32 serialnumber = 2; //序列号
	required uint64 playerguid = 3;			//玩家GUID
	
}

//Load Player Result
message DG_LOAD_PLAYER_RESULT
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 loadresult = 2;			//加载结果
	optional bytes playerfulldata = 3;		//全部玩家数据
	optional int32 playerfulldatasize = 4;          //全部玩家数据长度
	required int32 serialnumber = 5; //序列号
	required uint64 playerguid = 6; //玩家Guid
}



//Load Routine CommonData
message GD_LOAD_ROUTINECOMMONDATA
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 routineid = 2;	 //routine 的ID
}

//Load Routine CommonData Result
message DG_LOAD_ROUTINECOMMONDATA_RESULT
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 loadresult = 2;              //是否加载成功
	required int32 routineid  = 3;	              //routine 的ID
	repeated int32 int32data  = 4;              //int32数据
	repeated int64 int64data  = 5;             //int64数据
	repeated uint64 uint64data = 6;	           //uint64数据
	optional string chardata1 = 7;             //字符串1
	optional string chardata2 = 8;             //字符串2
	optional string chardata3 = 9;             //字符串3
	optional string chardata4 = 10;	           //字符串4
	optional bytes buycountdata = 11;
	required int32 buycountdatasize = 12;
	optional bytes rsbuycountdata = 13;
	required int32 rsbuycountdatasize = 14;
}

//Save Routine CommonData Record
message GD_SAVE_ROUTINECOMMONDATA
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 routineid  = 2;	 //routine 的ID
	repeated int32 int32data  = 3;              //int32数据
	repeated int64 int64data  = 4;             //int64数据
	repeated uint64 uint64data = 5;	           //uint64数据
	optional string chardata1 = 6;             //字符串1
	optional string chardata2 = 7;             //字符串2
	optional string chardata3 = 8;             //字符串3
	optional string chardata4 = 9;	           //字符串4
	optional bytes buycountdata = 11;
	required int32 buycountdatasize = 12;
	optional bytes rsbuycountdata = 13;
	required int32 rsbuycountdatasize = 14;
}

//Save Guid
message GD_SAVE_GUID
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required uint32 type = 2;			//guid 类型
	required uint32 carry = 3;			//guid 进位
	required uint32 serial = 4;    //guid 序列
}



message GD_RELOAD
{
	enum TYPE
	{
		CONFIG = 0;
		TABLE = 1;
		LUA = 2;
	}
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 type = 2;		//重载类型
	optional string param1 = 3;	//参数1
	optional int32 param2 = 4;	//参数2
}


message GD_LOAD_PLAYERGUID
{
		required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
		required string playername             = 2;
		required uint64 param1                 = 3;
}

message DG_LOAD_PLAYERGUID_RETSULT
{
		required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
		required int32 loadresult              = 2;
		required string playername             = 3;
		required uint64 param1                 = 4;
		required uint64 playerguid             = 5;
}



enum _DBResult
{
	DB_FAIL                 		= 0;
	DB_SUCCESS                 		= 1;
	DB_SAME_NAME                 	= 2;
	DB_SAME_GUID                 	= 3;
	DB_SAME_ACCOUNT                	= 4;
	DB_NO_DATA                 		= 5;
	DB_ACTIVATION_CODE_ERROR       = 6;
	DB_WRONG_GAME_SERVER           = 7;
}




//////////数据库存储定义////////////////////////////////////////////
//optional，或repeat

//玩家服务器基础数据  
//=================数据库存储 修改需要考虑兼容=================
message _DBBasePlayer
{
	optional  uint64 guid = 1; 
	optional  string name = 2;
	optional  string account = 3;
	optional  int32  sceneId = 4;
	optional  float  posX = 5;
	optional  float  posZ = 6;
	optional  int32  lv = 7[default = 1]; 
	optional  int64  createTime = 8[default = 0]; 
	optional  int64  lastLogoutTime = 9 [default = 0]; 
	optional  uint64 icon = 10 [default = 1]; 
	optional  bool	 FirstLogin = 11 [default = true];
	optional  int32  stamina = 12 ;
	optional  int64  nextRecoverTime = 13;
	optional  uint64 guild = 14;
	optional  int32  staminaBuyTimes = 15 ;
	optional  int32  todayConstStamina = 16 ;
	optional  int64  guildLeaveTime = 17 [default = 0];
	repeated  int32  dailyStaminaGetFlags = 18;
	optional  uint64 adventureStartTime=19 [default=0];
	optional  int32  adventureID=20 [default=0];
	optional  int32  adventureBattleType=21 [default=0];
	optional  uint64 TreasureHuntStartTime=22 [default=0];
	optional  bool   TreasureHuntOpen = 23 [default = false];
	optional  int32  TreasureHuntStoryId=24 [default=0];
	optional  int64  joinGuildTime = 25 [default = 0];
	optional  uint64 OnlineTime = 26 [default = 0];
	optional  int64  BanTime = 27 [default = 0];
	optional  string BanReason = 28;
	optional  int64  lastLvUpTime = 29 [default = 0];
	optional _MSDK   msdkInfo = 30;
	optional  int32  rtSceneId = 31;
	optional  float  rtPosX = 32;
	optional  float  rtPosZ = 33;
	optional  float  rtFaceDir = 34;
	optional  float  rtCallCardPosX = 35;
	optional  float  rtCallCardPosZ = 36;
	optional  float  rtCallCardFaceDir = 37;
	optional  int32  vigour = 38 [default = 0]; 
	optional  int32  nextRecoverTimeVigour = 39 [default = 0];
	optional  int32  lastRecoverDayVigour = 40 [default = 0];
	optional  int32  recoverTotalTodayVigour = 41 [default = 0];
	optional  int64  lastSnapLogTime = 42[default = 0];
	optional  int64  save_amt = 43[default = 0]; //历史充值游戏币
	optional  int64  forceExitBattleTime = 44[default = 0]; //强制离开（星魂）战斗记录惩罚，截至
	optional  int32  asyncPVPRefreshRobotDataTimes=45[default = 0];//异步PVP刷新次数
	optional  int64  recharge_amt = 46[default = 0];//累计直购
	optional  int32  headframe = 47 [default = 0];//当前使用头像框ID
	optional  int64  lastRechargeTime = 48[default = 0];//最后一次充值时间
	optional  int32  lastLoginManager = 49[default = 0];
	optional  uint64 lastYardOwner = 50[default = 0];
	optional  int32  sex = 51;//个人空间性别
	optional  float  lastRTPosX = 52;
	optional  float  lastRTPosZ = 53;
	optional  float  lastRTFaceDir = 54;
	optional  int64  lastYardOpTime = 55; // 上一次偷取,帮助私宅生产时间
	optional  int32  yardHelpCnt = 56;
	optional  int32  yardStealCnt = 57;
}

//玩家剧情数据  
//=================数据库存储 修改需要考虑兼容=================
message _DBStoryInfo
{
	message StoryStatus
	{
		optional  int32 storyId = 1;
		optional  int32 fin = 2;
		optional  bool awardAccepted = 3 [default = false];
		optional  int32 lineflag = 4;				//单条剧情线状态
	}
	repeated StoryStatus statuses = 1;
	repeated bool flags = 2;
}



//玩家群组数据  
//=================数据库存储 修改需要考虑兼容=================
message _DBGuids
{
	repeated uint64 guids = 1;
}

// =================数据库存储 修改需要考虑兼容=================
message _DBPlayerGroupChats
{
	repeated uint64 guids = 1;			 //群组guids
	repeated int64  chatTime		= 2; //接收群聊消息时间
}

//玩家收集数据项  
//=================数据库存储 修改需要考虑兼容=================
message _DBCollectionItem
{
	optional int32 id = 1;
	optional uint32 flag = 2;
}

//玩家收集数据-通用数据结构  
//=================数据库存储 修改需要考虑兼容=================
message _DBPlayerCollection
{
	repeated _DBCollectionItem items = 1;
}

//传输
message _GroupChats_tf
{
	repeated _GROUP_CHAT groups = 1;
	repeated uint64 modify = 2;
	repeated uint64 del = 3;
}


//传输
message _SystemMails_tf
{
	repeated _MailPublicData mails = 1;
	repeated uint64 modify = 2;
	repeated uint64 del = 3;	
}


//关系
//=================数据库存储 修改需要考虑兼容=================
message _DBRelation
{
	optional  uint64 guid = 1; 
	optional  int64  time = 2;
	optional  uint64 icon = 3; 
	optional  int32 level = 4; 
	optional  string name = 5;
	optional  int32 QQSVipEndTime = 6;
	optional  int32 headframe = 7;
	optional  uint64 guild = 8[default = 0xffffffffffffffff]; //帮会guid
}


//加好友信息
//=================数据库存储 修改需要考虑兼容=================
message _DBAddFriendInfo
{
	optional  uint64 guid = 1; 
	optional  int64  time = 2;
	optional  uint64 icon = 3; 
	optional  int32 level = 4; 
	optional  string name = 5;
	optional  string msg = 6;
	optional  int32 QQSVipEndTime = 7;
	optional  int32 headframe = 8;
	optional  uint64 guild = 9[default = 0xffffffffffffffff]; //帮会guid
}


//单个战斗阵型
//=================数据库存储 修改需要考虑兼容=================
message _DBCardBattleGroup
{
	optional  bool islock 	= 1; 
	optional  int32 tag 	= 2; 
	optional  int32 heropos= 3;
	optional  int32 heroid = 4;
	repeated  uint64  datas= 5;
}

//所有战斗信息：  阵型，首次奖励信息 ,boss首次显示信息
//=================数据库存储 修改需要考虑兼容=================
message _DBBattleInfo
{
	repeated _DBCardBattleGroup  battleGroups = 1;
	repeated bool battleFirstPrizeFlags = 2;
	repeated bool bossFirstShowFlags = 3;
	optional  int32 battleCount = 4;
	optional  int32 historyVerifyFailedCount = 5;
	optional  int32 verifyFailedCount1 = 6;
	optional  int32 verifyFailedCount2 = 7;
}


//card bag 符灵
//=================数据库存储 修改需要考虑兼容=================
message _DBCard
{
	repeated _CARD CardList = 1;
	repeated _CARDPIECE CardPieceList = 2;
	repeated int32 CardSkinList = 3;
	//optional bool OpenSwitchBag = 4;		废弃！！！
	optional uint64 CallCardGuid = 5;
	optional uint64 TutorialCardGuid = 6;
}


//主角
//=================数据库存储 修改需要考虑兼容=================
message _DBHeroData
{
	repeated _HERO HeroList 		= 1;
	optional int32 Level 				= 2;
	optional int32 Exp 					= 3;
	repeated int32 GemId 				= 4;
	optional int32 GemOpenCount = 5;
	optional int32 CurHeroId 		= 6;
}


//星宿命理
//=================数据库存储 修改需要考虑兼容=================
message _DBQuartzBag
{
	repeated _QUARTZ QuartzList = 1;
	optional int32 StrengthenStone = 2;		//强化石数量
	optional int32 ResetStone = 3;				//重置石数量
}


//背包
//=================数据库存储 修改需要考虑兼容=================
message _DBItems
{
	repeated int32  indexs = 1;
	repeated _ITEM  items = 2;
}



//单条评论
//=================数据库存储 修改需要考虑兼容=================
message _DBEvaluate
{
	optional  uint64 guid = 1; 
	optional  uint64 playerGuid = 2; 
	optional  uint64  playerIcon = 3; 
	optional  int32   likeNum = 4;
	optional  string playerName = 5; 
	optional  int64  time = 6;
	optional  string   content = 7;
	optional  string  beAnsweredName = 8;
	optional  string  beAnsweredContent = 9; 
	optional  int32  playerLv = 10 [default = 1]; 
	optional  int32 headframe = 11 [default = 0]; 
}


//单个卡牌评论
//=================数据库存储 修改需要考虑兼容=================
message _DBCardEvaluates
{
	optional uint64 guid = 1;
	optional int32   cardId = 2; 
	repeated uint64  evaluatesTop = 3;
	repeated uint64  evaluates = 4;
	repeated _DBEvaluate allEvaluates = 5;
	optional uint32  total = 6;
}


//传输评论
message _CardEvaluates_tf
{
	repeated _DBCardEvaluates evs = 1;
	repeated uint64 modify = 2;
	repeated uint64 del = 3;
}


//货币
//=================数据库存储 修改需要考虑兼容=================
message _DBCurrency
{
	repeated int64 currency = 1;
	optional _DrawCard  drawCard = 2;
}


//法宝存储
//=================数据库存储 修改需要考虑兼容=================
message _DBTalisman
{
	repeated _TALISMAN TalismanList = 1;
	repeated int32 VisualCollect 		= 2;
	//repeated uint64  MakeCollectGuids = 3;	已废弃
	repeated _TALISMANMAKERECORD MakeCollect = 4;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBCommonShop
{
	optional int64 weekRefreshTime	= 1;
	optional int64 dayRefreshTime	= 2;
	repeated int32 commodityId 		= 3;
	repeated int32 times 			= 4;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBSecretShop
{
	optional int64 refreshTime	= 1;
	repeated int32 commodityId 		= 2;
	repeated int32 times 			= 3;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBEmojShop
{
	optional uint32 OwnEmoj  = 1;//表情包拥有状态
	repeated int32 EmojEquipList = 2;//已经装备的表情包使用排序
}

//=================数据库存储 修改需要考虑兼容=================
message _DBExchangeShop
{
	optional int32 shopId 			= 1;
	repeated int32 commodityId 		= 2;
	repeated int32 boughtNum 		= 3;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBSoulStarCopySceneInfo
{
	repeated  _CopySceneProgress  Progress = 1;//副本进度
	repeated _DBSoulstarSceneCopyOfflineDefenceData   Data = 2;  //防守数据 
	repeated _DBSoulStarOfflineteam  team = 3;//离线队伍
	optional  _DBSoulstarSceneCopyOfflineDefenceResults   history = 4;//离线战斗历史
}

//=================数据库存储 修改需要考虑兼容=================
message _DBAwakenCopySceneInfo
{
	repeated _AwakenCopySceneProgress progress = 1;
}


//卡牌觉醒任务
//=================数据库存储 修改需要考虑兼容=================
message _DBAwakenMis
{
	repeated _MisItem Items = 1;
	optional uint64   activeAwakenExCard = 2;
}

//河洛秘境
//=================数据库存储 修改需要考虑兼容=================
message _DBHeLuoRiftInfo
{
	optional _HeLuoRiftData  HeLuoRiftData = 1;
	optional _HeLuoRiftLevelHistory  history =  2;
}


//玩家零碎信息
//=================数据库存储 修改需要考虑兼容=================
message _DBPlayerPiece
{
	repeated _MiscData miscList = 1;//玩家触发的所有奇遇
	optional _AugurPresentHistory AugurPresentHistory = 2; //玄学运势赠送记录
	optional _TutorialQuest TutorialQuest = 3; //新手任务
	optional _CircleQuest CircleQuest = 4; //环任务
	optional _DAILY_SIGN_INFO   DailySignInfo = 5;//日常签到
	optional _DBMeleeUserRecord MeleeRecord = 6; //乱斗个人数据
	optional _AugurLuckBagList SendLuckBag = 7; //可发红包列表
	optional _AugurLuckBagList RecvLuckBag = 8; //可收红包列表
	repeated _DBLuckBagRecord SendLuckBagRecord = 9; //发送红包记录
	repeated _DBLuckBagRecord RecvLuckBagRecord = 10; //领取红包记录
	optional _WildTreasure WildTreasureRecord = 11; //大荒寻宝信息
	optional _TEAMHELP TeamHelp = 12; //老带新数据
	optional _AugurData AugurData = 13; //玄学运势
	optional _DBTutorial Tutorial = 14;//新手引导数据
	repeated _DBCardLove  CardLoves = 15;//卡牌情缘
	repeated _DyeColorItem  dyeColorItem = 16;//限时染色数据
	repeated int32			 unlockColorItems = 17;//已经解锁染色卡
	optional _DBINTIMACY_LIMIT_BUY_LIST intimacyLimitBuy=18;//每日限购亲密度礼物
	repeated string buyGoodsBillno = 19; //已经处理过的购买道具订单号
	optional _DBYuanbaoreqQueue yuanbaoReq = 20; // 异步扣除元宝队列
	optional _DBChargeData ChargeData = 21;//充值相关
	repeated bool LevelAwardFlag = 22;     //等级礼包领奖标记
	repeated _DBRechargeCard RechargeCards =23; //月卡、周卡
	optional _GuildContribute GuildContribute = 24; //帮会捐赠数据
	optional _DBActivityDailySign ActivityDailySign = 25; //运营活动每日签到
	optional _DBGuildBossUserInfo m_GuildBossInfo = 26;//工会boSS记录
	//新添加开始使用_DBPlayerPiece2
}

//玩家零碎信息2
//=================数据库存储 修改需要考虑兼容=================
message _DBPlayerPiece2
{
	optional bool sendDailyMSDKMail = 1;
	optional _Yard yardInfo = 2;
	optional bool PieceBegToday = 3;//碎片赠送当日是否请求过
	optional int32 PieceDonateToday = 4;//当日赠送的碎片数量
	repeated uint64 PieceDonateTargetToday = 5;//当日赠送目标列表
	optional bool TodayMSDKLoginPlat = 6;	// 当日是否从中心启动
	optional _ReputationData  reputationData  = 7; //七尾修炼
	repeated int32  grayUpdate = 8;//灰度更新奖励ids
	optional int32 DrawCardBonusCount = 9;	// 抽卡保底计数
	repeated bool HeadFrameFlag = 10; 		// 是否获得头像框标记
	repeated bool HeadFrameNewFlag = 11;	// 是否为新头像框标记
	optional _DBOrnamentEffect Ornamenteffect = 12;//特效装饰
	optional _DBActivityRecharge ActivityRecharge =13; //运营活动-每日充值
	optional int32 DrawCardOP1Prob = 14;	// 前期抽卡伪随机概率累计
	optional bool DrawCardOP1Over = 15;		// 前期抽卡伪随机消亡
	optional int32  DefaultSkin	= 17;		//创建角色选择的初始皮肤
	optional _HANGPIECE_INFO hangpiece=18;//装饰挂件
}



//所有商店信息
//=================数据库存储 修改需要考虑兼容=================
message _DBShops
{
	optional _DBCommonShop  commonShop = 1;
	optional _DBSecretShop  secretShop = 2;
	optional _DBEmojShop 	 emojShop = 3;
	optional _DBCommonShop  rechargeShop = 4;
	optional _DBExchangeShop exchangeShop = 5; //兑换商店
	optional _GuildShopBuyInfo guildShop = 6; //帮会商店购买信息
	optional _DBTreasuresShop treasuresShop = 7;//西域奇珍商店
}

//副本、玩法等信息
//=================数据库存储 修改需要考虑兼容=================
message _DBCopyScenes
{
	optional _DBAwakenCopySceneInfo   awakenCopyScene = 1; //觉醒副本
	optional _DBSoulStarCopySceneInfo soulStarCopyScene = 2;//星魂副本
	optional _DBHeLuoRiftInfo		   heLuoRiftCopyScene = 3;//河洛秘境副本
	//repeated int32      			   storyLevelFinData = 4;//剧情副本 废弃！！！
	repeated bool      			       storyLevelTVFlag = 5;//剧情副本
	optional int32		   			   towerLastPass = 6;//妖气试练-爬塔 通关记录
	optional _ArenaData				   arenaData = 7;//同步pvp
	optional _DBStoryCopySceneInfo     storyLevelData =8; //剧情副本
}

//剧情副本
//=================数据库存储 修改需要考虑兼容=================
message _DBStoryCopySceneInfo
{
	repeated int32 storyLevelFinData = 1;//剧情副本 各个关卡星级信息
	repeated _DBStoryCopySceneAward storyCopySceneAward = 2; //星级奖励领奖标记
}

//剧情副本 星级领奖信息
//=================数据库存储 修改需要考虑兼容=================
message _DBStoryCopySceneAward
{
	optional int32 chapterId = 1; //mode[1-普通，2-困难] *100 + chapterid
	repeated bool awardFlag = 2;  //星级奖励领奖标记
}

//禁言存储
//=================数据库存储 修改需要考虑兼容=================
message _DBBanChat
{
	repeated int32  channel = 1;
	repeated int64  beginTime = 2;
	repeated int64  endTime = 3;
}


//好友社交等信息
//=================数据库存储 修改需要考虑兼容=================
message _DBSocial
{
	repeated _DBRelation   	    		friendList = 1; //好友
	repeated _DBRelation   				blackList = 2; //黑名单
	repeated _DBAddFriendInfo  			addFriendInfolist = 3;//离线加好友信息
	optional GC_CHAT_PERSONAL_HISTORY	chatHistory = 4;//离线聊天历史
	optional _DBPlayerGroupChats		groupChats  = 5;//群组guid
	optional _DBBanChat                 banChat = 6;
	repeated uint64  				recommendGuidHistory = 7; //推荐玩家的历史记录
	optional _DBGuildMessages 		guildMessage = 8; //帮会消息
	repeated uint64 				evaluateLikeGuids = 9;//玩家已点赞评论GUID
	repeated _Mail   	            mails = 10;	//玩家邮件数据
	repeated uint64  				mailRecvGuid = 11; //已经接收过的邮件记录
	optional _DBSocialSpace			socialSpace = 12;//个人空间数据
}


//其他社交信息2 //废弃
message _DBSocial2
{
	repeated uint64  				recommendGuidHistory = 1; //推荐玩家的历史记录
	optional _DBGuildMessages 		guildMessage = 2; //帮会消息
	repeated uint64 				evaluateLikeGuids = 3;//玩家已点赞评论GUID
	repeated _Mail   	            mails = 4;	//玩家邮件数据
	repeated uint64  				mailRecvGuid = 5; //已经接收过的邮件记录
}


//世界法宝配方 数据库
//=================数据库存储 修改需要考虑兼容=================
message _DBTalismanMakeRecore
{
	repeated _TALISMANMAKERECORD infos = 1;
}


//借将奖励 数据库
//=================数据库存储 修改需要考虑兼容=================
message _DBGuildCardLoanRecord
{
	repeated _LoanInfo infos = 1;
}


//同步PVP 数据库
//=================数据库存储 修改需要考虑兼容=================
message _DBArenaRoutineData	
{
	optional int32 season = 1;
	optional  bool isSeasonAward = 2;
	repeated  _ArenaRankItem  rankVec = 3;
}


//传输购买道具订单
message _RechageOrder_tf
{
	repeated bytes orders = 1;//增加的订单
	repeated string modify = 2;
	repeated string del = 3;
}


//Create Player
message GD_CREATE_PLAYER2
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 playerid = 2;			//net player id
	required _DBBasePlayer basePlayer = 3;		//玩家基础数据
	required bool  shouldcheckactivationcode = 5;
	required string activationcode = 6;
	required int32  gameserverroutineid = 7;
	required _DBPlayerPiece playerPiece = 8;
	required _DBPlayerPiece2 playerPiece2 = 9;
}

//Create Player Reslt
message DG_CREATE_PLAYER_RESULT2
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据	
	required int32 playerid = 2;			//net player id	
	required _DBResult result = 3;		//创建结果
	optional _DBBasePlayer basePlayer = 4;		//玩家基础数据
	required string playername = 5;
	required int32  gameserverroutineid = 6;
	required uint64 existplayerguid = 7;
	optional _DBPlayerPiece playerPiece = 8;
	optional _DBPlayerPiece2 playerPiece2 = 9;
}

//Save Player
message GD_SAVE_PLAYER2
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	//optional _DBFullPlayer fullPlayer = 2;		//玩家基础数据
	required int32 serialnumber = 3; //序列号
	required int32  gameserverroutineid = 4;
}



//Load Player
message GD_LOAD_PLAYER2
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
    required int32 serialnumber = 2; //序列号
	required uint64 playerguid = 3;			//玩家GUID
	
}

//Load Player Result
message DG_LOAD_PLAYER_RESULT2
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required _DBResult result = 2;			//加载结果
	//optional _DBFullPlayer fullPlayer = 3;		//玩家数据
	required int32 serialnumber = 4; //序列号
	required uint64 playerguid = 5; //玩家Guid
}









//GameServer Send Validate Request To HttpAgent
message GH_VALIDATE
{
	required int32 WorldId = 1;						//世界号
	required int32 GameVersion = 2;				//主版本号
	required int32 ProgramVersion = 3;		//程序版本号
	required int32 InternalVersion = 4;		//内部版本号
	required int32 DBVersion = 5;					//DB版本号
}

//HttpAgent Send Validate Result To GameServer
message HG_VALIDATE_RET
{
	required bool ValidateRet = 1;				//验证结果
}


message GH_COMMON_HTTP_REQUEST
{
	required int32 RequestType = 1;
	required string RequestUrl = 2;
	required uint64 GuidParam1 = 3;
	required uint64 GuidParam2 = 4;
	required int64 int64Param1 = 5;
	required int64 int64Param2 = 6;
	required int32 int32Param1 = 7;
	required int32 int32Param2 = 8;
}

message HG_COMMON_HTTP_RESPONSE
{
	required int32 RequestType = 1;
	required string ResponseBody = 2;
	required uint64 GuidParam1 = 3;
	required uint64 GuidParam2 = 4;
	required int64 int64Param1 = 5;
	required int64 int64Param2 = 6;
	required int32 int32Param1 = 7;
	required int32 int32Param2 = 8;
	required int32 ResultCode = 9;
}



message _RECHARGEORDER
{
	required string userIdentity				= 1;	//账号ID
	required uint64 playerGuid					= 2;	//角色GUID
	required int32 goodType					    = 3;	//充值商品类型
	required int64 generalOrder					= 4;	//通用平台订单号
	required int64 time							= 5;	//时间
	required string appOrder					= 6;	//游戏自定义订单号
	required int32 amount						= 7;	//实际支付金额
	required int32 bookAmount					= 8;	//下单金额
	required string agent						= 9;	//渠道号缩写
	required string agentId						= 10;	//渠道号
	required string agentOrder					= 11;	//渠道订单号
}



message HG_ONESDK_RECHARGE_ORDER
{
	required int64 connid								= 1;
	required _RECHARGEORDER order				= 2;
}

message GH_ONESDK_RECHARGE_ORDER_RET
{
	required int32 success							= 1;
	required int64 connid								= 2;
	required _RECHARGEORDER order				= 3;
}







message GH_VALIDATE_ACCOUNT
{
	required int32 PlayerId = 1;
	required int32 ValidateType = 2;
	required string UserIdentity = 3;
	required string Token = 4;
	required int32 BIos = 5;
	required int32 BIplatformid = 6;
	required string BIplatform = 7;
	required string BImac = 8;
	required int32 RapidValidateCode = 9;
	required uint64 AutoSelectRoleGuid = 10;
	required string IP = 11;
	required int64 RequestTime = 12;
	required string OnePushId = 13;
	required bool shouldcheckactivation = 14;
	required string accountactivation = 15;
	required int32 mediaid = 16;
	required string phonemodel = 17;
	optional _MSDK   msdk = 18;
}

message HG_VALIDATE_ACCOUNT_RET
{
	required int32 RetCode = 1;
	required int32 SDKCode = 2;
	required string SDKMsg = 3;
	required int32 PlayerId = 4;
	required int32 ValidateType = 5;
	required string UserIdentity = 6;
	required int32 BIos = 7;
	required int32 BIplatformid = 8;
	required string BIplatform = 9;
	required string BImac = 10;
	required string Token = 11;
	required int32 RapidValidateCode = 12;
	required uint64 AutoSelectRoleGuid = 13;
	required string IP = 14;
	required int64 RequestTime = 15;
	required string OnePushId = 16;
	required bool shouldcheckactivation = 17;
	required string accountactivation = 18;
	required int32 mediaid = 19;
	required string phonemodel = 20;
	optional _MSDK   msdk = 21;
}




message GH_RELOAD
{
	enum TYPE
	{
		CONFIG = 0;
		TABLE = 1;
		LUA = 2;
	}
	required int32 type = 1;		//重载类型
	optional string param1 = 2;	//参数1
	optional int32 param2 = 3;	//参数2
}




message _IWPLAYORDER
{
	required int32 orderType				= 1;	//订单类型
	required int64 orderId					= 2;	//订单号
	required string userId					= 3;	//账户ID
	required uint64 playerGuid			= 4;	//角色GUID
	required string appOrder				= 5;	//游戏自定义订单
	required int32 goodId						= 6;	//商品ID
	required int32 goodNum					= 7;	//商品数量
	required int32 goodType					= 8;	//商品类型
	required int64 amount						= 9;	//充值金额
	required int64 time							= 10;	//时间
}

message HG_IWPLAY_ORDER
{
	required int64 connid						= 1;
	required _IWPLAYORDER order			= 2;
}

message GH_IWPLAY_ORDER_RET
{
	required int32 ret							= 1;
	required int64 connid						= 2;
	required _IWPLAYORDER order			= 3;
}




//DBError 监控
message DG_MONITOR_DBERROR
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required uint32 errorcode = 2;
	required string errormsg  = 3;
}



//Check Player NewName
message GD_CHECK_PLAYERNEWNAME
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required uint64 playerguid = 2;			//玩家guid
	required string newname = 3; //玩家新名字
}

//Check Player NewName Result
message DG_CHECK_PLAYERNEWNAME_RESULT
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32  checkresult = 2; //检查结果
	required uint64 playerguid = 3;			//玩家guid
	required string newname = 4; //玩家新名字
	required int32 newnamecount = 5; //已有新名字数量
}







message GD_TRANSPORT_TO_DBAGENT
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 RoutineID = 2;								//需要发送的RoutineID
	required string MessageName = 3;						//消息名
	required bytes MessageBuf = 4;							//消息buf
}

message DG_TRANSPORT_TO_GAMESERVER
{
	required _GDGPacketCheckData checkdata = 1;	//消息包验证数据
	required int32 Send = 2;										//消息发送方式
	required int32 RoutineID = 3;								//需要发送的RoutineID
	required uint64 PlayerGuid = 4;							//需要发送的玩家Guid
	required int32 SceneClassID = 5;						//需要发送的场景类ID
	required int32 SceneID_ClassID = 6;					//需要发送的场景ID ClassID
	required int32 SceneID_InstID = 7;					//需要发送的场景ID InstID
	required string MessageName = 8;						//消息名
	required bytes MessageBuf = 9;							//消息buf
}

message GH_TRANSPORT_TO_HTTPAGENT
{
	required int32 RoutineID = 1;								//需要发送的RoutineID
	required string MessageName = 2;						//消息名
	required bytes MessageBuf = 3;							//消息buf
}

message HG_TRANSPORT_TO_GAMESERVER
{
	required int32 Send = 1;									//消息发送方式
	required int32 RoutineID = 2;							//需要发送的RoutineID
	required uint64 PlayerGuid = 3;						//需要发送的玩家Guid
	required int32 SceneClassID = 4;					//需要发送的场景类ID
	required int32 SceneID_ClassID = 5;				//需要发送的场景ID ClassID
	required int32 SceneID_InstID = 6;				//需要发送的场景ID InstID
	required string MessageName = 7;					//消息名
	required bytes MessageBuf = 8;						//消息buf
}


//=================数据库存储 修改需要考虑兼容=================
message _QUARTZATTR
{
	optional int32 AttrRefixType 	= 1;
	optional int32 AttrValue 			= 2;
	optional int32 Strengthen 		= 3;
}

//=================数据库存储 修改需要考虑兼容=================
message _QUARTZ
{
	optional uint64 Guid 						= 1;
	optional int32 QuartzId					= 2;
	optional int32 Star							= 3;
	optional int32 Strengthen 			= 4;
	optional _QUARTZATTR MainAttr 	= 5;
	optional _QUARTZATTR AssistAttr	= 6;
	repeated _QUARTZATTR AttachAttr = 7;
	optional int32 CreateTime				= 8;
}

//
message _ORBMENT
{
	repeated _QUARTZ QuartzSlot = 1;
}

//
message _CUSTOMTALISMANATTR
{
	optional int32 RefixType 	= 1;
	optional int32 RefixValue = 2;
}


//
message _TALISMAN
{
	optional uint64 Guid 								= 1;
	optional int32 TalismanType 				= 2;
	optional int32 Level 								= 3;
	optional int32 Exp 									= 4;
	optional int32 SystemTalismanId 		= 5;
	optional string CustomName 					= 6;
	optional int32 CustomVisualId 			= 7;
	optional int32 CustomRare 					= 8;
	repeated _CUSTOMTALISMANATTR CustomRefixAttr = 9;
	optional int32 CustomMainSkillId 		= 10;
	optional int32 CustomAssistSkillId 	= 11;
	optional int32 CreateTime						= 12;
	optional int32 LastEquipedTime			= 13;
	optional bool Locked								= 14;
	optional int32 CustomHeroSkillId		= 15;
}

//
message _TALISMANMAKERECORD
{
	optional _TALISMAN TalismanInfo = 1;
	optional int32 EnergyYin 				= 2;
	optional int32 EnergyYang 			= 3;
	optional int32 EnergyBalance 		= 4;
	optional int32 Acarna 					= 5;
	optional string MakerName				= 6;
	optional int32 MakeTime					= 7;
	optional int32 UseCount					= 8;
	optional int32 CollectCount			= 9;
}


//
message _CARD
{
	optional uint64 Guid 			= 1;
	optional int32 CardId 		= 2;
	optional int32 Exp 				= 3;
	optional int32 Level 			= 4;
	optional int32 Star 			= 5;
	optional int32 Awakening 	= 6;
	repeated int32 SkillLevel = 7;
	optional int32 BagIndex		= 8;
	optional int64 CreateTime	= 9;
	optional int64 LastBattleTime = 10;
	optional _ORBMENT Orbment	= 11;
	optional bool Locked			= 12;
	optional _TALISMAN EquipedTalisman = 13;
	optional int32 Intimacy = 14;
	optional int32 CurSkinId 	= 15;
	//optional int32 IntimacyTitleID=16;
	optional int32 DyeColorID = 17[default=-1];
	optional int32 BattleNum = 18[default=0]; // 参与战斗次数
	optional _CARD_INTIMACY_ALREADY_ADD IntimacyAdd=19;//该符灵当天已经增加的亲密度值
	optional int32 AwakeningSkill = 20;	// 觉醒技能
	optional int32 IntimacyLevel=21;   //亲密度等级
	optional int32 OrnamentEffectID = 22; //特效装饰
	//repeated _INTIMACY_TITLE_INFO IntiamcyTitleInfo=23;//亲密度称谓
	optional _INTIMACY_TITLE_INFO IntiamcyTitle=24;
}


//
message _CARDPIECE
{
	optional int32 CardId = 1;
	optional int32 Count = 2;
}

message GC_CARD_SYNC
{
	repeated _CARD CardList = 1;
	repeated _CARDPIECE CardPieceList = 2;
	repeated int32 CardSkinList = 3;
	optional bool OpenSwitchBag = 4;
	optional uint64 CallCardGuid = 5;
	optional uint64 TutorialCardGuid = 6;
}

message GC_CARD_ADD
{
	repeated _CARD CardInfo = 1;
}

message CG_CARD_STAR
{
	required uint64 Guid = 1;
	repeated uint64 MaterialGuid = 2;
	optional int32 CostType =3;
}

message CG_CARD_AWAKENING
{
	required uint64 Guid = 1;
	optional int32 AwakeningSkill = 2;
}

message CG_CARD_SKILL_LEVELUP
{
	required uint64 Guid = 1;
	repeated uint64 MaterialGuid = 2;
}

message GC_CARD_UPDATE
{
	enum UPDATETYPE
	{
		EXP    			= 0;
		STAR   			= 1;
		AWAKENING 	= 2;
		SKILL				= 3;
		BAGINDEX		= 4;
		LASTBATTLETIME 	= 5;
		LOCK				= 6;
		INTIMACY		= 7;
		CURSKIN			= 8;
		DYE				= 9;
		ORNAMENTEFFECT 	= 10;
	}
	
	repeated _CARD CardInfo = 1;
	required int32 UpdateType = 2;
}

message CG_CARD_MAKE
{
	required int32 CardId = 1;
	optional int32 MakeCount = 2;
}

message GC_CARD_MAKE
{
	required _CARDPIECE PieceInfo = 1;
}

message GC_CARD_PIECE
{
	required _CARDPIECE PieceInfo = 1;
}

message CG_CARD_SWITCHBAG
{
	repeated uint64 ToBattleGuid = 1;
	repeated uint64 ToMaterialGuid = 2;
}

message CG_CARD_EXP
{
	required uint64 Guid = 1;
	repeated uint64 MaterialGuid = 2;
	optional int32 CostType =3;
}

message CG_CARD_AWAKENING_FORMULA
{
	required int32 ItemId = 1;
	optional int32 ComposeCount = 2;
}

message GC_CARD_DELETE
{
	repeated uint64 Guid = 1;
	repeated _TALISMAN TalismanList = 2;
	repeated _QUARTZ QuartzList = 3;
}

message CG_CARD_LOCK
{
	required uint64 Guid = 1;
}

message CG_CARD_UNLOCK
{
	required uint64 Guid = 1;
}

message CardBattleGroupInfo
{
	optional int32 tag = 1;
	optional bool isLock = 2;
}

message GC_UPDATE_CARD_BATTLE_GROUP
{
	repeated CardBattleGroupInfo groups = 1;
}

message CG_SET_CARD_BATTLE_GROUP_LOCK
{
	optional int32 tag = 1;
	optional bool isLock = 2;
}

message GC_SYNC_GAMECONFIG
{
	optional float CardAddExpReduceRate = 1;			//符灵吞噬经验占原有的比例
	optional float TalismanAddExpReduceRate = 2;	//法宝吞噬经验占原有的比例
	optional int32 StaminaMaxParam = 3;						//体力上限确定参数
	optional int32 StaminaRecoverInterval = 4;		//体力恢复时间间隔
	optional int32 StaminaRecoverValue = 5;				//体力每次间隔恢复数量
	optional int32 StaminaBuyValue = 6;						//体力每次购买的数量
	optional int32 StaminaBuyTimesPerday = 7;			//每天可以购买体力的最大次数
	optional int32 StaminaBuyParam1 = 8;					//体力购买参数1用于显示本次购买体力的花费
	optional int32 StaminaBuyParam2 = 9;					//体力购买参数2用于显示本次购买体力的花费
	optional int32 SecretShopRefershYuanBao = 10;    //鬼市商店元宝刷新消耗
	optional int32 SecretShopRefreshInterval= 11;
	optional int32 CardIntimacyExp1=12;				//符灵亲密度升2级所需经验
	optional int32 CardIntimacyExp2=13;				//符灵亲密度升3级所需经验
	optional int32 CardIntimacyMaxLv=14;			//符灵亲密度最大等级
	optional int32 GuildCreatePrice=15;				//创建帮会花费
	//optional int32 GuildOpenLevel=16;				//开启帮会功能的等级
	optional int32 GuildTimelineCnt=18;				//帮会大事件消息上限
	optional int32 GuildMemberCnt=19;				//帮会成员上限（包括管理员和帮主）
	optional int32 SoulStarCopySceneOpenOfflineCD=20;				//星魂副本功能离线结算间隔（小时）
	optional bool IsTalismanOpen = 21;		//法宝功能开关 
	optional bool IsDrawCardOpen = 22;		//抽卡功能总开关
	optional bool IsDrawCardOpen_Normal = 23;		//普通抽卡功能开关
	optional bool IsDrawCardOpen_Advance = 24;	//高级抽卡功能开关
	optional bool IsDrawCardOpen_Leader = 25;		//欧皇代抽功能开关
	optional bool IsDrawCardOpen_Team = 26;			//组队祭祀功能开关
	optional int32 GuildImpeachTime4Admin = 27;		//帮主几天不上线管理员可弹劾
	optional int32 GuildImpeachTime4Regular = 28;	//帮主几天不上线普通成员可弹劾
	optional int32 NewPlayerStoryLine = 29;			//新手玩家初次进入游戏的故事线ID
	optional int32 OrbmentAssistSlotAttachUpPercent = 30;		//星魂副槽位对附加属性的增幅百分比x100
	optional int32 OrbalMainAttrUpRatePercent3=31;		//星魂共鸣3连主属性增幅百分比x100
	optional int32 OrbalMainAttrUpRatePercent4=32;		//星魂共鸣4连主属性增幅百分比x100
	optional int32 OrbalMainAttrUpRatePercent5=33;		//星魂共鸣5连主属性增幅百分比x100
	optional int32 OrbalMainAttrUpRatePercent6=34;		//星魂共鸣6连主属性增幅百分比x100
	optional int32 OrbalAssistAttrUpRatePercent3=35;		//星魂共鸣3连副属性增幅百分比x100
	optional int32 OrbalAssistAttrUpRatePercent4=36;		//星魂共鸣4连副属性增幅百分比x100
	optional int32 OrbalAssistAttrUpRatePercent5=37;		//星魂共鸣5连副属性增幅百分比x100
	optional int32 OrbalAssistAttrUpRatePercent6=38;		//星魂共鸣6连副属性增幅百分比x100
	optional int32 MeleeTableId=39;	//当前乱斗tableId
	optional int32 StoryLevelSpiritFull=40; //剧情副本妖气满值
	optional float QuartzSellReduceRate = 41;			//星魂出售获得金币占原有的比例
	optional int32 DrawCardCostYuanBaoAdvance = 42;			//高级抽卡消耗元宝
	optional int32 DrawCardCostYuanBaoLeader = 43;			//欧皇代抽消耗元宝
	optional float CardExpCoinRate = 44;			//符灵吞噬经验消耗金币占经验值的比例
	optional int32 CardStarPerCoin = 45;			//符灵升星每个材料的消耗金币
	optional bool DailySignOpen = 46;				//每日签到是否开启
	optional int32 TalismanAddExpCoinRate = 47;		//法宝吞噬经验消耗金币对材料法宝基础经验的倍数
	optional int32 GuildChangeNamePrice = 48;		//帮会改名价格
	optional bool IsOpenPlayerChangeName = 49;	//是否开启玩家改名
	optional int32 PlayerChangeNamePrice = 50;	//玩家改名价格
	optional int32 VigourMaxValue = 51;			//活力值上限
	optional int32 VigourGatherCD = 52;			//灵气收集 cd
	optional int32 ArenaOpenTime = 53;	//斗妖场每天开放时间（时 包括）
	optional int32 ArenaCloseTime = 54;	//斗妖场每天关闭时间（时 包括）
	optional int32 ArenaProvisionalPlay = 55;	//斗妖场定级赛场数
	optional int32 CardLoveNeedItem = 56;	//斗妖场定级赛场数
	optional int32 CardLoveInviteCD = 57;	//斗妖场定级赛场数
	optional int32 SoloWaitTime = 58;	//切磋等待时间
	optional bool IsShareOpen = 59;		//分享功能开关
	optional bool IsOpenRechargeClient = 60; //是否能打开充值界面(关闭后客户端元宝充值界面打不开，货币托管模式)
	optional int32 RefreshSecretShopCost = 61; // 刷新黑市消耗
	optional bool IsTutorialRepeatOpen = 62;	// 新手指引重复指引是否开启
	optional bool IsHeroDyeColorOpen = 63;	//主角染色是否开启
	optional bool IsCardDyeColorOpen = 64;	//卡牌染色是否开启
	optional bool IsIntimacyOpen=65;      //卡牌亲密度是否开启
	optional bool IsIncubationOpen = 66; //新手孵化任务是否开启
	optional bool IsFirstChargeOpen=67;      //首充开启
	optional bool IsChargeFundOpen=68;      //成长基金开启
	optional int32 ArenaWeekYuanBaoPlay = 69;	//斗妖场每周奖励元宝需求参与次数
	optional bool IsSocialOpen = 70;		//社交开关
	optional int32 FirstChargeGradeOne = 71; //首充1档金额
	optional int32 FirstChargeGradeTwo = 72; //首充2档金额
	optional int32 LevelFundPric = 73; //基金价格
	optional int32 LevelFundByLevel = 74; //基金购买阶段等级
	optional int32 LevelFundItemID = 75; //基金道具ID
	optional int32 LevelFundGoodsID = 76; //基金ID
	optional bool IsDrawCardOpen_Advance_UP = 77; //高级抽卡UP功能开关
	optional int64 DrawCardAdvanceUpNoticeTime = 78; //高级抽卡UP预告日期
	optional int64 DrawCardAdvanceUpBeginTime = 79; //高级抽卡UP开始日期
	optional int64 DrawCardAdvanceUpEndTime = 80; //高级抽卡UP结束日期
	optional float LoginPlatCoinAddPercent = 81;	//手Q中心和微信中心启动特权增加金币比例
	optional int32 SocialGameID = 82; //social web gameid
	optional bool IsLevelAwardOpen = 83;		  //等级礼包开关
	optional float QQSVipCoinAddPercent = 84;			//QQ超级会员特权增加金币比例
	optional bool IsActivityDailySignOpen = 85; //是否开启运营活动每日签到
	optional int64 ActivityDailySignBeginTime =86; //运营活动每日签到开始日期
	optional int64 ActivityDailySignEndTime = 87; //运营活动每日签到结束日期
	optional int32 ActivityDailySignCurSaveMaxNum = 88; //运营活动每日签到当天最大补签次数
	optional int32 ActivityDailySignAllSaveMaxNum_Normal=89; //运营活动每日签到总共最大补签次数(普通玩家)
	optional int32 ActivityDailySignAllSaveMaxNum_Recharge=90; //运行活动每日签到总共最大补签次数(月卡玩家)
	optional bool IsGuildBossOpen=91;//是否开启工会BOSS
	optional int32 GuildBossStartHourOfWeek=92;//工会BOSS开启周小时
	optional int32 GuildBossEndHourOfWeek=93;//结束时间
	optional bool IsOpenPatFace =94;						   //是否开启拍脸图	
	optional int32 BattleTimes = 95; //十连战战斗最大次数
	optional bool IsCollectionCardOpen=96;//图鉴符灵功能
	optional bool IsCollectionStarOpen=97;//图鉴星魂功能
	optional bool IsCollectionTalismanOpen=98;//图鉴物化功能
	optional bool IsExtraAwardOpen = 99; //集字玩法-额外掉落是否开启
	optional bool IsExchangeShopOpen =100; //集字玩法-兑换商店是否开启
	optional int32 VigourRecoverInterval=101;//每次活力恢复间隔（秒）
	optional bool IsMSDKQQWXOpen = 102;	//是否开启平台特权
	optional bool IsPieceDonateOpen = 103; //碎片赠送是否开启
	optional int32 PieceDonateMaxCountPerDay=104;//每日赠送最大次数
	optional int32 ReputationOverPoint = 105;	//声望系统允许溢出声望点
	optional int32 YardMaxCardNum = 106; //庭院最多摆放符灵数量
	optional bool IsMonthCardOpen = 107; //月卡购买开启
	optional bool IsRechargeCardAwardOpen = 108; //已生效的月卡周卡是否可以领奖
	optional bool IsOpenHeadFrame = 109;		//是否开启头像框功能
	optional float GuildShopPriceFactor = 110;		//激活商品价格系数
	optional bool IsWeekCardOpen = 111; //周卡购买开启
	optional int32 TeamInviteCD = 112;//邀请玩家组队cd，单位秒
	optional bool IsOpenYuanBao2GoldCoin = 113; //是否开启金币不足时，用元宝or绑定元宝换
	optional int32 YuanBao2GoldCoin = 114; //一个元宝兑换多少金币
	optional int32 IntimacyUnLockCallCard=115;//解锁亲密度符灵跟随等级
	optional int32 IntimacyUnLockCallCardRelax=116;//解锁亲密度符灵交互等级
	optional int32 WorldChatCD = 117;//世界频道聊天CD，单位秒
	optional int32 GuildChatCD = 118;//世界频道聊天CD，单位秒
	optional int32 SendReqAccountPerSize = 119;		//分批请求请求账号角色，每次请求的数量
	optional bool IsActivityRechargeOpen = 120;		//运营活动-每日充值开关
	optional int32 HeroSkillUnLock1 = 121;			//主角技能位1解锁等级
	optional int32 HeroSkillUnLock2 = 122;			//主角技能位2解锁等级
	optional bool IsOpenTreasuresShop = 123;    //是否开启西域奇珍商店
	optional int32 TreasuresShopDuration= 124;   //西域奇珍商店一次开启时间
	optional int32 GuildApplyMax = 125;			 	 // 最多同时申请多少帮会
	optional int32 GuildApplyOverdueTime = 126; 	 // 帮会申请过期时间（s）
	optional int32 GuildApplyOneKeyCD = 127; 	 	 // 一键申请cd（s）
	optional int32 YardOpRecTime = 128;	// 私宅访问记录留存时间
	optional int32 YardCardIntimacy = 129; // 私宅摆放符灵亲密度等级
}

message GC_QUARTZ_SYNC
{
	repeated _QUARTZ QuartzList = 1;
	optional int32 ResetStone = 2;
	optional int32 StrengthenStone = 3;	
}

message GC_QUARTZ_ADD
{
	repeated _QUARTZ NewQuartz = 1;
}

message CG_ORBMENT_RESET
{
	required uint64 CardGuid = 1;
}

message GC_ORBMENT_RESET
{
	required uint64 CardGuid = 1;
	required _ORBMENT Orbment = 2;
	required int32 ResetStone = 3;
}

message CG_QUARTZ_SELL
{
	repeated uint64 QuartzGuid = 1;
}

message GC_QUARTZ_SELL
{
	repeated uint64 QuartzGuid = 1;
	optional int32 AddStrengthenStone = 2;
}

message CG_QUARTZ_STRENGTHEN
{
	required uint64 QuartzGuid = 1;
	optional uint64 CardGuid = 2;
	required bool UseStone = 3;
	optional int32 CostType =4; //开元通宝（金币）购买时，若不足，选择代替货币
}

message GC_QUARTZ_STRENGTHEN
{
	required bool Success = 1;
	required _QUARTZ QuartzInfo = 2;
	optional uint64 CardGuid = 3;
	optional int32 StrengthenStone = 4;		//强化石数量
}

message CG_QUARTZ_EQUIP
{
	required uint64 QuartzGuid = 1;
	required uint64 CardGuid = 2;
	required int32 SlotIndex = 3;
}

message GC_QUARTZ_EQUIP
{
	required _QUARTZ Quartz = 1;
	required uint64 CardGuid = 2;
	required int32 SlotIndex = 3;
	optional _QUARTZ OldQuartz = 4;
}

message CG_QUARTZ_UNEQUIP
{
	required uint64 QuartzGuid = 1;
	required uint64 CardGuid = 2;
}

message GC_QUARTZ_UNEQUIP
{
	required _QUARTZ Quartz = 1;
	required uint64 CardGuid = 2;
}

message GC_QUARTZ_UPDATE
{
	optional int32 ResetStone = 1;
	optional int32 StrengthenStone = 2;
}

//
message _HEROSKILLSLOT
{
	optional int32 MainSkillId = 1;
	optional int32 SupportSkillId = 2;
}

//
message _HERO
{
	optional int32 HeroId 						= 1;
	optional bool Unlocked 						= 2;
	repeated int32 GemChooseClass 		= 3;
	optional int32 CurSkinId					= 4;
	repeated int32 SkinList						= 5;
	optional _TALISMAN EquipedTalisman = 6;
	repeated int32 SkillLevel					= 7;
	optional int32 CurSoulWareId = 8 [default=-1];
	repeated int32 SoulWareList = 9;
	optional bool  Activated = 10;
	repeated int32 HeroPiece = 11;
	optional int32 DyeColorID = 12[default=-1];
	optional bool FirstShowHero = 13;
	optional int32 OrnamentEffectID = 14; //特效装饰
	optional int32 TraitSkillAwardFlag = 15; //性格技能成长奖励领取标记[0,31]每个位标记一个奖励段
	repeated int32 TraitSkillLv = 16;	  	 //性格技能等级
	repeated _HANGPIECE HangPieceSlotList=17;//挂件装饰
}

message GC_HERO_SYNC
{
	repeated _HERO HeroList 		= 1;
	required int32 Level 				= 2;
	required int32 Exp 					= 3;
	required int32 CurHeroId 		= 4;
	optional int32 DefaultSkin  = 5;
}

message GC_HERO_SKILL_LEVELUP
{
	required int32 HeroId = 1;
	repeated int32 SkillLevel = 2;
}

message CG_HERO_SWITCH
{
	required int32 HeroId = 1;
}

message GC_HERO_SWITCH
{
	required int32 HeroId = 1;
}

message GC_HERO_ADDEXP
{
	required int32 Exp = 1;
	optional int32 Level = 2;
}

message GC_HERO_UNLOCK
{
	required int32 HeroId = 1;
}

message CG_HERO_SKIN_BUY
{
	required int32 SkinId = 1;
}

message GC_HERO_SKIN_ADD
{
	required int32 HeroId = 1;
	required int32 SkinId = 2;
}

message CG_HERO_SKIN_SWITCH
{
	required int32 SkinId = 1;
}

message GC_HERO_SKIN_SWITCH
{
	required int32 HeroId = 1;
	required int32 SkinId = 2;
}


//队员
message _TEAMMEMBER
{
	required uint64 guid 						= 1;			//队员guid
	required string name 						= 2;			//队员名字
	required int32 model						= 3;			//外观id
	required int32 level 						= 4;			//等级
	required uint64 head						= 5;			//自定义头像
	required uint64 guild						= 6;			//帮派guid
	required int32 headframe					= 7;			//头像框id
}

message _TEAMMEMBERCACHE
{
	required uint64 guid 						= 1;			//队员guid
	required int32 level						= 2;			//等级
}



//队伍
message _TEAMINFO
{
	required int32 id								= 1;			//队伍id
	required bool auto							= 2;			//是否是自动组队
	required int32 copysceneid			= 3;			//副本id
	repeated _TEAMMEMBER member			= 4;			//队员信息
	repeated int32 reqDataEx				= 6; 			//额外参数
	optional int32  upLevel				= 7[default = 999];  //等级上限
	optional int32  downLevel			= 8[default = 0];  //等级下限
	optional TeamJoinLimitType  JoinLimitType = 9;      //组队加入权限类型
	optional int32  battleTimes			= 10[default = 1];
}


enum  TeamJoinLimitType
{
	TeamJoinLimitType_Public = 0;
	TeamJoinLimitType_Friend = 1;
	TeamJoinLimitType_Private = 2;
}


message CG_TEAM_JOIN
{
	required int32 id								= 1;			//队伍id
	required int32 copysceneid			= 2;			//队伍类型
	required uint64 inviter				= 3;			//邀请者
	repeated int32  reqDataEx			= 4; //额外参数
	optional int32 teamIdentity			= 5;			//指定身份
	optional TeamJoinLimitType  joinLimitType = 7;      //组队加入权限类型
	optional int32  upLevel				= 8[default = 999];  //等级上限
	optional int32  downLevel			= 9[default = 0];  //等级下限
	optional bool HeLuoContinue = 10;
	
}

message CG_TEAM_LEAVE
{
	required int32 id								= 1;			//队伍id
}

message CG_TEAM_CHANGELEADER
{
	required uint64 newleader				= 1;			//想被切换成队长的玩家的guid
}

//服务器返回的队伍操作，适合只有一个结果的情况，客户端根据id进行相应操作
message GC_TEAM_OP
{
	required int32 optype						= 1;			//队伍操作结果id
}

message CG_TEAM_INVITE
{
	required uint64 target					= 1;			//邀请的玩家guid
	required uint64 chatgroup				= 2;			//邀请的群组guid
	required int32 CopySceneId			= 3;			//副本ID
}

message GC_TEAM_SYN_INFO
{
	required _TEAMINFO info 				= 1;			//队伍信息
}

message CG_TEAM_ENTER_AUTOTEAM
{
	required int32 copysceneid			= 1;			//队伍类型
	repeated int32  reqDataEx			= 2; 			// 二次判段条件
	optional int32 teamIdentity			= 3;			//指定身份
	optional int32  upLevel				= 5[default = 999];  //等级上限
	optional int32  downLevel			= 6[default = 0];  //等级下限
	optional TeamJoinLimitType  JoinLimitType = 7;      //组队加入权限类型
	optional int32  battleTimes			= 8[default = 1];
}

message CG_TEAM_LEAVE_AUTOTEAM
{
}


//分别在服务器和客户端以及CopySceneRule.txt使用，不能随便修改，只能往后添加
enum  TEAM_TYPE
{
	TEAM_TYPE_ALL = -2;//全部
	TEAM_TYPE_INVALID = -1;//无效类型
	TEAM_TYPE_FULING_PIECE = 0;//符灵碎片副本
	TEAM_TYPE_AWAKEN = 1;//觉醒副本
	TEAM_TYPE_HLRIFT = 2;//河图洛书副本
	TEAM_TYPE_SOULSTAR_ATTACK = 3;//星魂副本 进攻
	TEAM_TYPE_SOULSTAR_DEFENSE = 4;//星魂副本  防守
	TEAM_TYPE_ADVENTURE= 5;//附灵奇遇
	TEAM_TYPE_TEAM_HELP= 6;//老带新
	TEAM_TYPE_TEAM_WILDTREASURE = 7;//大荒寻宝
	TEAM_TYPE_GUILD_BOSS = 8;//工会BOSS

	
}
message CG_TEAM_LIST
{
	optional TEAM_TYPE   teamType = 1[default = TEAM_TYPE_ALL];
	repeated int32 CopySceneIds = 2;
}


message GC_TEAM_LIST
{
	optional int32 ret = 1;
	repeated _TEAMINFO info 				= 2;			//队伍信息
}


message GC_TALISMAN_SYNC
{
	repeated _TALISMAN TalismanList = 1;
	repeated uint64 MakeCollectGuid = 2;
	repeated int32 VisualCollect 		= 3;
}

message CG_TALISMAN_WORLDRECORD
{
}

message GC_TALISMAN_WORLDRECORD
{
	repeated _TALISMANMAKERECORD WorldCollect = 1;
}

message CG_TALISMAN_PLAYERRECORD
{
}

message GC_TALISMAN_PLAYERRECORD
{
	repeated _TALISMANMAKERECORD PlayerCollect = 1;
}

message CG_TALISMAN_MAKE
{
	optional int32 EnergyYin = 1;
	optional int32 EnergyYang = 2;
	optional int32 EnergyBalance = 3;
	optional int32 Acarna = 4;
	optional uint64 RecordTalismanGuid = 5;
}

message GC_TALISMAN_MAKE
{
	optional _TALISMAN Talisman = 1;
}

message CG_TALISMAN_CUSTOM_FILLINFO
{
	optional int32 CustomVisualId = 1;
	optional string CustomName = 2;
}

message GC_TALISMAN_CUSTOM_FILLINFO
{
	optional _TALISMAN Talisman = 1;
}

message CG_TALISMAN_ADDRECORD
{
	optional uint64 TalismanGuid = 1;
}

message GC_TALISMAN_ADDRECORD
{
	optional _TALISMANMAKERECORD MakeRecord = 1;
}

message CG_TALISMAN_DELRECORD
{
	optional uint64 TalismanGuid = 1;
}

message GC_TALISMAN_DELRECORD
{
	optional _TALISMANMAKERECORD MakeRecord = 1;
}

message CG_TALISMAN_ADDEXP
{
	optional uint64 TalismanGuid = 1;
	repeated uint64 MaterialGuid = 2;
}

message GC_TALISMAN_ADDEXP
{
	optional _TALISMAN Talisman = 1;
	repeated uint64 MaterialGuid = 2;
	optional bool IsLevelUp = 3;
}

message GC_TALISMAN_ADDVISUAL
{
	repeated int32 VisualCollect = 1;
}

message CG_TALISMAN_LOCK
{
	required uint64 TalismanGuid = 1;
}

message GC_TALISMAN_LOCK
{
	required uint64 TalismanGuid = 1;
}

message CG_TALISMAN_UNLOCK
{
	required uint64 TalismanGuid = 1;
}

message GC_TALISMAN_UNLOCK
{
	required uint64 TalismanGuid = 1;
}

message CG_CARD_TALISMAN_EQUIP
{
	optional uint64 CardGuid = 1;
	optional uint64 TalismanGuid = 2;
}

message GC_CARD_TALISMAN_EQUIP
{
	optional uint64 CardGuid = 1;
	optional _TALISMAN Talisman = 2;
	optional _TALISMAN OldTalisman =3;
}

message CG_CARD_TALISMAN_UNEQUIP
{
	optional uint64 CardGuid = 1;
}

message GC_CARD_TALISMAN_UNEQUIP
{
	optional uint64 CardGuid = 1;
	optional _TALISMAN Talisman = 2;
}

message CG_HERO_TALISMAN_EQUIP
{
	optional int32 HeroId = 1;
	optional uint64 TalismanGuid = 2;
}

message GC_HERO_TALISMAN_EQUIP
{
	optional int32 HeroId = 1;
	optional _TALISMAN Talisman = 2;
	optional _TALISMAN OldTalisman =3;
}

message CG_HERO_TALISMAN_UNEQUIP
{
}

message GC_HERO_TALISMAN_UNEQUIP
{
	optional int32 HeroId = 1;
	optional _TALISMAN Talisman = 2;
}

//通用提示一个弹框，点击确定后，客户端根据ret类型执行指定的客户端逻辑
message GC_ERR_TIPS
{
	required RESULT ret = 1;
	optional string extraMsg = 2;	//额外显示的提示内容，可以空
}


//
message _Achievement
{
	enum AchievementStatus
	{
		Empty = 0;
		Going = 1;
		Award = 2;
		Finish = 3;
	}
	
	optional int32 AchievementId = 1;
	optional int32 CurStatus = 2;
	optional int32 ProgressParam = 3;
}


//
message _AchievementData
{
	repeated _Achievement AchievementList = 1;
	repeated int32 PhaseAwardTake = 2;
	optional int64 Exploit = 3; //新增战绩，与成就积分不同，可以用来消耗参加活动
}

message GC_ACHIEVEMENT_SYNC
{
	optional _AchievementData AchievementData = 1;
}

message GC_ACHIEVEMENT_UPDATE
{
	repeated _Achievement AchievementList = 1;
	optional int64 Exploit = 2;
}

message CG_ACHIEVEMENT_AWARD
{
	required int32 AchievementId = 1;
}

message CG_ACHIEVEMENT_PHASE
{
	required int32 ResetType = 1;
	required int32 PhaseId = 2;
}

message GC_ACHIEVEMENT_PHASE
{
	repeated int32 PhaseAwardTake = 1;
}

message _StoryLevelMonster
{
	optional int32 Id = 1;
	optional int32 WaveId = 2;
	optional bool IsBoss = 3;
}

//开启一个新的副本
message CG_REQ_NEW_STORY_LEVEL
{
	optional int32 LevelId = 1;
}

//挑战某波怪
message CG_REQ_STORY_LEVEL_FIGHT
{
	optional int32 Id = 1;
}

//开启宝箱成功
message GC_RET_STORYLEVEL_GET_DROP
{
	optional int32 Id = 1;
}

//请求刷boss
message CG_REQ_STORY_LEVEL_CHANGE_ENV
{

}

//进入副本成功
message GC_RET_NEW_STORY_LEVEL
{
	optional int32 LevelId = 1;
}

//进度更新
message GC_UPDATE_STORY_LEVEL
{
	//当前妖气
	optional int32 Spirit = 1;
	optional int32 State = 2;
	optional int32 impactId = 3;

	repeated _StoryLevelMonster FullMonsters = 4;
	optional int32 Star = 5; //boss关结束，星级评定
}

//请求退出
message CG_REQ_LEAVE_STORY_LEVEL
{

}

message GC_RET_LEAVE_STORY_LEVEL
{

}

message CG_ENTER_SCENE_OK
{
}

//更新已完成的关卡
message GC_UPDATE_STORY_LEVEL_FIN
{
	optional bool Full = 1;
	repeated int32 Finished_Levels = 2;
	repeated int32 Stars = 3;
	repeated _DBStoryCopySceneAward AwardFlagData = 4; 
}


// 待废弃
message _AugurYunPresent
{
	optional int32 StartTime = 1;
	optional uint64 ReceiverGuid = 2;
	optional int32 YunClass = 3;
}

enum AugurExpireType
{
	NoneAugurExpireType = 0;
	Count = 1; // 次数
	Period = 2; // 时长
	Amount = 3; // 额度
	Today = 4; // 当天
}

//==========数据库存储 修改需要考虑兼容=================
message _Augur
{
	optional int32 Id = 1; // id
	optional int32 Count = 2; //  剩余次数
	optional int32 LeftTime = 3; // 剩余时间
	optional bool Open = 4; // 激活
	optional bool Valid = 5; // 是否有效
	optional int32 OpenTime = 6; // 激活时间
	optional int64 ValidTimestamp = 7; // 失效时间
	optional int32 Amount = 8; // 生效余额
}

// 待废弃
message _AugurPresent
{
	optional uint64 Guid = 1;
	optional bool Sendback = 2;
	optional int32 Value = 3;
	optional int64 Timestamp = 4;
}

// 待废弃
message _AugurPresentHistory
{
	repeated _AugurPresent List = 1;
}

//玄学运势
//==========数据库存储 修改需要考虑兼容=================
message _AugurData
{
	repeated int32 YunWeight = 1; // 待废弃
	repeated _Augur Augur = 2; // 辅运势
	optional int32 YunPresentCount = 3; // 待废弃
	optional int32 LuckBagRobCount = 4; // 待废弃
	repeated int32 AlmanacGoodId = 5;
	repeated int32 AlmanacBadId = 6;
	optional int64 SignTimeStamp = 7; // 待废弃
	repeated uint64 YunSendToday = 8; // 待废弃
	optional _Augur MainAugur = 9; // 主运势
	optional int32 AugurTimes = 10; // 今日抽签次数
	repeated int32 WeekAugurLimit = 11; // 本周抽到的有限制的签
	repeated int32 MonthAugurLimit = 12; // 本月抽到的有限制的签
	repeated _Augur ReplaceAugurList = 13; // 等待替换的签
	optional int32 MainAugurStar = 14; // 主运势的星宿
}

message _AugurLuckRobber
{
	optional uint64 Guid = 1;
	optional string Name = 2;
	optional int32 Luck = 3;
}

message _AugurLuckBag
{
	optional uint64 Guid = 1;
	optional int32 Luck = 2;
	optional int32 Count = 3;
	repeated _AugurLuckRobber RobberList = 4;
	repeated uint64 MemberGuidList = 5;
	optional uint64 OwnerGuid = 6;	
	optional int64 CreateTime = 7;
	optional string OwnerName = 8;
}

message _AugurLuckBagList
{
	repeated _AugurLuckBag luckbag = 1;
}

//传输
message _AugurLuckBag_tf
{
	repeated _AugurLuckBag luckbag = 1;
	repeated uint64 modify = 2;
	repeated uint64 del = 3;
}

enum AUGUR_SYNC_TYPE
{
	AUGUR_DATA = 0; // 同步所有数据
	AUGUR_MAIN = 1; // 同步主buff
	AUGUR_LIST = 2; // 同步辅buff list
	AUGUR_NORMAL = 3; // 同步某个辅buff
	AUGUR_REPLACE = 4; // 替换列表
	AUGUR_TIMES = 5; // 抽签次数
}

message GC_AUGUR_SYNC
{
	required AUGUR_SYNC_TYPE SyncType = 1;
	optional _AugurData AugurData = 2;
	optional _Augur MainAugur = 3;
	repeated _Augur AugurList = 4;
	optional int32 AugurIndex = 5;
	optional _Augur NormalAugur = 6;
	repeated _Augur ReplaceList = 7;
	optional int32 AugurTimes = 8;
}

message CG_AUGUR_YUN_PRESENT
{
	required uint64 ReceiverGuid = 1;
	required int32 YunClass = 2;
}

message CG_AUGUR_YUN_RECEIVE
{
	required uint64 SenderGuid = 1;
	required int32 YunIndex = 2;
}

message GC_AUGUR_YUN_RECEIVE
{
	repeated int32 SenderYun = 1;
	optional _AugurYunPresent SenderPresent = 2;
	optional int32 SenderPresentIndex = 3;
	repeated int32 ReceiverYun = 4;
}

message GC_AUGUR_LUCKBAG_ADD
{
	required int32 Luck = 1;
	required int32 Count = 2;
}

message CG_AUGUR_LUCKBAG_SEND
{
	required uint64 LuckBagGuid = 1; //红包guid
	required uint64 ReceiverGuid = 2; //接收红包者guid
}

message CG_AUGUR_LUCKBAG_ROB
{
	required uint64 LuckBagGuid = 1;
}

message GC_AUGUR_LUCKBAG_ROB
{
	required _AugurLuckBag luckbag = 1;
}

enum AugurType
{
	NoneType = 0;
	Type1 = 1;
	Type2 = 2;
	Type3 = 3;
	Type4 = 4;
	Max = 5;
}

message CG_AUGUR_REQ
{
	optional AugurType Type = 1;
}

message GC_AUGUR_UPDATE
{
	repeated int32 Yun = 1;
	repeated _Augur Augur = 2;
}

message GC_AUGUR_YUN_UPDATE
{
	repeated int32 Yun = 1;
}

message CG_AUGUR_LUCKBAG_REQ
{
	required uint64 LuckBagGuid = 1; //待废弃
}

enum RedPacketSyncType
{
	RPST_Invalid = 0;
	RPST_AllSend = 1;
	RPST_AllRecv = 2;
	RPST_SendRecord = 3;
	RPST_RecvRecord = 4;
}

message GC_AUGUR_LUCKBAG_SYNC
{
	optional RedPacketSyncType SyncType = 1;
	repeated _AugurLuckBag Luckbag = 2;
	repeated _DBLuckBagRecord Record = 3;
}

message CG_AUGUR_OPEN_CHANGE
{
	required int32 Index = 1;
}

message GC_AUGUR_OPEN_CHANGE
{
	required int32 Index = 1;
	required bool AugurOpen = 2;
}

message GC_AUGUR_ALMANAC_UPDATE
{
	repeated int32 AlmanacGoodId = 1;
	repeated int32 AlmanacBadId = 2;
}

message GC_AUGUR_REPLACE
{
}

message CG_AUGUR_REPLACE_REPLY
{
	required int32 index = 1;
	required int32 waitIndex = 2;
	required int32 targetIndex = 3;
}

message CG_AUGUR_DAILY_SIGN
{
	
}

//
message _AwakenCopySceneProgress
{
	optional int32 Id = 1;
	optional int32 maxLevel = 2 [default=0];
}

message GC_UPDATE_AWAKEN_COPY_SCENE
{
	repeated _AwakenCopySceneProgress progress = 1;
}

//请求开始觉醒材料副本
message CG_REQ_AWAKEN_COPY_SCENE_FIGHT
{
	required int32 copySceneBaseId = 1;
	required int32 level = 2;	//第几层
}


//
//=================数据库存储 修改需要考虑兼容=================
message _DrawCard
{
	repeated int32 PaperCount = 1;
	optional int32 AugurMemberCount = 2;
}

message _DrawCardMember
{
	optional uint64 Guid = 1;
	optional string Name = 2;
	optional bool IsLeader = 3;
	optional _CARD GetCard = 4;
	optional bool AddSuccess = 5;
	optional uint64 Icon = 6;
	repeated int32 PaperCount = 7;
	optional bool AddNewCard = 8;
	optional bool IsReady = 9;
	optional int32 modelId = 10;			//模型ID
	optional int32 soulwaremodelId = 11;	//魂器外观ID
	optional int32 DyeColorId = 12[default=-1];	//染色id
	optional int32 LeaderAugurId = 13;
	optional bool CanAugurMember = 14;
	optional int32 LeaderAugurCount = 15;
	optional int32 HeadFrame = 16;			//头像框
	optional int32 OrnamentEffectId = 17; //特效装饰ID
}

message _DrawCardRoom
{
	optional int32 RoomId = 1;
	optional int32 RoomType = 2;
	repeated _DrawCardMember MemberList = 3;
	optional int32 Status = 4;
	optional int32 ReportCount = 5;
	optional int32 EnterType = 6;
	optional int32 StartTime = 7;
	optional int32 ConfirmCount = 8;
	optional int32 DrawTime = 9;
}

message _DrawCardRoomPreview
{
	optional int32 RoomId = 1;
	optional int32 MemberCount = 2;
	optional uint64 LeaderGuid = 3;
	optional string LeaderName = 4;
	optional uint64 LeaderIcon = 5;
	repeated int32 PaperCount = 6;
	repeated uint64 MemberIcon = 7;
	repeated int32 MemberHeadFrame = 8;
	optional int32 LeaderAugurId = 9;
	optional int32 LeaderHeadFrame = 10;
	optional int32 LeaderAugurCount = 11;
}

message CG_CARD_AWAKENING_EX
{
	required uint64 Guid = 1;
}

//服务器使用
message _MisItem
{
	optional int32 MisId = 1;
	optional bool IsDone = 2;
	optional uint64 CardGuid = 3;
	repeated int32 Params = 4;
}

message GC_UPDATE_MIS
{
	repeated _MisItem Items = 1;
}

//开启角色的觉醒任务
message CG_REQ_OPEN_AWAKEN_MIS
{
	required uint64 Guid = 1;
}

//放弃角色的觉醒任务
message CG_REQ_ABANDON_AWAKEN_MIS
{
	required uint64 Guid = 1;
}

//更新进行中的角色觉醒任务
message GC_UPDATE_AWAKEN_MIS
{
	required uint64 Guid = 1;
}

message GC_DRAWCARD_SYNC
{
	required _DrawCard DrawCardInfo = 1;
}

message _DrawCardOperate
{
	required float XPos = 1;
	required float YPos = 2;
	required float Time = 3;
}

message CG_DRAWCARD_START
{
	required int32 DrawCardType = 1;
	repeated _DrawCardOperate OperateSet = 2;
	optional float CenterXPos = 3;
	optional float CenterYPos = 4;
	optional float CenterZPos = 5;
}

message GC_DRAWCARD_FINISH
{
	required int32 DrawCardType = 1;
	required _DrawCard DrawCardInfo = 2;
	repeated _CARD NormalCard = 3;
	repeated _CARD AdvanceCard = 4;
	repeated _DrawCardMember LeaderDrawMember = 5;
	repeated _DrawCardMember TeamDrawMember = 6;
	optional bool IsNewCard = 7;
	repeated _DrawCardOperate OperateSet = 8;
	optional float CenterXPos = 9;
	optional float CenterYPos = 10;
	optional float CenterZPos = 11;
	optional int32 ramdomSeed = 12;
}

message CG_DRAWCARD_ROOMLIST_SYNC
{
	required int32 RoomType = 1;
}

message GC_DRAWCARD_ROOMLIST_SYNC
{
	repeated _DrawCardRoomPreview RoomPreviewList = 1;
	optional int32 RoomType = 2;
}

message CG_DRAWCARD_ROOM_CREATE
{
	required int32 RoomType = 1;
	optional int32 EnterType = 2;
}

message CG_DRAWCARD_ROOM_JOIN
{
	required int32 RoomId = 1;
	optional int32 RoomType = 2;
}

message CG_DRAWCARD_ROOM_LEAVE
{
}

message CG_DRAWCARD_ROOM_CHANGEPOS
{
	required int32 TargetIndex = 1;
}

message GC_DRAWCARD_ROOM_UPDATE
{
	enum UPDATETYPE
	{
		Sync = 0;
		Create = 1;
		Join = 2;
		Leave = 3;
		ChangePos = 4;
		DrawCard = 5;
	}
	required int32 RoomUpdateType = 1;
	optional _DrawCardRoom RoomInfo = 2;
	optional bool AugurLeave = 3;
	optional bool IsBreak = 4;
}

message CG_DRAWCARD_INVITE
{
	repeated uint64 PlayerGuid = 1;
	optional bool SendWorld = 2;
	optional bool SendGuild = 3;
	repeated uint64 GroupGuid = 4;
}

message CG_DRAWCARD_ROOM_KICK
{
	required uint64 PlayerGuid = 1;
}

message GC_TELEPORT
{
	optional int32 scene = 1;
	optional float posX = 2;
	optional float posZ= 3;
	optional int32 EnvironmentType = 4;
}

message CG_REQ_TELEPORT
{
	required int32 id = 1;
}

//数据库使用, 帮会位置(中层地图)
//=================数据库存储 修改需要考虑兼容=================
message _GuildLoc
{
	optional string Province = 1;
	optional double Lat = 2; //纬度(scene z, 相对值[0,1])
	optional double Lng = 3; //经度(scene x, 相对值[0,1])
}

//数据库使用, 帮会数据
//=================数据库存储 修改需要考虑兼容=================
message _Guild
{
	optional uint64 Guid = 1;
	optional int64 CreateTime = 2;
	optional uint64 Icon = 3; //不需要自定义
	optional string Name = 4;
	optional string Announcement = 5;
	optional string Slogen = 6;
	optional int64 LastAdvertiseTime = 7[default=0];
	optional int64 StartDeclineTime = 8[default=0];
	optional _GuildLoc Location = 9;
	optional int32 GuildContributePoint = 10; //帮会捐赠积分
	optional int32 GuildContributePointHistory = 11;//帮会捐赠历史积分
	optional uint64 GuildGold = 12; //帮会资金
	optional bool QuickJoin = 13[default=false]; //无需审批，自动加入
	optional int32 MaleCount = 14[default=0]; //男玩家数量
	optional int32 FemaleCount = 15[default=0]; //女玩家数量
}

enum GuildPrivilege
{
	GP_NONE = 0;
	GP_OWNER = 1;
	GP_ADMIN = 2;
	GP_REGULAR = 3;
	GP_APPLICANT = 4;
}

//数据库使用, 帮会成员
//=================数据库存储 修改需要考虑兼容=================
message _GuildMember
{
	optional uint64 GuildId = 1;
	optional uint64 Guid = 2;
	optional string Name = 3;
	optional uint32 Level = 4;
	optional uint64 Icon = 5;
	//optional GuildPrivilege Privilege = 6;
	optional int32 Job = 6; //职位
	optional int64 JoinTime = 7;
	optional int64 LastLoginTime = 8[default=0];
	optional int64 LastLogoutTime = 9[default=0];
	optional _GuildMemberLoanCard LoanCard = 10;//租借卡牌数据
	optional string vOpenId = 11;
	optional int64 save_amt = 12;
	optional int64 LastGuildBossBattleTime = 13;//最近一次工会BOSS战斗的时间 废弃
	optional int32 headframe = 14;
	optional int32 sex = 15; //性别
}

//帮会捐赠数据
message _GuildContribute
{
	optional int32 ContributePoint 				  = 1;	//个人捐赠积分
	repeated int32 ContributeAward                = 2;	//今日已领捐赠奖励
	repeated int32 YesterdayContributeAward       = 3;	//昨日已领捐赠奖励
	optional bool  IsCanGetAward                  = 4;	//是否可以领取今日的帮会奖励，若为false代表该玩家今天已经在其他帮会领过奖励
	optional bool  IsCanGetYesterdayAward         = 5;	//是否可以领取昨日的帮会奖励，若为false代表该玩家今天刚入帮，不能领取昨日奖励
	optional bool  IsCanContribute				  = 6;	//是否可以进行捐赠，若为false代表该玩家今天已经在其他帮会捐赠过了
}


//请求创建帮会
message CG_CREATE_GUILD
{
	required string Name = 1;
	required string Announcement = 2;
	required uint64 Icon = 3;
	required string Slogen = 4;
	required _GuildLoc Location = 5;
}

//返回帮会创建结果
message GC_CREATE_GUILD
{
	required RESULT Result = 1;
}


//图鉴
//=================数据库存储 修改需要考虑兼容=================
message _DBCollection
{
	optional _DBPlayerCollection card = 1;	    //收藏的符灵数据
	optional _DBPlayerCollection talisman = 2;	//收藏的法宝数据
	optional _DBPlayerCollection quartz = 3;	//收藏的星魂数据
	optional _CollectionGroupFinishList AlreadyReceivedGroup=4;           //已完成的组合数据
	optional _DBPlayerCollection intimacy = 5;	//收藏的亲密度数据
}

//帮会简介, 不存数据库
message _GuildBrief
{
	optional uint64 Guid = 1;
	optional uint64 Icon = 2;
	optional string Name = 3;
	optional string OwnerName = 4;
	optional int32 MemberCount = 5;
	optional string Slogen = 6;
	optional _GuildLoc Location = 7;
	optional uint64 OwnerId = 8;
	optional uint64 OwnerIcon = 9;
	optional int32 OwnerLevel = 10;
	optional int32 HeadFrame = 11[default = -1];
	optional int32 MaleCount = 12;
	optional int32 FemaleCount = 13;
	optional int32 FriendCount = 14;
	optional int32 MaxMemberCount = 15;
}

enum GuildBriefUsage
{
	GBU_NONE = 0;
	GBU_LBS = 1;
	GBU_RANK_LIST = 2;
	GBU_REMOTE = 3;
	GBU_INVITATION = 4;
	//////////////////////////////
	GBU_NEIGHBOUR = 5;
	GBU_RECOMMAND_LOC_ENABLE_LIST = 6;
	GBU_RECOMMAND_LOC_DISABLE_LIST = 7;
	GBU_ALL_NAME_ENABLE_LIST = 8;
	GBU_ALL_NAME_DISABLE_LIST = 9;
	GBU_Max = 10;
}

//请求地图上的帮会列表
message CG_LBS_GUILD_LIST
{
	required GuildBriefUsage Usage = 1;
	optional string Province = 2;
	optional string NameFilter = 3;
	optional bool NameFilterEnable = 4;
	optional int32 Page = 5;
}

//返回帮会简介列表
message GC_GUILD_BRIEF_LIST
{
	required GuildBriefUsage Usage = 1;
	repeated _GuildBrief List = 2;
	optional int32 Page = 3;
}

enum GuildInfoSyncType
{
	GIST_NONE = 0;
	GIST_CREATE = 1;
	GIST_JOIN = 2;
	GIST_SYNC = 3;
	GIST_LEAVE = 4;
	GIST_LOGIN = 5;
	GIST_SYNC_ALTER = 6; //非全量刷新
}

//请求帮会详细信息
message CG_MY_GUILD_INFO
{
	optional GuildInfoSyncType SyncType = 1;
}

//返回帮会详细信息
message GC_GUILD_INFO
{
	required GuildInfoSyncType SyncType = 1;
	required _Guild Guild = 2;
}

//
//=================数据库存储 修改需要考虑兼容=================
message _HeLuoRiftData
{
	repeated int32 HeTuAreaCount = 1;
	repeated int32 LuoShuAreaCount = 2;
	optional int32 TodayPlayCount = 3;
	optional int32 TodayMemberCenterCount = 4;
}

//
//=================数据库存储 修改需要考虑兼容=================
message _HeLuoRiftLevelHistory
{
	repeated int32 LevelHistory = 1;
}

message _HeLuoRiftKeyMaterial
{
	optional int32 HeLuoType = 1;
	optional int32 Level = 2;
	optional int32 Count = 3;
}

message _HeLuoRiftPoint
{
	optional int32 PointType = 1;
	optional int32 PointId = 2;
	optional int32 Status = 3;
}

message _HeLuoRiftRoomInfo
{
	repeated uint64 MemberGuid = 1;
	optional uint64 LeaderGuid = 2;
}

message CG_HELUORIFT_ENTER_SIDE
{
	required int32 KeyId = 1;
	optional int32 ChooseArea = 2;
}

message GC_HELUORIFT_ENTER_SIDE
{
	required int32 KeyId = 1;
	required int32 AreaId = 2;
	optional _HeLuoRiftData HeLuoRiftData = 3;
	optional _HeLuoRiftRoomInfo RoomInfo = 4;
	repeated int32 ChooseEventId = 5;
}

message CG_HELUORIFT_ENTER_CENTER
{
	required int32 CopySceneType = 1;
}

message GC_HELUORIFT_ENTER_CENTER
{
	required int32 CopySceneType = 1;
	optional _HeLuoRiftPoint BossPoint = 2;
	optional _HeLuoRiftData HeLuoRiftData = 3;
	optional _HeLuoRiftRoomInfo RoomInfo = 4;
	repeated _HeLuoRiftPoint ElitePoint = 5;
}

message CG_HELUORIFT_KEY_FORMULA
{
	repeated int32 MaterialKeyId = 1;
}

message CG_HELUORIFT_POINT_CHALLENGE
{
	required int32 PointType = 1;
	optional int32 PointIndex = 2;
	optional int32 EventPointId = 3;
}

message CG_HELUORIFT_POINT_ABANDON
{
	required int32 Index = 1;
}

message GC_HELUORIFT_POINT_UPDATE
{
	required _HeLuoRiftPoint Point = 1;
	optional int32 Index = 2;
}

message GC_HELUORIFT_POINT_OPEN
{
	optional _HeLuoRiftPoint OpenPoint = 1;
	repeated int32 ChooseEventId = 2;
}

message GC_HELUORIFT_SYNC
{
	required _HeLuoRiftData HeLuoRiftData = 1;
}

message CG_HELUORIFT_LEAVE
{
}

message GC_HELUORIFT_IMPACT
{
	optional int32 BattleImpactId = 1;
	optional int32 Rate = 2;
}

//帮会会用到的操作, 修改时需要跟GameConfig[GuildOpToPriv]同步
enum GuildOperation
{
	GO_NONE = 0;
	
	//成员
	GO_INVITATION = 1;
	GO_APPLICATION = 2;
	GO_REFUSE_INVITATION = 3;
	GO_REFUSE_APPLICATION = 4;
	GO_ADD_MEM = 5;
	GO_DEL_MEM = 6;
	GO_SYNC_MEM = 7;
	GO_PROMOTION = 8;
	GO_DEMOTION = 9;
	GO_IMPEACHMENT = 10;
	GO_LEAVE = 11;
	GO_DEMISE = 12;	
	GO_UPDATE_MEM = 13;
	
	//消息
	GO_MSG_SYNC = 15;
	GO_MSG_DELETE = 16;
	GO_MSG_ADD = 17;
	
	//帮会
	GO_DECLINE = 20;
	GO_DISBAND = 21;
	GO_MOD_ANNOUNCEMENT = 22;
	GO_MOD_SLOGEN = 23;
	GO_ADVERTISE = 24;
	GO_CHANGE_NAME = 25;
	
	GO_UPDATE_LOC =26;  	//更新定位
	GO_SET_QUICK_JOIN =27;  //设置加入是否需要审核
	
	//场景
	GO_REQ_ENTER_GUILD_ROOM_SCENE = 30;
}

//数据库使用, 帮会消息
//=================数据库存储 修改需要考虑兼容=================
message _GuildMessage
{
	//帮会消息类型, 修改时需要跟GameConfig[GuildMsgToPriv]同步
	enum Type
	{
		NONE_Type = 0;
		INVITATION = 1;
		APPLICATION = 2;
		REFUSE_INVITATION = 3;
		REFUSE_APPLICATION = 4;
		PROMOTION = 5;
		DEMOTION = 6;
		IMPEACHMENT = 7;
		DISBAND = 8;
		KICKED = 9;
		AGREE_APPLICATION = 10;
		LEAVE = 11;
		KICKED_BY_TIME = 12;
		DECLINE_WARNING_1 = 13;
		DECLINE_WARNING_2 = 14;
		DECLINED = 15;
		DEMISE = 16;
		CHANGE_GUILD_NAME = 17;
		SHOP_ITEM_ACTIVATED = 18;
		AGREE_INVITATION = 19; //接受邀请
		MOD_ANNOUNCEMENT = 20; //修改公告
		
	}
	
	optional uint64 Guid = 1;
	
	//通用逻辑数据
	optional uint64 Sender = 2;
	optional uint64 Receiver = 3;
	optional uint64 Guild = 4;
	optional Type MsgType = 5;
	optional int64 SendTime = 6;
	
	//额外数据用以显示, 字符串皆为服务器拼接的带字典号的信息
	optional uint64 Icon = 7;
	optional uint32 Level = 8;
	optional string Title = 9;
	optional string Content = 10;
	optional int32 HeadFrame = 11;
}

//同步帮会消息
message GC_GUILD_MESSAGE
{
	required GuildOperation Operation = 1; 	//对消息的操作, 如增加, 删除, 同步消息列表
	repeated _GuildMessage Messages = 2;	//需要同步的消息
}

//帮会操作
message CG_GUILD_OPERATION
{
	required GuildOperation OpType = 1;
	optional uint64 ParamUint64_1 = 2;
	optional uint64 ParamUint64_2 = 3;
	optional string ParamStr = 4;
	optional int32 ParamInt32 = 5;
}

//回复帮会邀请
message CG_GUILD_INVITE_REPLY
{
	required uint64 InviterPlayerId = 1; //邀请者
	required uint64 GuildId = 2;
	required bool Agree = 3;
	required uint64 MsgGuid = 4;
}

//回复帮会申请
message CG_GUILD_APPLICATION_REPLY
{
	required uint64 GuildId = 1;
	required uint64 ApplicantId = 2; //申请者
	required bool Agree = 3;
}

//通过id请求帮会简介
message CG_GUILD_BRIEF
{
	required GuildBriefUsage Usage = 1;
	required uint64 Guid = 2;
	required uint64 MsgGuid = 3;
	required uint64 SenderGuid = 4;
}

//同步帮会成员变动
message GC_GUILD_MEMBER_OPERATION
{
	required GuildOperation Operation = 1;
	repeated _GuildMember Members = 2;
}


//自定义头像

message CG_ASKFORPIC_SIGN
{
	required string filePath=1;   //文件路径
	required int32  reqSignType=2; //请求签名类型
	required string bucketName=3;  //存储桶名字
}

message GC_GIVESIGN_FORPIC
{
	required uint64 fileId=1; 
	required string sign=2;		//签名
	required string filePath=3; //文件路径
	required string bucketname=4; //空间名字
	required int32 appid=5; //项目ID
	required int32 reqSignType=6; //请求签名类型

}

message CG_ASK_FORDEL_SIGN
{
	required uint64 fileId			= 1;	//需要鉴黄的图片地址
	required int32	reqSignType = 2;			//请求签名类型
	required bool	onlydelqcloudpic = 3;			//是否是删除头像
}

message GC_GIVESIGN_FORPICDEL
{
	required uint64	fileId = 1;
	required string	sign = 2;				//签名
	required string	bucketname = 3;			//空间名字
	required int32	appid = 4;				//项目ID
	required int32	reqSignType = 5;			//请求签名类型
	optional bool	onlydelqcloudpic = 6;		//是否是删除头像
}
message CG_ASK_FORDETECTION_SIGN
{
	required string url	= 1;	       //需要鉴黄的图片地址
	required int32 reqSignType = 2;			//请求签名类型
}
message CG_SUCCESS_DEL_PERSONALSIGN
{
	required uint64	delret = 1;  //删除成功，通知服务器，删除原来的fileId
}
message CG_SUCESSUPLOAD_PERSONALHEAD
{
	required string 	filePath = 1;					//文件路径，做校验用
	required int32 		uploadresult = 2;              	//是否上传成功（腾讯云存储成功）
}

//设置客户端头像
message GC_SYNC_PERSONHEAD
{
required uint64 personHead=1;
}

//数据库使用，新手引导数据
//=================数据库存储 修改需要考虑兼容=================
message _DBTutorial
{
	repeated int32 CompleteData = 1;
	repeated bool TutorialFlag = 2;
	repeated int32 FinishGroup = 3;
}


message CG_TUTORIAL_COMPLETE
{
	required int32 ID = 1;
}

message GC_SYNC_TUTORIAL_DATA
{
	repeated int32 CompleteData = 1;
	repeated int32 FinishGroup = 2;
}

message CG_SYNC_PERSONHEAD
{
     optional uint64 personHead=1;
}


//位置信息
message _LOC_INFO
{
	required double lat = 1;
	required double lng = 2;

	optional string country = 3;
	optional string province = 4;
	optional string city = 5;
	optional string district = 6;
	optional string street = 7;
}

//向服务器同步位置
message CG_SYNC_LOC
{
	required _LOC_INFO loc = 1;
}

//, 帮会消息 
//=================数据库存储 修改需要考虑兼容=================
message _DBGuildMessages
{
	repeated _GuildMessage messages = 1;
}

//, 帮会
//=================数据库存储 修改需要考虑兼容=================
message _DBGuild
{
	optional _Guild guild = 1;
	repeated _GuildMember members = 2;
	optional _DBGuildMessages messages = 3;
	repeated _DBShareCircleQuest shareCircleQuest = 4;  //分享的任务
	repeated uint64  pointGuid = 5; //累积积分的guid
	repeated int32  point = 6; //累积积分
	repeated uint64  pointGuidHistory = 7; //累积积分的guid历史
	repeated int32  pointHistory = 8; //累积积分历史
	optional int64  resetDayTime = 9; //隔天重置时间
	repeated _DBPieceDonateItem donateItem = 10; // 互赠碎片请求
	optional _GuildShop shop = 11; // 帮会商店激活商品
}	

message _LoanInfo
{
	optional uint64 userGuid = 1;
	optional int32 loanNum = 2;
}

//传输
message _Guilds_tf
{
	repeated _DBGuild guilds = 1;
	repeated uint64 modify = 2;
	repeated uint64 del = 3;
	repeated _LoanInfo loan = 4;
}

//单独更新一个帮会的简介
message GC_GUILD_BRIEF
{
	required bool exist = 1;
	required uint64 guildId = 2;
	required GuildBriefUsage Usage = 3;
	optional _GuildBrief Brief = 4;
	optional uint64 senderGuid = 5;
	optional uint64 invitationMsgGuid = 6;
}

message GC_FUNCTION_UNLOCK_EFFECT
{
	required int32 FunctionId = 1;
}

message CG_GROUP_CHAT_CHANGE_ICON
{
	optional uint64 groupguid   = 1;
	optional uint64 icon		 = 2;			
}

message GC_GROUP_CHAT_CHANGE_ICON
{
	optional RESULT result     			= 1[default=SUCCESS];
	optional uint64 groupguid   = 2;
	optional uint64 icon		= 3;			
}

message GC_GIVESIGN_FORPICDETECTION
{
	required string		fileId = 1;
	required string		sign = 2;				//签名
	required string		bucketname = 3;			//空间名字
	required int32		appid = 4;				//项目ID
	required int32		reqSignType = 5;			//请求签名类型
}

enum NpcMiscLogicType
{
    NML_ClickChange = 1; //点击后变形
    NML_GeneralRule = 2; //根据某些条件触发可交互状态, 目前与SceneNpcCreateRule相同
    NML_StoryFlag = 3;   //StoryFlag满足后点击可触发
    NML_LineUp = 4;      //按固定顺序点击一组npc后触发
	
	NML_ClickBattle = 5; //点击后出现对话框 对话框触发战斗： 愤怒的宝箱怪
	NML_ClickMove = 6; //点击触发npc移动 后玩家追踪npc ： 神秘的萤火
	NML_ClickCreate = 7; //点击npc，对话后创建后一个NPC ： 奇怪的脚印
	NML_ClickNewLineUp = 8; //顺序点击npc ： 爱吟诗的妖怪
	NML_SceneWatting = 9; //场景内等待 ：无聊的等待时光
	NML_DialogAndDisappear = 10; //对话后消失 ：消失的孩子
	NML_DialogAndYelling = 11; //对话后喊话 ：大声喊话
	NML_DialogAndDisappear2 = 12; //对话后消失2 ：乐师的谜语，没有人妖界切换，且需要到周围触发
	NML_TriggerBindNpc = 13;		//trigger与某个npc功能绑定
	NML_DialogByFuncUnlock = 14;	//根据功能是否解锁不同对话
	NML_GatherPoint = 15;			//灵气采集点-根据配置，随机位置和采集数据，采集后重新随机
}

enum NpcMiscCDType
{
	NMCD_None = 0;			 //无冷却, 重新进入场景即可再次生效
	NMCD_OncePerLifetime = 1;//只能触发一次
	NMCD_Day = 2;			 //每天重置
	NMCD_Week = 3;			 //每周重置
}

message CG_TRIGGER_NPC_MISC
{
	required uint32 miscId = 1;
	required uint32 sceneNpcId = 2; //反查, 透传
}

message GC_TRIGGER_NPC_MISC
{
	required uint32 miscId = 1;
	required uint32 sceneNpcId = 2; //反查, 透传
	required bool succeed = 3;
}

//数据库使用, 玩家触发的奇遇
message _MiscData
{
	optional uint32 miscId = 1;
	optional int64 triggerTime = 2[default=-1];	//上次触发时间
}

//数据库使用, 一旦设置后, 枚举值绝不可修改
enum StoryFlagDef
{
	StoryFlag_0 = 0; //注释: 哪里用到
}

message GC_STORYLEVEL_GET_NEW_IMPACT
{
	required int32 impactId = 1;//获取到的新buff
	optional int32 id = 2; //怪物id
}

message CG_REQ_MARK_BOSS_FIRST_SHOW
{
	optional int32 flag = 1;
}

message GC_UPDATE_BOSS_FIRST_SHOW_FLAGS
{
	repeated bool flags = 1;
}

message CG_AUGUR_PRESENT_SENDBACK
{
	required uint64 receiverGuid = 1;
	required int64 timestamp = 2;
}

message GC_AUGUR_PRESENT_HISTORY_SYNC
{
	required _AugurPresentHistory history = 1;
}

message GC_AUGUR_PRESENT_HISTORY_UPDATE
{
	required int32 Index = 1;
	required _AugurPresent Data = 2;
}

message GC_AUGUR_RECEIVE_YUN_PRESENT
{
	required uint64 Guid = 1;
	required int32 Value = 2;
}

message CG_DRAWCARD_PAPER
{
	required uint64 PlayerGuid = 1;
	required int32 PaperIndex = 2;
}

message GC_ADVENTURE_TICKET
{
    required int32 Ticket=1;
}

message GC_ADVENTURE_RESULT
{
    optional int32 Result=1;
	optional int32 Id=2;
	optional int32 BattleTypeId=3;
}

message CG_DRAWCARD_READY
{
	required bool IsReady = 1;
}

message CG_DAILY_STAMINA_GET
{
 optional int32 flag = 1;
 optional bool isOver = 2;
}


message GC_DAILY_STAMINA_GET
{
 repeated int32 flags = 1;
 optional int32 timestamp = 2;
}

message GC_AUGUR_NEW_GET
{
	enum GET_TYPE {
		MainBuff = 1;
		CommonBuff = 2;
		ReplaceBuff = 3;
	}

	required GET_TYPE GetType = 1;
	optional int32 MainAugurStar = 2; // 主运势的星宿
}

message CG_ASK_REMAINTIME
{
}

message GC_GIVE_REMAINTIME
{
    required uint64 RemainTime=1;
}

message GC_AUGUR_YUN_PRESENT_COUNT_UPDATE
{
	required int32 Count = 1;
	repeated uint64 YunSendToday = 2;
}


message GC_HELUORIFT_QUIT
{
}

//乱斗种类
enum MELEE_TYPE
{
	MELEE_NONE = 0;
	MELEE_FAIR_DUEL = 1; //公平决斗
}

//乱斗积分途径
enum MELEE_SCORE_TYPE
{
	MST_NONE = 0;
	MST_FIRST_WIN = 1;	//首胜
	MST_WIN = 2;		//胜利
	MST_LOSE = 3;		//失败
}

//同步乱斗活动数据
message GC_MELEE_STATE
{
	required int32 Score = 1; //总分
	repeated bool RankPrizeGet = 2; //阶段性奖励是否已领取
	
}

//领取阶段奖励(实际奖励走GC_DROP_LIST, 更新界面走GC_MELEE_STATE)
message CG_MELEE_GET_RANK_PRIZE
{
	required int32 PrizeIndex = 1; //第几个奖励, 0-based
}

//开始乱斗匹配
message CG_MELEE_MATCH
{
	required int32 MeleeTabId = 1;
	repeated int32 ParamsInt = 2; //乱斗参数. 如选卡, 选法宝, etc.
}

//乱斗匹配成功或失败
message GC_MELEE_MATCH
{
	required bool Success = 1; //目前只需要处理异常错误退出
}

//同步乱斗活动信息
message GC_MELEE_INFO
{
	required int32 MeleeTabId = 1;
	repeated int32 Params = 2;
}

message CG_ONCE_MORE_BATTLE
{
optional int32 copysceneid			= 1;	
}

message GC_ONCE_MORE_BATTLE
{
	optional _TEAMINFO info 				= 1;			//队伍信息
}

message _BATTLE_ROOM_MEMBER
{
	required uint64 guid = 1;	  //队员guid
	optional bool isInBattle = 2; //是否在房间内
	optional int32 userObjId = 3; //玩家objId
	optional bool isLeader = 5;  //是否是队长

	optional _Player playerInfo = 4;
}

//同步战斗房间信息
message GC_SYNC_BATTLE_ROOM_INFO
{
	//蓝方队员信息
	repeated _BATTLE_ROOM_MEMBER blues = 1;
	//红方队员信息
	repeated _BATTLE_ROOM_MEMBER reds = 2;
}

//战斗房间倒计时信息
message GC_SYNC_BATTLE_ROOM_TIMER
{
	enum BATTLE_ROOM_TIMER_TYPE
	{
		Prepare = 1;
		Input = 2;
	}
	optional BATTLE_ROOM_TIMER_TYPE type = 1;
	optional int32 second = 2;
}

//
//=================数据库存储 修改需要考虑兼容=================
message _Quest
{
	optional int32 id = 1; 			//任务id
	optional int32 status = 2; 		//状态
	optional int32 progress = 3; 	//进度
}


//
//=================数据库存储 修改需要考虑兼容=================
message _TutorialQuest
{
	repeated _Quest quest = 1;
	optional int32 point = 2;
	repeated int32 PhaseAwardTake = 3;
	repeated _Quest FirstBranchQuest = 4;	//第一支线任务
	repeated _Quest SecondBranchQuest = 5;	//第二支线任务
}

//
//=================数据库存储 修改需要考虑兼容=================
message _DBRandomCircleQuest
{
	optional int32 id = 1; //quest id
	optional int32 award = 2; //奖励积分
}

//玩家身上存储
//=================数据库存储 修改需要考虑兼容=================
message _CircleQuest 
{
	optional _Quest quest = 1; //当前任务
	optional int32 point = 2; //当前积分
	repeated _DBRandomCircleQuest randomQuest = 3; //3个随机出来的待选任务
	optional int32 status = 4; //当前状态
	optional int32 circle = 5; //当前环数
	repeated int32 takenAward = 6; //今日已经领取的奖励
	optional int32 historyPoint = 7; //历史积分（补领）
	repeated int32 historyTakenAward = 8; //历史已经领取的奖励（补领）
	repeated _DBPlayerShareCircleQuest 		   shareCircleQuests = 9;//玩家分享的环任务 
	repeated _DBPlayerAcceptShareCircleQuest  acceptShareCircleQuests = 10;//玩家接受的分享环任务
}


// 分享的环任务
//=================数据库存储 修改需要考虑兼容=================
message _DBShareCircleQuest
{
	optional int32  shareId = 1; //分享id
	optional int32  id = 2;  //任务表id
	optional int32  point = 3;  //任务表id
	optional int64  shareTime = 4; //分享时间戳 
	optional uint64 shareGuid = 5[default = 0xffffffffffffffff]; 
	optional uint64 accptGuid = 6[default = 0xffffffffffffffff];
	optional bool 	isFinish   = 7[default = false]; //是否完成
}


// 玩家分享的环任务
//=================数据库存储 修改需要考虑兼容=================
message _DBPlayerShareCircleQuest
{
	optional int32  shareId = 1; //分享id
	optional int32  id = 2;  //任务表id
	optional uint64  guildGuid = 3;  //帮派guid
}


// 玩家接受的分享环任务
//=================数据库存储 修改需要考虑兼容=================
message _DBPlayerAcceptShareCircleQuest
{
	optional int32  shareId = 1; //分享id
	optional _Quest quest = 2; //当前任务
	optional int32  point = 3;  //任务表id
	optional uint64 shareGuid = 4[default = 0xffffffffffffffff]; 
}


message GC_SYNC_TUTORIAL_QUEST
{
	required _TutorialQuest data = 1;
}

message GC_TUTORIAL_QUEST_UPDATE
{
	optional _Quest quest = 1;
	optional int32 point = 2;
}

message CG_REQ_TUTORIAL_QUEST_AWARD
{
	required int32 questid = 1;
}

message CG_REQ_TUTORIAL_QUEST_PHASE_AWARD
{
	required int32 phaseid = 1;
}

message GC_HELUORIFT_ROOMUPDATE
{
	optional _HeLuoRiftRoomInfo RoomInfo = 1;
}

//玩家
message _Player
{
	optional uint64 guid = 1;
	optional int32 modelId = 2; 		//外观
	optional string name = 3;   		//名字
	optional int32 level = 4; 			//等级
	optional uint64 icon = 5;			//头像
	optional int32 soulWareModelId = 6; //法宝
	optional int32 headframe = 7;		//头像框
	optional int32 dyeColorId = 8;		//染色
	optional int32 ornamentEffectId = 9;//特效装饰
}

//剧情副本同步假玩家
message GC_STORY_LEVEL_SYNC_FAKE_PLAYER
{
	repeated _Player playerList = 1;
}

message GC_HELUORIFT_CONTINUE
{
}

//剧情副本，首次tv播放
message GC_UPDATE_STORY_LEVEL_TV_PLAYED
{
	repeated bool marks = 1;
}

message CG_REQ_MARK_STORY_LEVEL_TV_PLAYED
{
	optional int32 flag = 1;
}

message GC_CIRCLE_QUEST_SYNC
{
	required _CircleQuest data = 1;
}

message GC_CIRCLE_QUEST_UPDATE
{
	optional _Quest quest = 1;
}

enum CircleQuestSelectType
{
	CQST_Select = 0; //选择任务
	CQST_Quit = 1; //放弃当前任务
	CQST_Share = 2; //分享当前任务到帮派
	CQST_Accept_Share = 3; //接受分享的任务
	CQST_Get_List = 4; //获取所有最新信息
}

message CG_CIRCLE_QUEST_SELECT
{
	required CircleQuestSelectType op = 1;
	required int32 id = 2;	
}

enum CircleQuestAwardType
{
	CQAT_Award = 0; //今日奖励
	CQAT_Untaken = 1; //补领奖励
}

message CG_CIRCLE_QUEST_AWARD
{
	required CircleQuestAwardType type = 1;
	required int32 id = 2;
}

message GC_TREASUREHUNT_HUNT
{

}

message GC_TREASUREHUNT_CLOSE
{

}

message CG_TREASUREHUNT_CONFIRM
{

}

message CG_TREASUREHUNT_CANCEL
{

}

message CG_CIRCLE_QUEST_POINT_AWARD
{
	required int32 awardId = 1;
}

message CG_TREASUREHUNT_REMAINTIME
{

}

message CG_TREASUREHUNT_ENTER
{

}

message CG_TREASUREHUNT_OPENTREASURE
{

}

message GC_TREASUREHUNT_GIVETREASURE
{
   required int32 giveTreasureId=1;
}

message GC_TREASUREHUNT_OPENGUIDE
{
  required  uint64 countDownTime=1;
}

//签到领奖励
message CG_REQ_DAILY_SIGN
{

}

//
//=================数据库存储 修改需要考虑兼容=================
message _DAILY_SIGN_PRIZE
{
	optional int32 dropId = 1;
	optional int32 previewItemId = 2;
	optional bool isGot = 3;
}

message _DAILY_SIGN_CONTINUE_PRIZE
{
	optional int32 tabId = 1;
	optional bool isGot = 2;
	optional bool canOpen = 3;
}

//，签到
//=================数据库存储 修改需要考虑兼容=================
message _DAILY_SIGN_INFO
{
	//累计签到天数
	optional int32 signDays = 1;
	//是否可以重置
	optional bool canReset = 2;
	//是否已经签到
	optional bool isSign = 3;
	//当前奖励池
	repeated _DAILY_SIGN_PRIZE prizeList = 4;
	//签到周期计数
	optional int32 signCycleCount = 5;
	//累计签到周期计数
	optional int32 signContinueCycleCount = 6;
	//连续签到奖励
	repeated _DAILY_SIGN_CONTINUE_PRIZE continuePrizeList = 7;
	//前八天签到奖励
	repeated _DAILY_SIGN_CONTINUEPHASE_PRIZE continuePhaseList= 8;
	//是否为前八天UI界面
	optional bool isResetCotinueUI=9;
}

//同步签到奖励信息
message GC_SYNC_DAILY_SIGN
{
	optional _DAILY_SIGN_INFO info = 1;
}

//确认重置奖励
message CG_REQ_DAILY_SIGN_RESET
{
	
}

message GC_TREASUREHUNT_GIVEREMAINTIME
{
  required uint64 time=1;
}

message CG_CARD_SKIN_BUY
{
	required int32 SkinId = 1;
	optional uint64 CardGuid = 2;
}

message GC_CARD_SKIN_ADD
{
	required int32 SkinId = 1;
}

message CG_CARD_SKIN_CHANGE
{
	required uint64 CardGuid = 1;
	required int32 SkinId = 2;
}

message CG_UPDATE_QUEST
{
	required int32 questType = 1;
	required int32 updateType = 2;
}

//, 同步经分实时在线数据
//=================数据库存储 修改需要考虑兼容=================
message _DBTLogSyncOnlineState
{
	optional string gameappid = 1;
	optional int64 timekey = 2; //unixtime
	optional int32 gsid = 3;
	optional int32 zoneareaid = 4;
	optional int32 onlinecntios = 5;
	optional int32 onlinecntandroid = 6;
}

message GC_CARD_OPEN_SWITCHBAG
{
}

message CG_REQ_DAILY_SIGN_GET_CONTINUE_PRIZE
{
	optional int32 index = 1;
}

//剧情副本，再次挑战
message CG_REQ_STORY_LEVEL_AGAIN
{

}

//通知剧情副本战胜boss
message GC_STORY_LEVEL_FIN
{

}

//领取剧情奖励
message CG_GET_STORY_FIRST_AWARD
{
	required int32 index = 1;
}

//战斗准备通知
message GC_BATTLE_READY
{
	optional uint64  playerGuid = 1;
}

message GW_VALIDATE
{
	required int32 WorldId = 1;				//世界号
	required int32 GameVersion = 2;			//主版本号
	required int32 ProgramVersion = 3;		//程序版本号
	required int32 InternalVersion = 4;		//内部版本号
	required int32 DBVersion = 5;			//DB版本号
	required int32 AreaId = 6;				//服务器：微信（1），手Q（2）
	required int32 PlatId = 7;				//平台：IOS（0），安卓（1）
	required int32 Partition = 8;			//小区
	required int32 CompitableVersion = 9;	//兼容版本号
}

enum WG_VALIDATE_RESULT
{
	WG_INVALID = 0;
	WG_SUCCESS = 1;				//成功
	WG_VERSION_ERROR = 2;  		//版本号不匹配
	WG_AREA_DUPLICATE = 3;		//小区ID重合
}

message WG_VALIDATE_RET
{
	required WG_VALIDATE_RESULT Result = 1;
	required int32 Wsworldid = 2;
}

message GW_TRANSPORT_TO_WORLDSERVER
{
	required int32 RoutineID = 1;					//需要发送的RoutineID
	required string MessageName = 2;				//消息名
	required bytes MessageBuf = 3;					//消息buf
}

message WG_TRANSPORT_TO_GAMESERVER
{
	required int32 Send = 1;						//消息发送方式
	required int32 RoutineID = 2;					//需要发送的RoutineID
	required uint64 PlayerGuid = 3;					//需要发送的玩家Guid
	required int32 SceneClassID = 4;				//需要发送的场景类ID
	required int32 SceneID_ClassID = 5;				//需要发送的场景ID ClassID
	required int32 SceneID_InstID = 6;				//需要发送的场景ID InstID
	required string MessageName = 7;				//消息名
	required bytes MessageBuf = 8;					//消息buf
}

//，同步PVP  ===
//=================数据库存储 修改需要考虑兼容=================
message _ArenaData
{
	optional int32 Season = 1;
	optional int32 Score = 2;
	optional int32 WeekBadge = 3;
	optional int32 WeekPlay = 4;
	optional int32 SeasonPlay = 5;
	optional int32 Combo = 6;
	optional bool IsSeasonAward = 7;
	optional int32 ProvisionalWin = 8;
	optional int32 ProvisionalCombo = 9;
	optional int32 ProvisionalComboMax = 10;
}

message _ArenaMember
{
	optional uint64 Guid = 1;
	optional string Name = 2;
	optional int32 Score = 3;
	optional int32 Combo = 4;
}


//=================数据库存储 修改需要考虑兼容=================
message _DBNoPlayData
{
	optional string OpenId = 1;
	optional string Msg = 2;
	optional int64 StartTime = 3;
	optional int64 EndTime = 4;
}

message _NoPlayData_tf
{
	repeated _DBNoPlayData data = 1;
}


//=================数据库存储 修改需要考虑兼容=================
message _DBNoPlayDataServer
{
	repeated _DBNoPlayData data1 = 1;
	repeated _DBNoPlayData data2 = 2;
	repeated _DBNoPlayData data3 = 3;
	repeated _DBNoPlayData data4 = 4;
	repeated _DBNoPlayData data5 = 5;
	repeated _DBNoPlayData data6 = 6;
}

//User身上的乱斗信息
//=================数据库存储 修改需要考虑兼容=================
message _DBMeleeUserRecord
{
	optional int32 Index = 1[default=-1]; 		//活动自增id
	optional int32 TabId = 2[default=-1]; 		//MeleeGeneric表id
	optional int32 Score = 3[default=0]; 		//积分
	optional int32 WinCount = 4[default=0];		//胜利次数
	repeated bool PrizeState = 5; 				//奖励领取状况
}

//乱斗活动信息
//=================数据库存储 修改需要考虑兼容=================
message _DBMeleeData
{
	optional int32 Index = 1[default=-1]; 		//活动自增id
	optional int32 TabId = 2[default=-1]; 		//MeleeGeneric表id
	optional int64 StartTime = 3[default=0];	//开始时间
	repeated int32 IntParams = 4;				//活动定制参数, 如卡池
}


//，同步PVP 排行榜
//=================数据库存储 修改需要考虑兼容=================
message _ArenaRankItem
{
	optional uint64 PlayerGuid = 1;
	optional uint64 PlayerHead = 2;
	optional string PlayerName = 3;
	optional int32 Score = 4;
	repeated _CARD UseCard = 5;
	optional int32 PlayerLevel = 6;
	optional int32 PlayerHeadFrame = 7;
}

//gm工具用, 清除法宝收藏
message GC_TALISMAN_CLEAR_VISUAL
{
}

//gm工具用, 清空法宝背包
message GC_TALISMAN_CLEARBAG
{
	repeated uint64 toDel = 1;
}

message CG_ASYNC_PVP_DATA_REFRESH
{

}

message CG_ASYNC_PVP_BUY_BUFF
{
	optional int32   buffPVPTableId = 1; //
	optional int32 	 costType = 2; //开元通宝不足时，选择用玉璧 or 绢帛代替
}

message CG_ASYNC_PVP_ENTER_BATTLE
{
	optional int32   index = 1; //
}

message CG_ASYNC_PVP_GET_AWARD_BOX
{
	optional int32   id = 1; //
}

message GC_ARENA_SYNC
{
	required _ArenaData ArenaData = 1;
}

message CG_ARENA_MATCH_ENTER
{
}

message GC_ARENA_MATCH_ENTER
{
}

message CG_ARENA_MATCH_CANCEL
{
}

message GC_ARENA_MATCH_CANCEL
{
}

message GC_ARENA_MATCH_OK
{
	required _ArenaMember ArenaMember = 1;
}

message GC_ARENA_MATCH_FAIL
{
}

message CG_ARENA_RANK
{
}

message GC_ARENA_RANK
{
	repeated _ArenaRankItem ArenaRank = 1;
	required int32 MyRankPos = 2;
}

//妖气试炼-请求开始
message CG_REQ_TOWER_COPY_SCENE_FIGHT
{
	required int32 issue = 1; //期号
	required int32 level = 2; //层数
}

//妖气试炼-通关记录
message GC_UPDATE_TOWER_COPY_SCENE
{
	required int32 towerLastPass = 1; //通关记录
}

//请求改名
message CG_REQ_CHANGENAME
{
	required string name = 1;		//想要修改的名字
}

//改命返回结果
message GC_RET_CHANGENAME
{
	required int32 result = 1;	//结果
	optional uint64 guid = 2;		//改名玩家的guid
	optional string name = 3;		//返回的名字结果
}

message _IDIP_QUERY_FULING_INFO
{
	optional string guid = 1;
	optional int32 cfgid = 2;
	optional int32 level = 3;
	optional int32 star = 4;
	optional int32 skilllv1 = 5;
	optional int32 skilllv2 = 6;
	optional int32 skilllv3 = 7;
	optional int32 isawake = 8;
}

message _IDIP_QUERY_FULING_INFO_tf
{
	repeated _IDIP_QUERY_FULING_INFO data = 1;
}

message _IDIP_QUERY_SOULSTAR_INFO
{
	optional string guid = 1;
	optional int32 cfgid = 2;
	optional int32 property = 3;
	optional int32 level = 4;
	optional int32 rare = 5;
}

message _IDIP_QUERY_SOULSTAR_INFO_tf
{
	repeated _IDIP_QUERY_SOULSTAR_INFO data = 1;
}

message _IDIP_QUERY_WUHUA_INFO
{
	optional string guid = 1;
	optional int32 cfgid = 2;
	optional int32 wuhuatype = 3;
	optional int32 level = 4;
	optional int32 rare = 5;
}

message _IDIP_QUERY_WUHUA_INFO_tf
{
	repeated _IDIP_QUERY_WUHUA_INFO data = 1;
}

message CG_RT_MOVE
{
	required float posx = 1;			//点的x坐标
	required float posz = 2;			//点的z坐标
}

message GC_RT_MOVE
{
	required uint64 guid = 1;				//Guid
	required int32 poscount = 2;		//点的个数
	repeated int32 posserial = 3;		//路径序号
	repeated float posx = 4;				//点的x坐标
	repeated float posz = 5;				//点的z坐标
}

message GC_RT_STOP
{
	required uint64 guid = 1;    		//guid
	required int32 posserial = 2;   //点的序号
	required float posx = 3;        //点的x坐标
	required float posz = 4;        //点的z坐标
}

message GC_RT_CREATE_PLAYER
{
	required uint64 guid = 1;				//Guid
	required float posx = 2;				//X坐标
	required float posz = 3;				//Z坐标
	required float facedir = 4;			//朝向
	required string name = 5;				//名字
	required int32 modelid = 6;			//模型ID
	required int32 soulwaremodelid = 7;	//魂器外观ID
	required int32 CallCardId = 8;	//召唤符灵ID
	required int32 CallCardModelId = 9;	//召唤符灵模型ID
	required uint64 HeadIcon = 10;	//头像
	required int32 Level = 11;			//等级
	required int32 CurHeroId = 12;	//当前主角ID
	required int32 RelaxAnimIdWithCard = 13;	//当前和符灵的交互动作
	required int32 RelaxAnimIdWithHero = 14;	//当前和主角的交互动作
	required uint64 RelaxAnimWithSender = 15;		//当前和主角的交互动作发起者guid
	required uint64 RelaxAnimWithReceiver = 16;	//当前和主角的交互动作接收者guid
	required int32 TalismanVisualId = 17;			//当前法宝外观ID
	required int32 RoleMaskModelId = 18;			//当前变身模型ID
	optional int32 DyeColorId = 19[default=-1];				//染色id
	optional int32 CallCardDyeColorId = 20[default=-1];		//召唤符灵染色id
	required int32 HeadFrame = 21[default=0];		//头像框id
	optional int32 OrnamentEffectId = 22; //特效装饰id
	optional int32 CallCardOrnamentEffectId = 23; //特效装饰id
}

message GC_RT_DELETE_PLAYER
{
	required uint64 guid = 1;				//guid
}

message CG_RT_SWITH_MODE
{
	required bool rtmode = 1;				//RT模式
	required int32 sceneid = 2;			//SceneClassId
}

message CG_RT_REQ_CHANGE_LUOYANG
{
}

message GC_RT_RET_CHANGE_LUOYANG
{
	required bool canchange = 1;		//是否能切到洛阳
}

message GC_RT_UPDATE_MAINPLAYER_POS
{
	required float posx = 1;				//X坐标
	required float posz = 2;				//Z坐标
	required float facedir = 3;			//朝向
}

message GC_RT_DEBUG_SYNC_POS
{
	required float posx = 1;				//X坐标
	required float posz = 2;				//Z坐标
}

message GC_RT_UPDATE_PLAYER_ATTR
{
	required uint64 guid = 1;				//Guid
	optional string name = 2;				//名字
	optional int32 modelid = 3;			//模型ID
	optional int32 soulwaremodelid = 4;	//魂器外观ID
	optional uint64 HeadIcon = 5;		//头像
	optional int32 Level = 6;				//等级
	optional int32 CurHeroId = 7;		//当前主角ID
	optional int32 TalismanVisualId = 8;			//当前法宝外观ID
	optional int32 RoleMaskModelId = 9;	//当前变装id(用于记录是否是变装状态)
	optional int32 DyeColorId = 10[default=-1];	//染色id
	optional int32 HeadFrame = 11;	//头像框id
	optional int32 OrnamentEffectId = 12; //特效装饰id
}

message GC_TALISMAN_DELETE
{
	required uint64 TalismanGuid = 1;
	optional uint64 CardGuid = 2;
	optional int32 HeroId = 3;
}

message GC_QUARTZ_DELETE
{
	required uint64 QuartzGuid = 1;
	optional uint64 CardGuid = 2;
}

message CG_CARD_CALL
{
	required uint64 CardGuid = 1;
}

message GC_CARD_CALL
{
	required uint64 CardGuid = 2;
}

message CG_CARD_UNCALL
{
	required uint64 CardGuid = 1;
}

message GC_CARD_UNCALL
{
	required uint64 CardGuid = 2;
}

message GC_CREATE_CALLCARD
{
	required uint64 PlayerGuid = 1;
	required int32 CardId = 2;
	required int32 CardModelId = 3;
	optional int32 DyeColorId = 4[default=-1];	//染色id
	optional int32 OrnamentEffectId = 5;	//特效装饰id
}

message GC_DELETE_CALLCARD
{
	required uint64 PlayerGuid = 1;
}

enum CARD_LOVE_OPT
{
    //主动行为
	REQ_START =1; //发起组建
	REQ_CREATE_CONFIRM =2; //创建者确认组建
	REQ_CREATE_CONFIRM_OTHER =3; //被邀请方组建确认
	REQ_NAME =4; //命名
	REQ_INVITE =5; //邀请
	REQ_INVITE_RESPONSE =6; //应答邀请
	REQ_CANCEL = 7;        //取消组建
	REQ_CHOOSE_CARD = 8;   //选择卡牌
	
	//被动行为
	REV_INVITED = 9;        //收到邀请
	REV_INVITE_RESPONSE = 10; //对方邀请应答
	REV_CHOOSE_CARD = 11;     //对方选择卡牌
	REV_CREATE_CONFIRM = 12; //对方发起组建确认
	REV_CANCEL = 13;         //对方取消组建
	REV_CREATE_CONFIRM_OTHER = 14; //收到被邀请方确认信息 
	REV_CREATE_RET = 15;	 //最终创建结果 
	REV_DEL_LOVE =16;		 //对方请求删除情缘
	
	REQ_DEL_LOVE =17; 		 //删除情缘
}
	
//发起情缘组建
message CG_CARD_PREDESTINED_LOVE
{
	required int32 OPType = 1; //操作类型
	optional uint64 UserGuid = 2; //用户ID
	optional uint64 CardGuid = 3; //卡牌ID
	optional string LoveName = 4; //情缘名字
	optional int32 Confirm = 5;   //1-确认 0-拒绝
	optional uint64 CardGuidOther = 6; //删除情缘时，对方卡牌id
}

//情缘组建过程中的回应信息
message GC_CARD_PREDESTINED_LOVE
{
    required int32 Step = 1; //情缘组建 当前步骤
	optional int32 Response = 2;   //回应结果
    optional _DBUserInfoShort UserInfo = 3; //接收邀请者信息
	optional _CARD CardInfo = 4; //对方选择的符灵信息
	optional int32 IsCreater           = 5; //是否是创建者
	optional int32 OPType              = 6; //操作类型
	optional string LoveName           = 7; //情缘名称
}


message CG_ASYNC_PVP_DATA_WEEK_AWARK
{
}

message GC_BAN_CHAT
{
	optional _DBBanChat   ban = 1;
}


message GC_BAN_CHAT_BOARDCAST
{
	optional uint64 guid = 1;
	optional string name = 2;
	optional uint64 icon = 3;
	optional int64  endTime = 5;
}

message CG_CARD_RELAXANIM
{
	required uint64 CardGuid = 1;
	required int32 RelaxAnimId = 2;
}

message GC_CARD_RELAXANIM
{
	required uint64 PlayerGuid = 1;
	required int32 RelaxAnimId = 2;
}

message CG_HERO_RELAXANIM
{
	required int32 HeroId = 1;
	required int32 RelaxAnimId = 2;
}

message GC_HERO_RELAXANIM
{
	required uint64 PlayerGuid = 1;
	required int32 RelaxAnimId = 2;
}

message _DBNameSet
{
	repeated string names = 1;
}

message CG_RT_CHANGE_ENVIRONMENT
{
	required int32 Environment = 1;
}

message GC_GUILD_CHANGE_NAME
{
	required int32 retCode = 1;
}

//客户端情包结构
message _EmojPackClientData
{
	optional uint32 EmojOwn = 1;//拥有表情包
	repeated int32 EmojEquipList = 2;//表情包使用排序
}

//服务器情包结构
message _EmojPackServerData
{
	optional uint32 EmojOwn  = 1;//拥有表情包
	repeated int32 EmojEquipList = 2;//表情包使用排序
}

enum EMOJ_SHOP_OP
{
	EQUIP = 1;
	UNEQUIP = 2;
	BUY = 3;
	SYNC = 4;
}


//客户端表情商店操作
message CG_EMOJ_SHOP_REQ
{
	required EMOJ_SHOP_OP OpType = 1;//操作,1装备 2 卸载 3购买
	optional int32 ID = 2;//参数
}

//服务器返回表情商店消息
message GC_EMOJ_RESULT
{

	enum EMOJ_SHOP_OP_RET
	{
		SUCCESS = 0;
		FAILED = 1;
	}
	required EMOJ_SHOP_OP OpTypeRet = 1;//操作,1装备,2卸载 3购买 4同步
	required EMOJ_SHOP_OP_RET OpResult = 2;//0失败, 1成功
	optional uint32 EmojOwn  = 3;//拥有表情包
	repeated int32 EmojEquipList = 4;//表情包使用排序
}

message CG_RELAXANIM_WITHCARD
{
	required uint64 CardGuid = 1;
	required int32 RelaxAnimId = 2;
}

message GC_RELAXANIM_WITHCARD
{
	required uint64 PlayerGuid = 1;
	required int32 RelaxAnimId = 2;
}

message CG_NPC_MISC_ENTER_BATTLE
{
	optional int32 miscId = 1;
}

message CG_RELAXANIM_WITHCARD_STOP
{
}

message GC_RELAXANIM_WITHCARD_STOP
{
	required uint64 PlayerGuid = 1;
}

//符灵情缘 玩家信息
//=================数据库存储 修改需要考虑兼容=================
message _DBUserInfoShort
{
	optional uint64     Guid                                = 1;
    optional string     Name                                = 2;
    optional int32      Level                               = 3[default=1];
	required uint64     HeadIcon                            = 4; //头像
	optional int32		HeadFrame							= 5; //头像框
}

//符灵情缘 卡牌简要信息
//=================数据库存储 修改需要考虑兼容=================
message _DBCardInfoShort
{
	optional uint64 Guid 			= 1;
	optional int32 CardId 		    = 2;
	optional int32 Exp 				= 3;
	optional int32 Level 			= 4;
	optional int32 Star 			= 5;
	optional int32 Awakening 	    = 6;
	optional int32 CurSkinId 	    = 7;
}

//符灵情缘
//=================数据库存储 修改需要考虑兼容=================
message _DBCardLove
{
	optional int32 Level 			= 1; //情缘等级
	optional string name        	= 2; //情缘名称
	optional bool IsCreator			= 3; //是否是创建者 
	optional uint64 CardGuidSelf 	= 4; //自己符灵id
	optional _DBUserInfoShort UserInfoOther	 = 5; //对方玩家信息
	//optional _DBCardInfoShort CardInfoOther  = 6; //对方符灵信息 废弃
	optional int32 Param0           = 7; //情缘任务
	optional int32 Param1           = 8; //情缘任务
	optional _CARD CardInfoOther    = 9; //对方符灵信息
}

//符灵情缘 下发情缘信息
message GC_CARDLOVE_UPDATE
{
	repeated _DBCardLove CardLoveList = 1;
}

//情缘组建 步骤
enum CARDLOVE_STEP
{
	STATR = 1;  //发起组建
	WAIT_CHOOSE_CARD = 2; //对方接受邀请，等待对方选择
	WAIT_CREATE_CONFIRM = 3; //双方卡牌准备完毕，等待创建者最后确认
	WAIT_OTHER_CONFIRM = 4; //创建者确认后，等待对方确认
	WAIT_CREATE = 5;         //双方确认完毕，等待创建
	FINISH = 6;              //创建完成
}

//情缘组建 选择符灵
message CG_CARDLOVE_CHOOSE
{
	required uint64 CardGuid = 1;
}

message CG_RELAXANIM_WITHHERO
{
	required uint64 ReceiverGuid = 1;
	required int32 RelaxAnimId = 2;
}

message GC_RELAXANIM_INVITE
{
	required uint64 SenderGuid = 1;
	required string SenderName = 2;
	required int32 RelaxAnimId = 3;
}

message CG_RELAXANIM_INVITE_OK
{
	required uint64 SenderGuid = 1;
}

message CG_RELAXANIM_INVITE_CANCEL
{
	required uint64 SenderGuid = 1;
}

message GC_RELAXANIM_WITHHERO
{
	required uint64 SenderGuid = 1;
	required uint64 ReceiverGuid = 2;
	required int32 RelaxAnimId = 3;
}

message CG_RELAXANIM_WITHHERO_STOP
{
}

message GC_RELAXANIM_WITHHERO_STOP
{
	required uint64 SenderGuid = 1;
	required uint64 ReceiverGuid = 2;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBCardLoves
{
	repeated _DBCardLove CardLoves = 1;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBLuckBagRecord
{
	optional uint64 luckbagguid = 1;
	optional uint64 playerguid = 2;
	optional string name = 3;
	optional int32 value = 4;
}

//=================数据库存储 修改需要考虑兼容=================
message _YardCard
{
	optional uint64 CardGuid = 1;
	optional int32 TabId = 2;
	optional int32 SkinId = 3;
	optional int32 Intimacy = 4;
	optional int32 OrnamentEffectTabId = 5;
	optional int32 Awakening = 6;
	optional int32 IntimacyLevel = 7;
}

//=================数据库存储 修改需要考虑兼容=================
message _YardStealRec
{
	optional int32 Index = 1; 
	optional uint64 Guid = 2;
}

//=================数据库存储 修改需要考虑兼容=================
message _YardProd
{
	optional int64 FinishTime = 1;			// 结束生产的时间
	optional int32 ProdId = 2;				// 生产奖励id, -1则为没有生产
	optional int32 ProdIntimacyValue = 3;	// 开始生产时的总亲密度
	optional int32 ProdCardCnt = 4; 		// 开始生产时的符灵总数
	
	repeated uint64 HelpList = 5;			// 被帮助记录
	repeated _YardStealRec StealList = 6;	// 被偷取记录. 因为存在不同玩家竞争同一个资源, 所以要记录index
}

//=================数据库存储 修改需要考虑兼容=================
message _YardProdOpRec
{
	optional int32 YardOpType = 1;			// 助, 偷. 参见enum YardOp
	optional int64 OpTime = 2;				// 操作时间
	optional _DBRelation OperatorInfo = 3;	// 操作者信息
}

//=================数据库存储 修改需要考虑兼容=================
message _Yard
{
	repeated _YardCard CardList = 1;			// 摆放符灵列表
	optional int32 SkinId = 2[default=1];		// 默认皮肤
	optional uint64 OwnerGuid = 3;				// 所有者id
	repeated int32 UnlockedSkin = 4;			// 手动解锁的皮肤
	optional _YardProd YardProd = 5; 			// 生产状态
	repeated _YardProdOpRec YardProdOpRec = 6;	// 操作列表, 因为是一段时间内的, 所以不存在单独某次YardProd中
	optional int64 OwnerLoginTime = 7[default=0];			// 主人最后一次登录时间
}

message CG_GATHER_VIGOUR
{
	required int32 GatherId = 1;
}

//=================数据库存储 修改需要考虑兼容=================
enum YardOp
{
	YardOp_SYNC = 0;
	YardOp_SAVE = 1;
	YardOp_PUT = 2;
	YardOp_TAKE = 3;
	YardOp_UPDATE_PROD = 4;		// 更新生产状态
	YardOp_HELP = 5;
	YardOp_STEAL = 6;
	YardOp_START_PROD = 7;
	YardOp_HARVEST = 8;
}

enum YardProdState
{
	YPS_NONE = 0;				// 未生产
	YPS_PROD = 1;				// 正在生产, 可帮助
	YPS_PROD_FULL = 2;			// 正在生产, 不可帮助
	YPS_PROD_FINISH = 3;		// 生产结束, 可偷取
	YPS_PROD_DRAINED_OFF = 4;	// 生产结束, 不可偷取
	YPS_PROD_DESERTED = 5;		// 荒废时间过久, 不可进入
}

message GC_YARD_SYNC
{
	required _Yard YardData = 1;
	required YardOp Operation = 2;
}

message CG_YARD_PUTCARD
{
	required uint64 CardGuid = 1;
}

// 废弃
message GC_YARD_PUTCARD
{
	
}

message CG_YARD_TAKECARD
{
	required uint64 CardGuid = 1;
}

// 废弃
message GC_YARD_TAKECARD
{
}

// 废弃
message CG_YARD_UPDATECARD
{
}

message GC_YARD_UPDATECARD
{
	required YardOp Operation = 1;
	required _YardCard YardCard = 2;
}

//=================数据库存储 修改需要考虑兼容=================
message _WildTreasureQuestion
{
	optional int32 QuestionId = 1;
	optional uint64 AssistId = 2;
	optional int32 Option = 3;
	optional int32 TreasureLevel = 4;
	optional string AssistName = 5;
}

enum WildTreasureStatusType
{
	WildTreasureStatus_Empty = 0;
	WildTreasureStatus_OpenBox = 1;
	WildTreasureStatus_Begin = 2;
	WildTreasureStatus_Clue = 3;
	WildTreasureStatus_End = 4;
}


//=================数据库存储 修改需要考虑兼容=================
message _WildTreasure
{
	optional _WildTreasureQuestion StartQuestionId = 1;		//探索开始的题目
	repeated int32 WildTreasureClueId = 2;					//探索的线索
	optional _WildTreasureQuestion EndQuestionId = 3;		//探索最后的题目
	optional int32 LastClueId = 4;							//最后探索到的线索
	optional WildTreasureStatusType WildTreasureStatus = 5;	//探索状态
}

//大荒寻宝信息
message GC_WILDTREASURE_INFO
{
	required _WildTreasure WildTreasureInfo = 1;
}

//大荒寻宝开始问题的选择
message CG_WILDTREASURE_STARTQUESTION_OPTION
{
	required int32 QuestionId = 1;
	optional int32 Option = 2;
}

message GC_WILDTREASURE_STARTQUESTION_OPTION
{
	required int32 ret = 1;
}

//大荒寻宝最后问题的选择
message CG_WILDTREASURE_ENDQUESTION_OPTION
{
	required int32 QuestionId = 1;
}

message GC_WILDTREASURE_ENDQUESTION_OPTION
{
	required int32 ret = 1;
}

//找到线索
message CG_WILDTREASURE_CLUE_FIND
{
	required int32 clueId = 1;
}

message GC_WILDTREASURE_CLUE_FIND
{
	required int32 ret = 1;
}

//完成大荒寻宝
message GC_WILDTREASURE_FINSH
{
	required int32 QuestionID = 1;
}

//取消大荒寻宝
message CG_WILDTREASURE_CANCEL
{
}

message GC_WILDTREASURE_CANCEL
{
	required int32 ret = 1;
}

//大荒寻宝开始问题求助
message CG_WILDTREASURE_STARTQUESTION_FOR_HELP
{
	required int32 QuestionID = 1;
	required uint64 AssistGuid = 2;
}

//大荒寻宝开始问题求助者选择是否帮助
message CG_WILDTREASURE_STARTQUESTION_ASSIST_OPTION
{
	required uint64 SenderGuid = 1;
	required int32 Option = 2;
}

//大荒寻宝开始问题确定帮助
message GC_WILDTREASURE_STARTQUESTION_TO_HELP
{
	required int32 QuestionID = 1;
	required uint64 AssistGuid = 2;
	required string AssistName = 3;
}

message CG_SOLO_INVITE
{
	required uint64 ReceiverGuid = 1;
}


message CG_SOLO_RESPONSE
{
	required uint64 SenderGuid = 1;
	required bool IsAccept = 2;
}


message CG_SOLO_AGAIN
{
}

message CG_SHARE_CIRCLE_QUEST
{
}


message GC_SHARE_CIRCLE_QUEST
{
	optional bool  isShareCircleQuests = 1[default = false];
	repeated _DBShareCircleQuest info = 2;  //帮派里分享的任务
	optional bool  isacceptShareCircleQuests = 3[default = false];
	repeated _DBPlayerAcceptShareCircleQuest  acceptShareCircleQuests = 4;  //接受的分享任务
	repeated int32  finishCircleQuest = 5;//完成的环任务
	optional bool   newShareCircleQuests = 6[default = false]; //有新的分享环任务
	optional bool  isMyShareCircleQuests = 7[default = false];
	repeated _DBPlayerShareCircleQuest 	myShareCircleQuests = 8;//自己分享的环任务
}

message CG_HELUORIFT_RANDOMEVENT
{
}

message GC_HELUORIFT_RANDOMEVENT
{
	repeated int32 ChooseEventId = 1;
	optional int32 RemainRandom = 2;
}

message GC_HELUORIFT_ELITE_REFRESH
{
	repeated _HeLuoRiftPoint ElitePoint = 1;
}

//=================数据库存储 修改需要考虑兼容=================
message _TEAMHELP
{
	optional int32 TodayEarn = 1;		//今日已收获
	optional int64 dayRefreshTime	= 2;//上次刷新时间
	repeated uint64 TodayBorrow = 3;//进入借入历史(guid不能重复,长度小于20)
	repeated uint64 OnLoanCardGuids = 4;//功能上架的缓存
}

message CG_MODIFY_GUILD_LOAN_CARD
{
	repeated uint64 LoanCardList = 1;//定常为2的当前出租卡牌数组
}

message GC_MODIFY_GUILD_LOAN_CARD
{
	enum MODIFY_RESULT
    {
        MOD_OK  = 0;
        MOD_ERROR = 1;
    }
	required MODIFY_RESULT Ret = 1;//修改返回值
}

message _GuildMemberLoanCard
{
	optional int32 TotalEarnToday = 1;//今日借出收益累计,小于100
	repeated _CARD Cards = 2;//租出的卡牌
}

message CG_REQ_GUILD_LOAN_CARD_LIST
{
	
}

message _ReplyLoanCardInfo
{
	//_GuildMember
	optional _DBUserInfoShort Owner = 1;//借出者
	optional _CARD Card = 2;//卡牌全信息
}

message GC_REP_GUILD_LOAN_CARD_LIST
{
	repeated _ReplyLoanCardInfo CardList = 1;//卡牌列表
	repeated uint64 TodayBorrow = 2;//进入借入历史(guid不能重复,长度小于20)
}

message CG_ARENA_RANKPOS
{	
}

message GC_ARENA_RANKPOS
{
	required int32 MyRankPos = 1;
}

message _ArenaSideInfo
{
	optional uint64 PlayerGuid = 1;
	optional int32 HeroId = 2;
	optional string PlayerName = 3;
	repeated _CARD UseCard = 4;
}

message GC_ARENA_BATTLESTART
{
	required _ArenaSideInfo BlueSide = 1;
	required _ArenaSideInfo RedSide = 2;
}

message _ArenaSideFinish
{
	optional uint64 PlayerGuid = 1;
	optional uint64 PlayerHead = 2;
	optional string PlayerName = 3;
	optional int32 AddScore = 4;
	optional int32 AddBadge = 5;
	optional bool IsProvisional = 6;
	optional int32 PlayerHeadFrame = 7;
}

message GC_ARENA_BATTLEFINISH
{
	required _ArenaSideFinish BlueSide = 1;
	required _ArenaSideFinish RedSide = 2;
	required int32 WinSide = 3;
}

message GC_ARENA_UPDATE
{
	required _ArenaData ArenaData = 1;
	optional bool WithoutUI = 2;
}
//=================数据库存储 修改需要考虑兼容=================
message _CollectionGroupFinishList
{
    repeated int32 AlreadyReceived=1;
}
message CG_CollectionGroup_ReceiveAward
{
    required int32 GroupId=1;
}

//剧情副本，删除一个怪
message CG_STORY_LEVEL_DEL_MONSTER
{
	optional int32 monsterId = 1;
}

message GC_COLLECTIONGROUP_RECEIVEAWARD
{
   required int32 GroupId=1;
}

message GC_SOLO_INVITE
{
	required uint64 SenderGuid = 1;
	optional int32 SenderLevel = 2;
	optional uint64 SenderIcon = 3;
	optional string SenderName = 4;
	optional string SendContent = 5;
	optional int32 SenderHeadFrame = 6;
	optional int32 ReceiverLevel = 7;
	optional uint64 ReceiverIcon = 8;
	optional string ReceiverName = 9;
	optional int32 ReceiverHeadFrame = 10;
}

//客户端分享完成
message CG_SHARE_FINISH
{
}

message CG_SOLO_CANCEL
{
}

message GC_SOLO_CANCEL
{
}

message CG_SYS_COLLECTIONGROUPLIST
{

}
message GC_SYS_COLLECTIONGROUPLIST
{
    repeated int32 AlreadyReceived=1;
}

message GC_HERO_PIECE_ADD
{
	required int32 HeroId = 1;
	required int32 PieceId = 2;
}


message GC_HERO_ACTIVATE
{
	required int32 HeroId = 1;
}

message CG_RT_REQ_CHANGE_ENVIRONMENT
{
}

message GC_RT_RET_CHANGE_ENVIRONMENT
{
}

message CG_INTIMACY_ADD
{
    enum ADD_TYPE
    {
        INVALID  = -1;
        GIVE_GIFT = 0;
		ANSWER=1;
    }
	required uint64 CardGuid = 1;
	required int32 AddType = 2;
	required _IntimacyGift PayID=3;
}
message _IntimacyGift
{
    optional int32 GiftItemId=1;
	optional int32 GiftItemCount=2;
	optional uint64 GiftItemGuid=3;
}

message CG_CARDINTIMACY_LEVELUP
{
    required uint64 CardGuid=1;
}
message GC_CARDINTIMACY_LEVELUP
{
    required uint64 CardGuid=1;
	required int32 ChooseTitleID=2;
}

message CG_CHANGE_SCENE
{
	required int32 SceneId = 1;
}

message GC_CHANGE_SCENE
{
	optional int32 scene = 1;
	optional float posX = 2;
	optional float posZ= 3;
	optional int32 EnvironmentType = 4;
	optional bool FirstEnterLuoYang = 5;
}

//托管上报safe数据
message CG_REPORT_SAFESDKDATA
{
	required bytes SafeData = 1;
}

//返回safe数据
message GC_REBACK_SAFESDKDATA
{
	required bytes SafeData = 1;
}

//变身
message GC_ROLEMASK_START
{
	required int32 MaskRoleModeId = 1;
	required int64 DelayTime = 2;				
}

message CG_ROLEMASK_STOP
{
	
}

message GC_ROLEMASK_STOP
{
	
}

message CG_MELEE_CANCEL_MATCH
{
}

message _BattleStartCardBrief
{
	optional int32 tabId  = 1;
	optional int32 level = 2;
	optional int32 star = 3;
	optional int32 awake = 4;
}

message _BattleStartSideBrief
{
	optional uint64 HeadIcon = 1;
	optional string PlayerName = 2;
	repeated _BattleStartCardBrief BriefList = 3;
}

message GC_MELEE_BATTLESTART
{
	required _BattleStartSideBrief BlueSide = 1;
	required _BattleStartSideBrief RedSide = 2;
}
message CG_CARD_INTIMACY_BUYGIFT
{
    required int32 ItemId=1;
	required int32 Count=2;
}
message GC_CARD_INTIMACY_UPDATE_VIEW
{
	optional int32 itemID  = 1;
}

message CG_DYE_CHANGE_COLOR
{
	optional int32 id = 1; 	//选中的颜色
	optional uint64 cardGuid = 2; //选中的卡牌
	optional int32 heroId = 3; //选中的主角
}


//限时染色卡数据
//=================数据库存储 修改需要考虑兼容=================
message _DyeColorItem
{
	optional int32 id = 1; //颜色id
	optional int64 timeOutTM = 2; //过期时间戳
}

message GC_UPDATE_DYE_COLOR_ITEM
{
	repeated _DyeColorItem items = 1;
}

//已经激活的染色卡
message GC_UPDATE_UNLOCKED_COLOR_ITEM
{
	repeated int32 idList = 1;
}

//激活颜色卡
message CG_REQ_UNLOCK_COLOR_ITEM
{
	optional int32 id = 1;
}

//剧情大跳消息
message CG_STORY_SKIP_TO
{
	required int32  id		= 1;		//跳到剧情ID
	required int32	line	= 2;		//故事线ID
	required bool	end		= 3;		//跳到结束
}

message GC_GVOIVE_GUID
{
	required uint64 gvoiceRoomGuid=1;   //战斗语音房间Guid
}

message GC_TUTORIALQUEST_PHASE
{
	repeated int32 phaseAwardTake = 1;
}

message GC_HERO_CHANGE_DYE_COLOR
{
	required int32 HeroId = 1;
	optional int32 dyeColorId = 2;
}

message _ORBMENTSLOT
{
	optional _QUARTZ Quartz = 1;
	optional int32 SlotIndex = 2;
}

message _INTIMACY_LIMIT_BUY
{
     optional int32 ItemId=1;
	 optional int32 LimitNum=2;
}

message _DBINTIMACY_LIMIT_BUY_LIST
{
     repeated _INTIMACY_LIMIT_BUY RestrictionsList=1;
}

message CG_INTIMACY_BUY_LIMIT_SYC
{

}

message GC_INTIMACY_BUY_LIMIT_SYC
{
      optional _DBINTIMACY_LIMIT_BUY_LIST RestrictionsList=1;
}

message CG_HERO_FIRST_SHOW
{
	required int32 HeroId = 1;
}

message CG_HERO_ACTIVATE
{
	required int32 HeroId = 1;
}

 //   enum BIOSTYPE
 //   {
 //       IOSJB      = 1;
 //       ANDROID    = 2;
 //       IOS        = 3;
 //   }

//支付通用参数
message _MIDAS_PAY_INFO
{
	optional string      openKey = 1;
	optional string      pf = 2;
	optional string      pfKey = 3;
	optional int32       zoneId = 4;
	optional string 	  offerId = 5;
	optional string 	  sessionId = 6;
	optional string 	  sessionType = 7;
	optional int32     	  biosType = 8; //系统类型
	optional string       appKey=9;
	
}

enum RECHARGE_TYPE
{
	RECHARGE_LONGIN = 0;
	RECHARGE_GETBALANCE = 1;
	RECHARGE_GETBALANCE_RET = 2;
	RECHARGE_BUYGOODS = 3;
	RECHARGE_BUYGOODS_RET = 4;
	RECHARGE_SYNC_CONFIG = 5;
}


message CG_RECHARGE
{
	optional RECHARGE_TYPE  rechargeType = 1;
	optional _MIDAS_PAY_INFO  payInfo = 2;
	optional int32 goodsId = 3; //商品ID , 购买道具使用
	optional int32 goodsNum = 4; //商品ID数量 , 购买道具使用
}

message _BUY_GOODS_RET
{
	optional int32 ret = 1;
	optional string msg = 2;
	optional string token = 3;
	optional string url_params = 4;
}

message GC_RECHARGE
{
	optional RECHARGE_TYPE  rechargeType = 1;
	optional _BUY_GOODS_RET bugGoodsRet = 2;
	optional bool openForceBuyItemZoneId = 3;
	optional int32 forceBuyItemZoneId = 4;
	
}
//=================数据库存储 修改需要考虑兼容=================
message _CARD_INTIMACY_ALREADY_ADD
{
    optional int32 BattleAdd=1;
	optional int32 GiftAdd=2;
}

//拍照-特效同步
message GC_PHOTOEFFECT_UPDATE
{
	optional _PhotoEffectData PhotoEffectData=1;
}
//拍照-特效解锁
message CG_REQ_PHOTOEFFECTUNLOCK
{
	optional int32 Id=1;
}
//拍照-动画同步
message GC_PHOTOANIM_UPDATE
{
	optional _PhotoAnimData PhotoAnimData=1;
}

//拍照-动画解锁
message CG_REQ_PHOTOANIMUNLOCK
{
	optional int32 Id=1;
}

message _PhotoEffectData
{
	repeated _PhotoEffect PhotoEffect=1;
}
message _PhotoAnimData
{
	repeated _PhotoAnim PhotoAnim=1;
}
//拍照-特效
message _PhotoEffect
{
	enum Photo_Status
	{
		UnLock = 0;
		Lock = 1;
	}
	optional int32 EffectId=1;
	optional int32 CurStatus=2;
}
//拍照-动画
message _PhotoAnim
{
	enum Photo_Status
	{
		UnLock = 0;
		Lock = 1;
	}
	optional int32 AnimId=1;
	optional int32 CurStatus=2;
}

message _DBSocialSpaceUserInfo
{
	optional uint64 guid = 1;//玩家GUID
	optional string Name = 2;//名字
	optional int32 Level = 3;//等级
	optional uint64 icon = 4;//头像
}

message _DBSocialSpaceUserVisit
{
	optional _DBSocialSpaceUserInfo UserInfo = 1;
	optional int32 Value = 2;
}

message _DBSocialSpaceUserGiftRecv
{
	optional _DBSocialSpaceUserInfo UserInfo = 1;
	optional _DROP_LIST Drop = 2;
}

message _DBSocialSpaceUserFlowerSend
{
	optional _DBSocialSpaceUserInfo UserInfo = 1;
	optional int32 Type = 2;
	optional int32 Num = 3;
}

message _DBSocialSpace
{
	repeated _DBSocialSpaceUserVisit RecentVisitUsers = 1;
	optional int32 GiftNum = 2;
	repeated _DBSocialSpaceUserGiftRecv RecentGiftRecvUsers = 3;
	optional int32 MeiLiNum = 4;
	repeated _DBSocialSpaceUserFlowerSend RecentSendUsers = 5;
	optional int32 RenQi = 6;
	optional int32 TodayRenQi = 7;
	repeated uint64 CardShow = 8;
	repeated uint64 TodayVisit = 9;
	repeated uint64 TodayTryGift = 10;
	optional int32 Year = 11;
	optional int32 Month = 12;
	optional int32 Day = 13;
}

//访问个人空间
//CG_VisitSpace
message CG_SOCIALSPACE_VISIT
{
	required uint64 SpaceOwnerGuid = 1;	//空间主人
}

//GC_SyncSpace
message GC_SOCIALSPACE_VISIT
{
	required uint64 SpaceOwnerGuid = 1;
	optional _DBSocialSpace SpaceInfo = 2;
	optional _DBSocialSpaceUserInfo UserInfo = 3;
	optional int32 GiftDropPreviewID = 4;
	repeated _DBSocialSpaceUserVisit RecentVisitUsers = 5;
	optional int32 RefreshRecentVisit = 6;
}

//设置个人空间礼物
 //CG_PutGift
message CG_SOCIALSPACE_GIFTSET
{
	required int32 GiftNum = 1;		//礼物数量
}
//none
message GC_SOCIALSPACE_GIFTSET
{

}

//个人空间赠送鲜花
//CG_GiveFlower
message CG_SOCIALSPACE_FLOWERSEND
{
	required uint64 SpaceOwnerGuid = 1;	
	required int32 ItemID = 2;
	required int32 ItemNum = 3;
}

//none
message GC_SOCIALSPACE_FLOWERSEND
{
	required uint64 SpaceOwnerGuid = 1;	
	required uint32 FlowerNum = 2;
}

//设置个人空间展示符灵
//CG_ModifySpaceCard
message CG_SOCIALSPACE_CARDSET
{
	//repeated _CARD Cards = 1;	
	repeated uint64 CardGuid = 1;	
}

//查看个人空间展示符灵
//CG_SyncSpaceCard
message CG_SOCIALSPACE_CARDVIEW
{
	required uint64 SpaceOwnerGuid = 1;	
}

//GC_SyncSpaceCardResult
message GC_SOCIALSPACE_CARDVIEW
{
	required uint64 SpaceOwnerGuid = 1;	
	repeated _CARD Cards = 2;	
}

//单个鲜花赠送记录

//=================数据库存储 修改需要考虑兼容=================
message _DBSocialSpace_OpRecord
{
	optional uint64 guid = 1;
	optional string name = 2;
	optional int32 level = 3;
	optional uint64 icon = 4;
	optional uint32 itemID = 5;
	optional uint32 itemNum = 6;
}

//空间操作历史记录
message CG_SOCIALSPACE_OPHISTORY
{
	enum OPTYPE
  {
  	GIFT = 0;			//礼物领取
  	FLOWER = 1;		//鲜花赠送
  }
    
	required uint64 SpaceOwnerGuid = 1;	
	required OPTYPE OpType = 2;
}

message GC_SOCIALSPACE_OPHISTORY
{
	enum OPTYPE
  {
  	GIFT = 0;			//礼物领取
  	FLOWER = 1;		//鲜花赠送
  }
	required uint64 SpaceOwnerGuid = 1;	
	required OPTYPE OpType = 2;
	repeated _DBSocialSpace_OpRecord Records = 3;
}


message GC_MAIL_GET_ITEM
{
	
}

//新玩家孵化数据
message _Incubation
{
	enum IncubationStatus
	{
		Empty = 0;
		Going = 1;
		Award = 2;
		Finish = 3;
	}
	
	optional int32 IncubationId = 1;
	optional int32 CurStatus = 2;
	optional int32 ProgressParam = 3;
}

message _IncubationPointAttr
{
	optional int32 Attr1 = 1;
	optional int32 Attr2 = 2;
	optional int32 Attr3 = 3;
	optional int32 Attr4 = 4;
	optional int32 Attr5 = 5;
}

message _IncubationData
{
	enum IncubationActivityStatus
	{
		Empty = 0;
		Going = 1;
		Award = 2;
		Finish = 3;
	}
	
	repeated _Incubation IncubationList = 1;
	repeated int32 PhaseAwardTake = 2;
	optional int32 IncubationPoint = 3; //孵化积分
	optional int32 Day = 4; //当前为活动的第几天
	optional int32 ActivityStatus = 5; //活动状态
	optional int32 EndDay = 6; //活动第几天结束
	optional int64 ActivityTime = 7; //活动开始的时间（开启的第一天的0点）
	optional int32 LoginDays = 8; //活动累计登录天数
	optional _IncubationPointAttr PointAttr = 9; //积分属性分配
}

message GC_INCUBATION_SYNC
{
	optional _IncubationData IncubationData = 1;
	
}

message GC_INCUBATION_UPDATE
{
	repeated _Incubation IncubationList = 1;
	optional int32 IncubationPoint = 2; //孵化积分
	optional int32 Day = 3; //当前为活动的第几天
	optional int32 ActivityStatus = 4; //活动状态 
	
}

message CG_INCUBATION_AWARD
{
	required int32 IncubationId = 1;
}

message CG_INCUBATION_PHASE
{
	required int32 ResetType = 1;
	required int32 PhaseId = 2;
}

message GC_INCUBATION_PHASE
{
	repeated int32 PhaseAwardTake = 1;
}

message GC_CARDLOVE_UPDATE_ONE
{
	required _DBCardLove CardLove = 1;
}

message CG_INCUBATIONDRAWCARD_START
{
}

message GC_INCUBATIONDRAWCARD_START_FINISH
{
	required _CARD IncubationCard = 1;
	optional bool IsNewCard = 2;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBYuanbaoReq
{
	optional uint64 guid = 1;
	optional int32 yuanbaooptype = 2;
	optional int32 count = 3;
	optional int32 optype = 4;
	optional uint64 logseq = 5;
	optional int32 cmdid = 6;
	optional int32 source = 7;
	optional string serial = 8;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBYuanbaoreqQueue
{
	repeated _DBYuanbaoReq req = 1;
}

message CG_INCUBATION_QUEST
{
	required int32 IncubationId = 1;
}
message CG_SOCIALSPACE_COMMENT
{
	required uint64 SpaceOwnerGuid = 1;
}

message GC_HELUORIFT_TIMEOUTLEAVE
{
}

message GC_HELUORIFT_CSINFOSYNC
{
	repeated _HeLuoRiftPoint EventPoint = 1;
	repeated _HeLuoRiftPoint AdventurePoint = 2;
	repeated _HeLuoRiftPoint ElitePoint = 3;
	optional _HeLuoRiftPoint BossPoint = 4;
	repeated int32 BattleImpact = 5;
	repeated int32 ChooseEventId = 6;
	optional int32 RemainRandom = 7;
	optional int32 AreaId = 8;
	optional _HeLuoRiftRoomInfo RoomInfo = 9;
	optional bool IsRapidLogin = 10;
}

message GC_TUTORIAL_FINISHGROUP
{
	required int32 FinishGroup = 1;
}

enum FIRST_CHARGE_PHASE
{
	NONE_PHASE = 0;//无首充
	FIRST_PHASE = 1;//首充一阶段
	SECOND_PHASE = 2;//首充二阶段
}
//请求获得首充礼物
message CG_GET_FIRST_CHARGE_REWARD
{
	optional FIRST_CHARGE_PHASE FirstChargePhase = 1;//首充阶段
}
//请求获得首充礼物返回
message GC_GET_FIRST_CHARGE_REWARD_RET
{
	optional FIRST_CHARGE_PHASE FirstChargePhase = 1;//首充阶段
	repeated bool RewardStatus = 2;//奖励领取状态
}
//请求同步状态
message CG_FIRST_CHARGE_REWARD_REQ_SYNC
{

}
//返回同步状态
message GC_FIRST_CHARGE_REWARD_SYNC
{
	optional FIRST_CHARGE_PHASE FirstChargePhase = 1;//首充阶段
	repeated bool RewardStatus = 2;//奖励领取状态
}


enum CHARGE_FUND_GRADE
{
	FUND_NONE = 0;//无基金
	LESS_LV20 = 1;//小于20级
	GE_LV20 = 2;//大于20级
}

//购买成长基金
message CG_BUY_CHARGE_FUND
{

}

//请求成长基金奖励
message CG_GET_CHARGE_FUND
{
	optional int32 Level = 1;//奖励的等级
}
//请求成长基金奖励返回
message GC_GET_CHARGE_FUND_RET
{
	optional CHARGE_FUND_GRADE Grade = 1;//基金级别
	repeated bool Level = 2;//奖励领取状态
}
//请求同步状态
message CG_CHARGE_FUND_REQ_SYNC
{
	
}
//返回同步状态
message GC_CHARGE_FUND_SYNC
{
	optional CHARGE_FUND_GRADE Grade = 1;//基金级别
	repeated bool Level = 2;//奖励领取状态
}

//充值成长基金记录
message _DBChargeData
{
	optional int32 TotalChargeCount = 1;//累计充值数
	optional FIRST_CHARGE_PHASE FirstChargePhase = 2;//首充阶段
	repeated bool RewardStatus = 3;//奖励领取状态
	optional CHARGE_FUND_GRADE Grade = 4;//基金级别
	repeated bool Level = 5;//奖励领取状态
	optional int32 FirstChargeMailCount = 6;	//首冲奖励邮件剩余数量
	optional int64 FirstChargeMailTime = 7;		//首冲奖励邮件发送时间
}

message CG_INCUBATION_CHANGE_POINTATTR
{
	required _IncubationPointAttr PointAttr = 1;
}

message GC_INCUBATION_CHANGE_POINTATTR
{
	required int32  ret = 1;
	optional _IncubationPointAttr PointAttr = 2;
}

message _CSRankItem
{
	optional uint64 PlayerGuid = 1;
	optional uint64 PlayerHead = 2;
	optional string PlayerName = 3;
	repeated _CARD UseCard = 4;
	optional int32 PlayerLevel = 5;
	optional int32 PlayRound = 6;
	optional int32 CSLevel = 7;
	optional int32 PlayerHeadFrame = 8;
}

message _CSRank
{
	optional int32 RankId = 1;
	repeated _CSRankItem RankInfo = 2;
}

//=================数据库存储 修改需要考虑兼容=================
message _CSRankData
{
	repeated _CSRank RankList = 1;
}


//=================数据库存储 修改需要考虑兼容=================
message _CSCardRankItem
{
	optional int32 CardId = 1;
	optional int32 UseTimes = 2;
}


//=================数据库存储 修改需要考虑兼容=================
message _CSCardRank
{
	optional int32 RankId = 1;
	repeated _CSCardRankItem RankInfo = 2;
	optional int32 PlayTimes = 3;
}

//=================数据库存储 修改需要考虑兼容=================
message _CSCardRankData
{
	repeated _CSCardRank RankList = 1;
}


//=================数据库存储 修改需要考虑兼容=================
message _DBCSRankRoutine
{
	optional _CSRankData   rankData = 1;  
	optional _CSCardRankData   cardRankData = 2;
	optional int64   cardRankReduceMouth = 3;
	optional int32   towerRankIssue = 4;
}

message CG_TUTORIAL_QUEST_LEAVEFOR
{
	optional int32 questid=1;
}

//改变服务器战斗速度
message CG_CHANGE_BATTLE_SPEED
{
	optional int32 speed = 1;
}

message CG_CSRANK_REQ
{
	optional int32 RankId = 1;
	optional int32 CardRankId = 2;
}

message GC_CSRANK_REQ
{
	optional _CSRank CSRank = 1;
	optional _CSCardRank CSCardRank = 2;
}

//等级礼包 领奖
message CG_LEVEL_AWARD
{
	required int32 Level = 1;
}

message GC_LEVEL_AWARD
{
	required int32 Level =1;
	required bool AwardFlag =2;
}

message GC_SYNC_LEVEL_AWARD
{
	repeated bool levelAwardFlag = 1;
}

message PandoraAddItem
{
	optional int32 itemid = 1;
	optional int32 itemcount = 2;
}

message PandoraAddItemList
{
	repeated PandoraAddItem itemList = 1;
}

//=================数据库存储 修改需要考虑兼容=================
//福利卡 周卡、月卡 
message _DBRechargeCard
{
	optional int32 DataId = 1;
	optional int64 ExpireTime = 2[default=0]; //过期时间戳
	optional int32 LastAwardTime = 3[default=0]; //上次领奖时间
}

//领取周卡、月卡每日奖励
message CG_RECHARGE_CARD_AWARD
{
	required int32 DataId = 1;
}

//周卡、月卡信息同步
message GC_SYNC_RECHARGE_CARD
{
	repeated _DBRechargeCard RechageCards = 1;
}

//同步帮会捐赠数据
message GC_GUILD_CONTRIBUTE_SYNC
{
	required _GuildContribute GuildContributeData = 1;
}

//更新帮会捐赠数据
message GC_GUILD_CONTRIBUTE_UPDATE
{
	optional _GuildContribute GuildContributeData = 1;	//帮会捐赠数据
	optional int32 ContributePoint 				  = 2;	//个人捐赠积分
	repeated int32 ContributeAward                = 3;	//今日已领捐赠奖励
	repeated int32 YesterdayContributeAward       = 4;	//昨日未领捐赠奖励，今日已领取的奖励
	optional bool  IsCanGetAward                  = 5;	//是否可以领取今日的帮会奖励，若为false代表该玩家今天已经在其他帮会领过奖励
	optional bool  IsCanGetYesterdayAward         = 6;	//是否可以领取昨日的帮会奖励，若为false代表该玩家今天刚入帮，不能领取昨日奖励
	optional bool  IsCanContribute				  = 7;	//是否可以进行捐赠，若为false代表该玩家今天已经在其他帮会捐赠过了
}

//帮会捐赠
message CG_GUILD_CONTRIBUTE
{
	repeated int32 ItemID = 1;
	repeated int32 ItemNum = 2;
}

//领取今日帮会捐赠奖励
message CG_GUILD_CONTRIBUTE_AWARD_TODAY
{
	required int32 AwardId = 1;
}

message GC_GUILD_CONTRIBUTE_AWARD_TODAY
{
	repeated int32 AwardIdTake = 1;
}

//领取昨日帮会捐赠奖励
message CG_GUILD_CONTRIBUTE_AWARD_YESTERDAY
{
	required int32 AwardId = 1;
}

message GC_GUILD_CONTRIBUTE_AWARD_YESTERDAY
{
	repeated int32 AwardIdTake = 1;
}


message CG_STORY_COPY_ASSISTANT
{
	optional int32 assistantTimes = 1;
	optional int32 selectType = 2;
}

message GC_STORY_COPY_ASSISTANT
{
	optional int32 assistantTimes = 1;
	optional int32 bossFailTimes = 2;
	optional int32 bossFailTimesMax = 3;
	optional int32 battleFailTimes = 4;
	optional int32 battleFailTimesMax = 5;
	optional int32 curAssistantTimes = 6;
	optional bool isFinish = 7[default = true];
}

//集字玩法- 商店物品兑换
message CG_SHOP_EXCHANGE_ITEM
{
	required int32 CommodityId = 1;
}
message GC_SHOP_EXCHANGE_ITEM
{
	required int32 CommodityId = 1;
	optional int32 BoughtNum = 2;
}

//集字玩法-兑换商店
message GC_SYNC_SHOP_EXCHANGE
{
	optional _DBExchangeShop Shop =1;
}



//请求开启活动
message CG_GUILD_BOSS_START
{
	optional int32 BossID = 1;
}

//广播消息
message GC_GUILD_BOSS_START_RET
{
	optional int32 BossID = 1;
}

//请求进入单人战斗
message CG_GUILD_BOSS_ENTER_BATTLE_SOLO
{
	
}
//不用
message CG_GUILD_BOSS_ENTER_BATTLE_TEAM
{
	
}

//请求同步
message CG_GUILD_BOSS_SYNC
{
}

//=================数据库存储 修改需要考虑兼容=================
message _DBGuildBossRankItem
{
	optional uint64 guid = 1;//玩家GUID
	optional string Name = 2;//名字
	optional int32 Level = 3;//等级
	optional uint64 icon = 4;//头像
	optional int32 HPDeliver = 5;//总伤害
	optional uint64 DeliverTime = 6;//最近的伤害时间秒
	optional int32 RewardID = 7;//获得奖励ID
 	optional uint32 Attend = 8;//bit位已参加阶段的状态
	optional int32 HeadFrame = 9;	//头像框
}

enum GUILD_BOSS_STATE
{
	GUILD_BOSS_STATE_CLOSE = 0;//未开启
	GUILD_BOSS_STATE_OPENING = 1;//正在开启
	GUILD_BOSS_STATE_OPEN = 2;//开启
	GUILD_BOSS_STATE_WAIT_FINISH = 3;//等待结束
	GUILD_BOSS_STATE_FINISH = 4;//结束
}

//=================数据库存储 修改需要考虑兼容=================
message _DBBossActivity
{
	optional uint64 GuildGuid = 1;//工会ID
	optional int32 BossID = 2;//BOSSID
	optional int32 HP = 3;//HP
	optional int32 CurPhase = 4;//当前阶段
	optional uint64 StartTime = 5;//开始时间秒 1970?
	optional uint64 CurPhaseStartTime = 6;//当前阶段开始时间秒 1970?
	optional uint64 FinishWaitStartTime = 7;//开始进行结算的时间秒 1970?
	optional GUILD_BOSS_STATE State = 8;//状态
	repeated _DBGuildBossRankItem RankVec = 9;//排行榜
}

//=================数据库存储 修改需要考虑兼容=================
message _DBGuildBossRoutineData
{
	repeated _DBBossActivity Activities = 1;//工会BOSS
}

message _DBGuildBossUserInfo
{
	optional uint64 LastGuildID = 1;
	repeated bool PhasePlay = 2;
}

//同步
message GC_GUILD_BOSS_SYNC_RET
{
	optional _DBBossActivity Activity = 1;//数据
}


//活动结束
message GC_GUILD_BOSS_END_RET
{
	enum END_STATE
	{
		WAIT = 0;//等待结束，阻止新的战斗开始，正在进行的战斗的收到此消息，进行退出结束战斗，若干秒后进行结算
		FINISH = 1;//服务器结算
	}
	optional int32 EndState = 1;//状态
}

message GC_MSDK_QQSVIP_UPDATE
{
	required int32 QQSVipEndTime = 1;
}

message GC_NEW_MARQUEE
{
	required string Content = 1;
}

//=================数据库存储 修改需要考虑兼容=================
//运营活动每日签到数据
message _DBActivityDailySign
{
	repeated int32 DailySign = 1;			//签到信息
	optional int32 ActivityDays = 2;		//活动天数
	optional int32 SaveSignTimes = 3;		//总共补签次数
	optional int32 TodaySaveSignTimes = 4; 	//今日补签次数
	repeated int32 DailySignPhase = 5;		//阶段奖励
}

message GC_ACTIVITY_DAILY_SIGN_SYNC
{
	optional _DBActivityDailySign DailySign = 1;
}

message GC_ACTIVITY_DAILY_SIGN_UPDATE
{
	optional int32 AddDailySign = 1;		//新增签到
	optional int32 ActivityDays = 2;		//活动天数
	optional int32 SaveSignTimes = 3;		//总共补签次数
	optional int32 TodaySaveSignTimes = 4; 	//今日补签次数
	optional int32 AddDailySignPhase = 5;	//新增阶段奖励
}

//运营活动每日签到
message CG_ACTIVITY_DAILY_SIGN_AWARD
{
	required int32 SignId = 1;
}

//运营活动阶段奖励
message CG_ACTIVITY_DAILY_SIGN_PHASE
{
	required int32 PhaseId = 1;
}

message CG_ACCOUNTROLE_INFO_REQ
{
	repeated string OpenIdList = 1;
}

message _AccountRole
{
	optional string OpenId = 1;
	optional uint64 Guid = 2;
	optional int32 Level = 3;
	optional string RoleName = 4;
	optional int32 QQSVipEndTime = 5;
	optional uint64 Icon = 6;
}

message GC_ACCOUNTROLE_INFO_REQ
{
	repeated _AccountRole AccountRoleList = 1;
}

message GC_BATTLE_FINISH_GUILDBOSS
{
	optional int32 winSide = 1;
	optional int32 id = 2;
	optional int32 dhp = 3;
}

message CG_PANDORA_GET_USERINFO
{

}

message GC_PANDORA_GIVE_USERINFO
{
	optional int64 totalAmt = 1;
	optional int64 createUserDays = 2;
	optional int32 userLevels = 3;
	optional int64 lastRechargeTime=4;
}

// 客户端保存庭院信息
message CG_YARD_SYNC
{
	required _Yard YardData = 1;
	required YardOp Operation = 2;
}


//=================数据库存储 修改需要考虑兼容=================
message _DBPieceDonateUser
{
	//optional int64 LastTimeAsk;
	optional int32 TodayDonateNum = 1;//当日捐赠
}

//=================数据库存储 修改需要考虑兼容=================
message _DBPieceDonateUserInfo
{
	optional uint64 guid = 1;//玩家GUID
	optional string Name = 2;//名字
	optional int32  Level = 3;//等级
	optional uint64  icon = 4;//头像
	optional int32 HeadFrame = 5;	//头像框
}

//=================数据库存储 修改需要考虑兼容=================
message _DBPieceDonateTransition
{
	optional uint64 guid = 1;//玩家GUID
	optional uint64 time = 2;//赠送时间
	optional bool GetDonate = 3;//是否领取
	optional string Name = 4;//名字
	optional int32  Level = 5;//等级
	optional uint64  icon = 6;//头像
	optional int32 HeadFrame = 7;//头像框
}

//=================数据库存储 修改需要考虑兼容=================
message _DBPieceDonateItem
{
	optional uint64 AskGuid = 1;//被赠送玩家GUID
	repeated _DBPieceDonateTransition Transition = 2;//赠送条目
	optional int32 AskNum = 3;//需求数目
	optional int32 PieceID = 4;//需求ID
	optional uint64 AskTime = 5;//请求时间
	optional int32 Year = 6;//请求的年
	optional int32 Day = 7;//请求的年日期
}

message CG_PIECE_BEG_FOR_DONATION
{
	optional int32 pieceID = 1;
	optional int32 num = 2;
}

message CG_PIECE_MAKE_DONATION
{
	optional int32 pieceID = 1;
	optional uint64 targetGuid = 2;//被赠者GUID
}

message CG_PIECE_SYNC_REQ
{
	
}

message GC_PIECE_SYNC_RET
{
	repeated _DBPieceDonateItem Items = 1;//请求条目
	repeated _DBPieceDonateUserInfo UserInfos = 2;//玩家信息 
	optional int32 Useless = 3;//没用的
	required int32 DonateToday = 4;
}

message GC_PIECE_SYNC_RET_DELTA
{
	enum OP
	{
		ADD_BEG = 0;//请求碎片
		ADD_DONATE = 1;//捐赠碎片
		GET = 2;//获取碎片
		DEL = 3;//
		MOD = 4;//
	}
	optional uint64 AskGuid = 1;//被赠送玩家GUID
	repeated _DBPieceDonateTransition Transition = 2;//赠送条目
	optional int32 AskNum = 3;//需求数目
	optional int32 PieceID = 4;//需求ID
	optional uint64 AskTime = 5;//请求时间
	optional int32 Year = 6;//请求的年
	optional int32 Day = 7;//请求的日期
	optional OP Op = 8;//请求类型
	optional string Name = 9;//名字
	optional int32  Level = 10;//等级
	optional uint64  icon = 11;//头像
	optional int32 HeadFrame = 12;//头像框
}

message CG_GET_DONATION
{

}

message GC_SOCIALSPACE_COMMENT_BACK
{
	optional bool firstCommentConfirm = 1;
}

//回默认点
message CG_RT_MOVE_DEFAULTPOS
{

}

//同步帮会金币
message GC_SYNC_GUILD_GOLD
{
	optional uint64  gold = 1;//帮会金币
}

message GC_SYNC_TODAY_LOGINPLAT
{
	optional bool TodayMSDKLoginPlat = 1;
}


//=================数据库存储 修改需要考虑兼容=================
message _ReputationData
{
	optional int32 Reputation = 1;
	repeated int32 AwardTake = 2;
	optional int32 DayReputation = 3;
	optional int32 LastLevelUpTime = 4;
}

message GC_REPUTATION_SYNC
{
	required _ReputationData PlayerReputation = 1;
}

message GC_REPUTATION_UPDATE
{
	required int32 Reputation = 1;
}

message CG_REPUTATION_AWARD
{
	optional int32 AwardId = 1;
	optional bool IsOverAward = 2;
}

message GC_REPUTATION_AWARD
{
	repeated int32 AwardTake = 1;
}

//通知新手引导卡的Guid
message GC_CARD_TUTORIAL
{
	required uint64 CardGuid = 2;
}

//捐赠返回
message GC_PIECE_MAKE_DONATION_RET
{
	required bool Crit = 1;			//是否暴击
	required int32 PieceID = 2;		//捐赠ID
}

message CG_GRAYUPDATE_REWARD
{
	required string Version=1;
	required int32 GrayUpdateId=2;
}

//剧情副本 星级奖励
message CG_STORY_STAR_AWARD
{
	optional int32 AwardId =1;
}

//剧情副本 星级奖励领取标记
message GC_STORY_STAR_AWARD
{
	repeated int32 AwardFlag = 1;
}


//=================数据库存储 修改需要考虑兼容=================
// 帮会商店激活的商品
message _GuildShopItem
{
	optional int64 ActiveTime = 1;
	optional int32 ShopItemID = 2;
}

//=================数据库存储 修改需要考虑兼容=================
// 帮会商店所有激活的商品
message _GuildShop
{
	optional int64 RefreshTime = 1[default=0];
	repeated _GuildShopItem ActivatedItems = 2;
}


//=================数据库存储 修改需要考虑兼容=================
// 玩家身上存储, 帮会商店某个商品的购买次数
message _GuildShopBuyItem
{
	optional int32 ShopItemID = 1;
	optional int32 BuyCount = 2;
}


//=================数据库存储 修改需要考虑兼容=================
// 玩家身上存储, 帮会商店的购买总数据
message _GuildShopBuyInfo
{
	optional int64 LastVisitTime = 1[default=0];
	repeated _GuildShopBuyItem BoughtItems = 2;
}

message CG_ACTIVATE_GUILD_SHOP_ITEM
{
	required int32 ShopItemID = 1;
}

message GC_ACTIVATE_GUILD_SHOP_ITEM
{
	required bool Succeed = 1;
}

message CG_BUY_GUILD_SHOP_ITEM
{
	required int32 ShopItemID = 1;
	required int32 Count = 2;
}

message GC_BUY_GUILD_SHOP_ITEM
{
	required bool Succeed = 1;
}

message GC_SYNC_USER_GUILD_SHOP
{
	required _GuildShopBuyInfo UserGuildShop = 1;
}

message CG_REQ_HEADFRAME
{
}

message GC_RET_HEADFRAME
{
	repeated int32 data = 1;			//头像框获取信息bitset
	repeated int32 isnew = 2;			//是否为新头像框bitset
	required bool isFull = 3;			//是否为全部数据
}

message CG_VIEW_HEADFRAME
{
	repeated int32 viewd = 1;			//已预览的头像框bitset
}

message CG_REQ_HEADFRAME_EQUIP
{
	required int32 index = 1;			//申请装备的头像框索引
}

message GC_RET_HEADFRAME_EQUIP
{
	required int32 index = 1;			//返回装备的头像框结果
}

message GC_CARDPIECE_UPDATE
{
	required int32 PieceID = 1;
	required int32 Count = 2;
	required int32 DonateToday = 3;
}

message CG_AUGUR_DELETE
{
	required int32 Index = 1;
	required int32 AugurID = 2;
}

message GC_AUGUR_DELETE_RET
{
	required int32 Index = 1;
}

// 激活状态有修改时, 广播状态
message GC_SYNC_GUILD_SHOP
{
	required _GuildShop GuildShop = 1;
}

message GC_QUESTIONNAIRE
{
	required string Url = 1;
}

message GC_DRAWCARD_UPDATE
{
	optional int32 AugurMemberCount = 1;
}

message CG_DAILY_SIGN_CONTINUEPHASE
{
	optional int32 index = 1;
}
message _DAILY_SIGN_CONTINUEPHASE_PRIZE
{
	optional int32 tabId = 1;
	optional bool isGot = 2;
	optional bool canOpen = 3;
}


//=================数据库存储 修改需要考虑兼容=================
message _OrnamentEffect
{
	optional int32 EffectId = 1;
	optional int32 EffectNum = 2;
	optional int32 NewNum = 3;
}

//=================数据库存储 修改需要考虑兼容=================
message _DBOrnamentEffect
{
	repeated _OrnamentEffect OrnamentEffectList = 1;	
}

message GC_ORNAMENTEFFECT_SYNC
{
	repeated _OrnamentEffect OrnamentEffectList = 1;
}

message GC_ORNAMENTEFFECT_UPDATE
{
	repeated _OrnamentEffect OrnamentEffectList = 1;
}

enum OrnamentEffectOwnerType
{
    OrnamentEffectOwnerTypeNone = 0;
    OrnamentEffectOwnerTypeHero = 1; //角色
    OrnamentEffectOwnerTypeCard = 2; //符灵
}
	
//装备特效装饰
message CG_ORNAMENTEFFECT_EQUIP
{
	required OrnamentEffectOwnerType EquipOwnerType = 1;		//装备者类型
	required int32 EquipOrnamentEffectID = 2;			//特效装饰ID
	optional int32 EquipHeroID = 3;	
	optional uint64  EquipCardGuid = 4;
	required OrnamentEffectOwnerType ReplaceOwnerType = 5;	//替换者类型
	optional int32 ReplaceHeroID = 6;
	optional uint64  ReplaceCardGuid = 7;
}

//卸载特效装饰
message CG_ORNAMENTEFFECT_UNEQUIP
{
	required OrnamentEffectOwnerType UnEquipOwnerType = 1;	//卸载者类型
	optional int32 HeroID = 2;
	optional uint64 CardGuid = 3;
}

message HeroOrnamenteffectInfo
{
	optional int32 HeroID = 1;
	optional int32 OrnamentEffectID = 2;
}

//更新主角的特效装饰信息
message GC_HERO_ORNAMENTEFFECT_UPDATE
{
	repeated HeroOrnamenteffectInfo HeroList = 1;
}

message OrnamentEffectShowNew
{
	optional int32 EffectId = 1;
	optional int32 NewNum = 2;
}
//客户端通知服务器点击了几个显示为new的特效
message CG_ORNAMENTEFFECT_NEW_NUM_NOTICE
{
	repeated OrnamentEffectShowNew NewList = 1;
}

message GC_ORNAMENTEFFECT_NEW_NUM_NOTICE_RET
{
	repeated OrnamentEffectShowNew NewList = 1;
} 

//运营活动-每日充值
//=================数据库存储 修改需要考虑兼容=================
message _DBActivityRecharge
{
	optional int32 ActivityRechargeId = 1; //活动id 对应充值活动的一期
	optional int32 RechargeDays = 2; //活动期间累计充值达标天数
	optional int32 AwardFlag = 3;    //领奖标记 [0~31] 0位标记最终奖，其他位标记对应天的奖
	optional int32 LastRechargeDay =4; //上次充值时间 格式：20180707
}

message CG_ACTIVITY_RECHARGE
{
	optional int32 AwardDay = 1; //请求第几天的奖励 0表示领取累计奖励
}

message GC_ACTIVITY_RECHARGE
{
	optional _DBActivityRecharge RechargeInfo = 1;
}

//性格技能-升级
message CG_HERO_TRAIT_SKILL_LEVELUP
{
	required int32 TraitSkillId = 1;
}

message GC_HERO_TRAIT_SKILL_LEVELUP
{
	required int32 HeroId = 1;
	required int32 TraitSkillType = 2;
	required int32 TraitSkillLevel = 3;
}

//性格技能-成长值奖励领取
message CG_HERO_TRAIT_SKILL_AWARD
{
	required int32 AwardId = 1;
}

//性格技能-兑换物品
message CG_HERO_TRAIT_SKILL_EXCHANGE
{
	required int32 Id = 1;
}

//同步充值额
message GC_SYNC_CHARGE_AMT
{
	optional  int64  save_amt = 1; //历史充值游戏币
	optional  int64  recharge_amt = 2;//累计直购
}
message CG_INTIMACY_TITLE
{
	optional int32 titleID=1;//激活称谓下标
	optional uint64 cardGuid=2;
}
message GC_INTIMACY_TITLE_INFO
{
	
}
message _INTIMACY_TITLE_INFO
{
	optional int32 activateTitleID=1;
	repeated int32 titleID=2;
}

//性格技能-成长值奖励领取
message GC_HERO_TRAIT_SKILL_AWARD
{
	required int32 AwardFlag = 1;
	required int32 HeroId = 2;
}
//=================数据库存储 修改需要考虑兼容=================
enum TreasuresShopStatus
{
    TreasuresShopEnd = 0;
    TreasuresShopGoing = 1;
	
}

//=================数据库存储 修改需要考虑兼容=================
message _DBTreasuresShop
{
	optional int64 refreshTime	= 1;
	repeated int32 commodityId 		= 2;
	repeated int32 times 			= 3;
	required TreasuresShopStatus status = 4 [default = TreasuresShopEnd];
}

message GC_SYN_TREASURESSHOP_INOF
{
	optional  _DBTreasuresShop  shop = 1;
	optional bool  isRefresh = 2 [default = false];
	
}

message GC_QUARTZ_STRENGTHEN_ERROR
{
	optional int32 dicId = 1;  //错误提示信息的字典号
}

message CG_CHANGE_CONTAINER_SCENE
{
	required int32 manager = 1;
	required int32 inst = 2;
	required int32 scene = 3;
}

message CG_YARD_ENTER_MINE
{
}

message CG_YARD_ENTER_OTHERS
{
	required uint64 targetGuid = 1;
}

//帮会-一键申请
message CG_GUILD_APPLY
{
	repeated uint64 guildIds = 1;
}

//帮会-取消申请
message CG_GUILD_APPLY_CANCLE
{
	required uint64 guildId = 1; 
}

//帮会-已申请的列表
message GC_GUILD_APPLY_LIST
{
	repeated uint64 guildIds = 1;    //申请id
	repeated int64 applytime = 2;   //申请时间
}

message CG_CHANGE_SEX
{
	optional int32 sex = 1;
}

//帮会-设置是否需要审批
message CG_GUILD_SET_QUICK_JOIN
{
	required bool QuickJoin = 1;	
}

//帮会-更新定位
message CG_GUILD_UPDATE_LOC
{
	required _GuildLoc Location =1;
}


message CG_CLEAR_REPLACE_AUGUR
{
	required int32 Index = 1; // -1全部，从0开始
}

message CG_YARD_UNLOCK_SKIN
{
	required int32 SkinId = 1;
}

message GC_YARD_UNLOCK_SKIN
{
	required bool Suc = 1;
	required int32 SkinId = 2;
}

message CG_YARD_CHANGE_SKIN
{
	required int32 SkinId = 1;
}

message GC_YARD_CHANGE_SKIN
{
	required bool Suc = 1;
	required int32 SkinId = 2;
}

message CG_YARD_START_PROD
{
	required int32 ProdId = 1;
}

message GC_YARD_START_PROD
{
	required int32 ProdId = 1;
	required bool Suc = 2;
}

message CG_YARD_HARVEST
{
}

message CG_YARD_HELP
{
}

message CG_YARD_STEAL
{
	required int32 Index = 1;
}

message CG_YARD_CHECK_PROD_STATE
{
	required uint64 Guid = 1;
}

message GC_YARD_CHECK_PROD_STATE
{
	required YardProdState State = 1;
	required uint64 Guid = 2;
}

message CG_HANGPIECE_STEP
{
	optional uint64 guid=1;
	optional int32 heroid=2;
	optional int32 operationType=3;
}
message GC_HANGPIECE_INFO
{
	optional _HANGPIECE_INFO hangpieceinfo=1;
}
//=================数据库存储 修改需要考虑兼容=================
message _HANGPIECE_INFO
{
	repeated _HANGPIECE hangpicelist=1;
}
//=================数据库存储 修改需要考虑兼容=================
message _HANGPIECE
{
	optional uint64 guid=1;
	optional int32 itemid=2;
	optional int32 heroId=3;
	optional int32 CreatTime=4;
}
message CG_HANGPIECE_BUY
{
	optional int32 itemid=1;
}

message GC_SOCIALSPACE_URL
{
	required string Url = 1;
}

enum DRAWCARD_PATHTYPE
{
	Start = 0;
	Normal = 1;
	End = 2;
}

message CG_DRAWCARD_SYNC_PATH
{
	optional DRAWCARD_PATHTYPE PathType = 1;
	repeated _DrawCardOperate OperateSet = 2;
	optional float CenterXPos = 3;
	optional float CenterYPos = 4;
	optional float CenterZPos = 5;
}

message GC_DRAWCARD_SYNC_PATH_RET
{
	optional DRAWCARD_PATHTYPE PathType = 1;
	repeated _DrawCardOperate OperateSet = 2;
	optional float CenterXPos = 3;
	optional float CenterYPos = 4;
	optional float CenterZPos = 5;
	optional int32 ramdomSeed = 6;
}
message GC_HANGPIECE_EQUIP
{
	optional _HANGPIECE hangpiece=1;
	optional int32 heroId=2;
	optional int32 SlotType=3;
}
